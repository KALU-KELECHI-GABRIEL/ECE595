[
    {
      "Document Title": "Automatic Characterization of Exploitable Faults: A Machine Learning Approach",
      "Authors": "S. Saha; D. Jap; S. Patranabis; D. Mukhopadhyay; S. Bhasin; P. Dasgupta",
      "Author Affiliations": "Department of Computer Science and Engineering, IIT Kharagpur, Kharagpur, India; Physical Analysis & Cryptographic Engineering Labs, Nanyang Technical University, Singapore; Department of Computer Science and Engineering, IIT Kharagpur, Kharagpur, India; Department of Computer Science and Engineering, IIT Kharagpur, Kharagpur, India; Physical Analysis & Cryptographic Engineering Labs, Nanyang Technical University, Singapore; Department of Computer Science and Engineering, IIT Kharagpur, Kharagpur, India",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "31-Oct-18",
      "Publication Year": 2019,
      "Volume": 14,
      "Issue": 4,
      "Start Page": 954,
      "End Page": 968,
      "Abstract": "Characterizing the fault space of a cipher to filter out a set of faults potentially exploitable for fault attacks (FA), is a problem with immense practical value. A quantitative knowledge of the exploitable fault space is desirable in several applications, such as security evaluation, cipher construction and implementation, design, testing of countermeasures, and so on. In this paper, we investigate this problem in the context of block ciphers. The formidable size of the fault space of a block cipher mandates the use of an automation strategy to solve this problem, which should be able to characterize each individual fault instance quickly. On the other hand, the automation strategy is expected to be applicable to most of the block cipher constructions. Existing techniques for automated fault attacks do not satisfy both of these goals simultaneously, and hence are not directly applicable in the context of exploitable fault characterization. In this paper, we present a supervised machine learning assisted automated framework, which successfully addresses both of the criteria mentioned. The key idea is to extrapolate the knowledge of some existing FAs on a cipher to rapidly figure out new attack instances. Experimental validation of this idea on two state-of-the-art block ciphers - PRESENT and LED - establishes that our approach is able to provide fairly good accuracy in identifying exploitable fault instances at a reasonable cost. Utilizing this observation, we propose a statistical framework for exploitable fault space characterization, which can provide an estimate of the success rate of an attacker corresponding to the given fault model and fault location. The framework also returns test vectors leading toward successful attacks. As a potential application, the effect of different S-Boxes on the fault space of a cipher is evaluated utilizing the framework.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2018.2868245",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8452997",
      "Author Keywords": "Security;block cipher;fault attack;machine learning",
      "IEEE Terms": "Ciphers;Tools;Mathematical model;Machine learning;Testing",
      "Mesh_Terms": "",
      "Article Citation Count": 19,
      "Patent Citation Count": null,
      "Reference Count": 45,
      "License": "IEEE",
      "Online Date": "31-Aug-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "SAIL: Analyzing Structural Artifacts of Logic Locking Using Machine Learning",
      "Authors": "P. Chakraborty; J. Cruz; A. Alaql; S. Bhunia",
      "Author Affiliations": "Department of Electrical and Computer Engineering, University of Florida, Gainesville, FL, USA; Department of Electrical and Computer Engineering, University of Florida, Gainesville, FL, USA; King Abdulaziz City for Science and Technology (KACST), Communication and Information Technology Research Institute, Riyadh, Saudi Arabia; Department of Electrical and Computer Engineering, University of Florida, Gainesville, FL, USA",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "13-Aug-21",
      "Publication Year": 2021,
      "Volume": 16,
      "Issue": null,
      "Start Page": 3828,
      "End Page": 3842,
      "Abstract": "Obfuscation or Logic locking (LL) is a technique for protecting hardware intellectual property (IP) blocks against diverse threats, including IP theft, reverse engineering, and malicious modifications. State-of-the-art locking techniques primarily focus on securing a design from unauthorized usage by disabling correct functionality ‚Äì they often do not directly address hiding design intent through structural transformations. They rely on the synthesis tool to introduce structural changes. We observe that this process is insufficient as the resulting changes in circuit topology are: (1) local and (2) predictable. In this paper, we analyze the structural transformations introduced by LL and introduce a potential attack, called SAIL, that can exploit structural artifacts introduced by LL. SAIL uses machine learning (ML) guided structural recovery that exposes a critical vulnerability in these techniques. Through this attack, we demonstrate that the gate-level structure of a locked design can be retrieved in most parts through a systematic set of steps. The proposed attack is applicable to most forms of logic locking, and significantly more powerful than existing attacks, e.g., SAT-based attacks, since it does not require the availability of golden functional responses (e.g., an unlocked IC). Evaluation on benchmark circuits shows that we can recover an average of about 92%, up to 97%, transformations (Top-10 R-Metric) introduced by logic locking. We show that this attack is scalable, flexible, and versatile. Additionally, to evaluate the SAIL attack resilience of a locked design, we present the SIVA-Metric that is fast in terms of computation speed and does not require any training. We also propose possible mitigation steps for incorporating SAIL resilience into a locked design.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2021.3096028",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9478898",
      "Author Keywords": "Hardware obfuscation;logic locking;hardware security;cybersecurity;machine learning",
      "IEEE Terms": "Logic gates;Resilience;Machine learning;Hardware;Interference;Benchmark testing;Training",
      "Mesh_Terms": "",
      "Article Citation Count": 12,
      "Patent Citation Count": null,
      "Reference Count": 44,
      "License": "IEEE",
      "Online Date": "9-Jul-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Poligraph: Intrusion-Tolerant and Distributed Fake News Detection System",
      "Authors": "G. Shan; B. Zhao; J. R. Clavin; H. Zhang; S. Duan",
      "Author Affiliations": "Department of Management Information System, Temple University, Philadelphia, PA, USA; Institute for Advanced Study, Tsinghua University, Beijing, China; University of Maryland, Baltimore County, Baltimore, MD, USA; Department of Information Systems, Shandong Institute of Blockchain, Jinan, China; Institute for Advanced Study and the Beijing National Research Center for Information Science and Technology, Tsinghua University, Beijing, China",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "15-Dec-21",
      "Publication Year": 2022,
      "Volume": 17,
      "Issue": null,
      "Start Page": 28,
      "End Page": 41,
      "Abstract": "We present Poligraph, an intrusion-tolerant and decentralized fake news detection system. Poligraph aims to address architectural, system, technical, and social challenges of building a practical, long-term fake news detection platform. We first conduct a case study for fake news detection at authors‚Äô institute, showing that machine learning-based reviews are less accurate but timely, while human reviews, in particular, experts reviews, are more accurate but time-consuming. This justifies the need for combining both approaches. At the core of Poligraph is two-layer consensus allowing seamlessly combining machine learning techniques and human expert determination. We construct the two-layer consensus using Byzantine fault-tolerant (BFT) and asynchronous threshold common coin protocols. We prove the correctness of our system in terms of conventional definitions of security in distributed systems (agreement, total order, and liveness) as well as new review validity (capturing the accuracy of news reviews). We also provide theoretical foundations on parameter selection for our system. We implement Poligraph and evaluate its performance on Amazon EC2 using a variety of news from online publications and social media. We demonstrate Poligraph achieves throughput of more than 5,000 transactions per second and latency as low as 0.05 second. The throughput of Poligraph is only marginally ( ${4\\%}$ ‚Äì ${7\\%}$ ) slower than that of an unreplicated, single-server implementation. In addition, we conduct a real-world case study for the review of fake and real news among both experts and non-experts, which validates the practicality of our approach.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2021.3131026",
      "Funding Information": "Shandong Key Research and Development Program(grant numbers:2020ZLYS09); National Key Research and Development Program of China(grant numbers:2018YFA0704701); Shandong Key Research and Development Program(grant numbers:2020ZLYS09); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9627681",
      "Author Keywords": "Reliability;fault tolerance;machine learning (ML)",
      "IEEE Terms": "Feature extraction;Social networking (online);Throughput;Machine learning;Data models;Visualization;Buildings",
      "Mesh_Terms": "",
      "Article Citation Count": 10,
      "Patent Citation Count": null,
      "Reference Count": 86,
      "License": "IEEE",
      "Online Date": "25-Nov-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Comments on ‚ÄúDropping Activation Outputs with Localized First-Layer Deep Network for Enhancing User Privacy and Data Security‚Äù",
      "Authors": "X. Tan; H. Li; L. Wang; Z. Xu",
      "Author Affiliations": "Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "17-Jul-20",
      "Publication Year": 2020,
      "Volume": 15,
      "Issue": null,
      "Start Page": 3938,
      "End Page": 3939,
      "Abstract": "Inference based on deep learning models is usually implemented by exposing sensitive user data to the outside models, which of course gives rise to acute privacy concerns. To deal with these concerns, Dong et al. recently proposed an approach, namely the dropping-activation-outputs (DAO) first layer. This approach was claimed to be a non-invertible transformation, such that the privacy of user data could not be compromised. However, In this paper, we prove that the DAO first layer, in fact, can generally be inverted, and hence fails to preserve privacy. We also provide a countermeasure against the privacy vulnerabilities that we examined.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2020.2988156",
      "Funding Information": "National Key Research and Development Program of China(grant numbers:2017YFB0801900); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9068271",
      "Author Keywords": "Deep learning;data privacy",
      "IEEE Terms": "Data privacy;Artificial neural networks;Data models;Computational modeling;Data security;Machine learning;Privacy",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 5,
      "License": "IEEE",
      "Online Date": "15-Apr-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Analyzing Android Encrypted Network Traffic to Identify User Actions",
      "Authors": "M. Conti; L. V. Mancini; R. Spolaor; N. V. Verde",
      "Author Affiliations": "Dipartimento di Matematica, Universit√† di Padova, Padua, Italy; Dipartimento di Informatica, Sapienza Universit√† di Roma, Rome, Italy; Dipartimento di Matematica, Universit√† di Padova, Padua, Italy; Dipartimento di Informatica, Sapienza Universit√† di Roma, Rome, Italy",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "19-May-17",
      "Publication Year": 2016,
      "Volume": 11,
      "Issue": 1,
      "Start Page": 114,
      "End Page": 125,
      "Abstract": "Mobile devices can be maliciously exploited to violate the privacy of people. In most attack scenarios, the adversary takes the local or remote control of the mobile device, by leveraging a vulnerability of the system, hence sending back the collected information to some remote web service. In this paper, we consider a different adversary, who does not interact actively with the mobile device, but he is able to eavesdrop the network traffic of the device from the network side (e.g., controlling a Wi-Fi access point). The fact that the network traffic is often encrypted makes the attack even more challenging. In this paper, we investigate to what extent such an external attacker can identify the specific actions that a user is performing on her mobile apps. We design a system that achieves this goal using advanced machine learning techniques. We built a complete implementation of this system, and we also run a thorough set of experiments, which show that our attack can achieve accuracy and precision higher than 95%, for most of the considered actions. We compared our solution with the three state-of-the-art algorithms, and confirming that our system outperforms all these direct competitors.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2015.2478741",
      "Funding Information": "TENACE PRIN Project through the Italian Ministry of Education, University and Research(grant numbers:20103P34XC); European Commission Directorate General Home Affairs through the GAINS Project(grant numbers:HOME/2013/CIPS/AG/4000005057); European Commission through the H2020 SUNFISH Project(grant numbers:644666); EU-India REACH Project(grant numbers:ICI+/2014/342-896); Project entitled Tackling Mobile Malware with Innovative Machine Learning Techniques through the University of Padua; Marie Curie Fellowship through the European Commission(grant numbers:PCIG11-GA-2012-321980); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7265055",
      "Author Keywords": "Cellular phones;information security;privacy",
      "IEEE Terms": "Time series analysis;Cryptography;Privacy;IP networks;Mobile handsets;Machine learning algorithms;Mobile communication",
      "Mesh_Terms": "",
      "Article Citation Count": 191,
      "Patent Citation Count": null,
      "Reference Count": 43,
      "License": "IEEE",
      "Online Date": "14-Sep-15",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Self-Adaptive Bell‚ÄìLaPadula Model Based on Model Training With Historical Access Logs",
      "Authors": "Z. Tang; X. Ding; Y. Zhong; L. Yang; K. Li",
      "Author Affiliations": "National Supercomputing Center in Changsha, Hunan University, Changsha, China; National Supercomputing Center in Changsha, Hunan University, Changsha, China; National Supercomputing Center in Changsha, Hunan University, Changsha, China; College of Computer and Communication Engineering, Changsha University of Science and Technology, Hunan, China; National Supercomputing Center in Changsha, Hunan University, Changsha, China",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "16-Apr-18",
      "Publication Year": 2018,
      "Volume": 13,
      "Issue": 8,
      "Start Page": 2047,
      "End Page": 2061,
      "Abstract": "In currently popular access control models, the security policies and regulations never change in the running system process once they are identified, which makes it possible for attackers to find the vulnerabilities in a system, resulting in the lack of ability to perceive the system security status and risks in a dynamic manner and exposing the system to such risks. By introducing the maximum entropy (MaxENT) models into the rule optimization for the Bell-LaPadula (BLP) model, this paper proposes an improved BLP model with the self-learning function: MaxENT-BLP. This model first formalizes the security properties, system states, transformational rules, and a constraint model based on the states transition of the MaxENT. After handling the historical system access logs as the original data sets, this model extracts the user requests, current states, and decisions to act as the feature vectors. Second, we use k -fold cross validation to divide all vectors into a training set and a testing set. In this paper, the model training process is based on the Broyden-Fletcher-Goldfarb-Shanno algorithm. And this model contains a strategy update algorithm to adjust the access control rules dynamically according to the access and decision records in a system. Third, we prove that MaxENT-BLP is secure through theoretical analysis. By estimating the precision, recall, and F1-score, the experiments show the availability and accuracy of this model. Finally, this paper provides the process of model training based on deep learning and discussions regarding adversarial samples from the malware classifiers. We demonstrate that MaxENT-BLP is an appropriate choice and has the ability to help running information systems to avoid more risks and losses.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2018.2807793",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:61572176,L1624040); National Key Research and Development Program of China(grant numbers:2017YFB0202201); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8295130",
      "Author Keywords": "Adversarial sample;BLP;machine learning;mandatory access control;maximum entropy model;rule optimization",
      "IEEE Terms": "Hidden Markov models;Training;Access control;Data models;Feature extraction;Machine learning",
      "Mesh_Terms": "",
      "Article Citation Count": 18,
      "Patent Citation Count": null,
      "Reference Count": 37,
      "License": "IEEE",
      "Online Date": "19-Feb-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Fingerprinting the Fingerprinters: Learning to Detect Browser Fingerprinting Behaviors",
      "Authors": "U. Iqbal; S. Englehardt; Z. Shafiq",
      "Author Affiliations": "The University of Iowa; Mozilla Corporation; University of California, Davis",
      "Publication Title": "2021 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "26-Aug-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 1143,
      "End Page": 1161,
      "Abstract": "Browser fingerprinting is an invasive and opaque stateless tracking technique. Browser vendors, academics, and standards bodies have long struggled to provide meaningful protections against browser fingerprinting that are both accurate and do not degrade user experience. We propose FP-Inspector, a machine learning based syntactic-semantic approach to accurately detect browser fingerprinting. We show that FP-Inspector performs well, allowing us to detect 26% more fingerprinting scripts than the state-of-the-art. We show that an API-level fingerprinting countermeasure, built upon FP-Inspector, helps reduce website breakage by a factor of 2. We use FP-Inspector to perform a measurement study of browser fingerprinting on top-100K websites. We find that browser fingerprinting is now present on more than 10% of the top-100K websites and over a quarter of the top-10K websites. We also discover previously unreported uses of JavaScript APIs by fingerprinting scripts suggesting that they are looking to exploit APIs in new and unexpected ways.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-7281-8934-5",
      "DOI": "10.1109/SP40001.2021.00017",
      "Funding Information": "National Science Foundation; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9519502",
      "Author Keywords": "fingerprinting;tracking;machine-learning",
      "IEEE Terms": "Privacy;Virtual assistants;Standards organizations;Computer bugs;Prototypes;Machine learning;Fingerprint recognition",
      "Mesh_Terms": "",
      "Article Citation Count": 29,
      "Patent Citation Count": null,
      "Reference Count": 96,
      "License": "IEEE",
      "Online Date": "26-Aug-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Dynamically Generate Password Policy via Zipf Distribution",
      "Authors": "Y. Xiao; J. Zeng",
      "Author Affiliations": "School of Computer Science, Fudan University, Shanghai, China; School of Computer Science, Fudan University, Shanghai, China",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "3-Mar-22",
      "Publication Year": 2022,
      "Volume": 17,
      "Issue": null,
      "Start Page": 835,
      "End Page": 848,
      "Abstract": "Password composition policies are helpful in strengthening password‚Äôs resistance against guessing attacks. Sadly, existing off-the-shelf composition policies often remain static, which creates potential security vulnerability. In this paper, we propose a new adaptive password policy generation framework called HTPG. Based on the Zipf distribution of passwords, HTPG classifies all passwords in data set into two categories, that is, head passwords and tail passwords. We find that head passwords are vulnerable and high-value for attackers because they are most frequently used, while tail passwords have higher strength than head passwords. According to this fact, HTPG dynamically generates policies to enhance head passwords by modifying them so as to be closer to tail passwords on feature space. By introducing the idea of machine learning, we propose a policy sort method based on information gain ratio to help user choose more effective policies in enhancing head passwords. HTPG can effectively improve the security of entire password data set and make the password distribution more uniform. Experiments show that the number of cracked head passwords decreases 69% on average, compared with the original head passwords, by adopting policies generated by HTPG. Surveys on usability show that 80.23% enhanced passwords can be recalled by those who remember the corresponding original passwords.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2022.3152357",
      "Funding Information": "Shanghai Municipal Natural Science Foundation(grant numbers:151403700); Joint Foundation for Industry and Education, Ministry of Education, China(grant numbers:2017A03021); National Key Research and Development Program of China(grant numbers:20170803203); National Key Research and Development Program of China(grant numbers:20160800101); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9715109",
      "Author Keywords": "Authentication;Zipf distribution;machine learning;password policy",
      "IEEE Terms": "Passwords;Magnetic heads;Security;Usability;Machine learning;Generators;Blocklists",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 37,
      "License": "IEEE",
      "Online Date": "16-Feb-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Machine-Learning Attacks on PolyPUFs, OB-PUFs, RPUFs, LHS-PUFs, and PUF‚ÄìFSMs",
      "Authors": "J. Delvaux",
      "Author Affiliations": "imec-COSIC, KU Leuven, Leuven, Belgium",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "8-May-19",
      "Publication Year": 2019,
      "Volume": 14,
      "Issue": 8,
      "Start Page": 2043,
      "End Page": 2058,
      "Abstract": "A physically unclonable function (PUF) is a circuit of which the input-output behavior is designed to be sensitive to the random variations of its manufacturing process. This building block hence facilitates the authentication of any given device in a population of identically laid-out silicon chips, similar to the biometric authentication of a human. The focus and novelty of this paper is the development of efficient impersonation attacks on the following five Arbiter PUF-based authentication protocols: 1) the so-called Poly PUF protocol of Konigsmark et al. as published in the IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems in 2016; 2) the so-called OB-PUF protocol of Gao et al. as presented at the IEEE Conference PerCom 2016; 3) the so-called RPUF protocol of Ye et al. as presented at the IEEE Conference AsianHOST 2016; 4) the so-called LHS-PUF protocol of Idriss and Bayoumi as presented at the IEEE Conference RFID-TA 2017; and 5) the so-called PUF-FSM protocol of Gao et al. as published in the IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems in 2018. The common flaw of all five designs is that the use of lightweight obfuscation logic provides insufficient protection against machine-learning attacks.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2019.2891223",
      "Funding Information": "KU Leuven(grant numbers:C16/15/058); European Research Council (ERC)(grant numbers:695305); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8603753",
      "Author Keywords": "Physically unclonable function;machine learning;entity authentication",
      "IEEE Terms": "Protocols;Machine learning;Authentication;Delays;Tin;Sociology;Statistics",
      "Mesh_Terms": "",
      "Article Citation Count": 114,
      "Patent Citation Count": null,
      "Reference Count": 38,
      "License": "IEEE",
      "Online Date": "6-Jan-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Natural Language Processing Approach for Instruction Set Architecture Identification",
      "Authors": "D. Sahabandu; J. S. Mertoguno; R. Poovendran",
      "Author Affiliations": "Department of Electrical and Computer Engineering, Network Security Laboratory, University of Washington, Seattle, WA, USA; Institute for Information Security and Privacy, Georgia Institute of Technology, Atlanta, GA, USA; Department of Electrical and Computer Engineering, Network Security Laboratory, University of Washington, Seattle, WA, USA",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "20-Jul-23",
      "Publication Year": 2023,
      "Volume": 18,
      "Issue": null,
      "Start Page": 4086,
      "End Page": 4099,
      "Abstract": "Binary analysis of software is a critical step in cyber forensics applications such as program vulnerability assessment and malware detection. This involves interpreting instructions executed by software and often necessitates converting the software‚Äôs binary file data to assembly language. The conversion process requires information about the binary file‚Äôs target instruction set architecture (ISA). However, ISA information might not be included in binary files due to compilation errors, partial downloads, or adversarial corruption of file metadata. Machine learning (ML) is a promising methodology that can be used to identify the target ISA using binary data in the object code section of binary files. In this paper we propose a binary code feature extraction model to improve the accuracy and scalability of ML-based ISA identification methods. Our feature extraction model can be used in the absence of domain knowledge about the ISAs. Specifically, we adapt models from natural language processing (NLP) to i) identify successive byte patterns commonly observed in binary codes, ii) estimate the significance of each byte pattern to a binary file, and iii) estimate the relevance of each byte pattern in distinguishing between ISAs. We introduce character-level features of encoded binaries to identify fine-grained bit patterns inherent to each ISA. We evaluate our approach using two different datasets: binaries from 12 ISAs and 23 ISAs. Empirical evaluations show that using our byte-level features in ML-based ISA identification results in ~98% accuracy compared to the ~91% accuracy of state-of-the-art features based on byte-histograms and byte pattern signatures. We observe that character-level features allow reducing the size of the feature set by up to 16x while maintaining accuracy of ISA identification above 97%.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2023.3288456",
      "Funding Information": "ONR(grant numbers:N00014-20-1-2636,N00014-23-1-2386); DARPA SSITH(grant numbers:D22AC00123-00); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10159173",
      "Author Keywords": "Computer architecture;natural language processing(NLP);machine learning (ML)",
      "IEEE Terms": "Feature extraction;Codes;Natural language processing;Computer architecture;Source coding;Registers;Reduced instruction set computing",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 61,
      "License": "IEEE",
      "Online Date": "21-Jun-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Evaluating Adversarial Evasion Attacks in the Context of Wireless Communications",
      "Authors": "B. Flowers; R. M. Buehrer; W. C. Headley",
      "Author Affiliations": "Bradley Department of Electrical and Computer Engineering, Virginia Tech, Blacksburg, USA; Bradley Department of Electrical and Computer Engineering, Virginia Tech, Blacksburg, USA; Bradley Department of Electrical and Computer Engineering, Virginia Tech, Blacksburg, USA",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "5-Dec-19",
      "Publication Year": 2020,
      "Volume": 15,
      "Issue": null,
      "Start Page": 1102,
      "End Page": 1113,
      "Abstract": "Recent advancements in radio frequency machine learning (RFML) have demonstrated the use of raw in-phase and quadrature (IQ) samples for multiple spectrum sensing tasks. Yet, deep learning techniques have been shown, in other applications, to be vulnerable to adversarial machine learning (ML) techniques, which seek to craft small perturbations that are added to the input to cause a misclassification. The current work differentiates the threats that adversarial ML poses to RFML systems based on where the attack is executed from: direct access to classifier input, synchronously transmitted over the air (OTA), or asynchronously transmitted from a separate device. Additionally, the current work develops a methodology for evaluating adversarial success in the context of wireless communications, where the primary metric of interest is bit error rate and not human perception, as is the case in image recognition. The methodology is demonstrated using the well known Fast Gradient Sign Method to evaluate the vulnerabilities of raw IQ based Automatic Modulation Classification and concludes RFML is vulnerable to adversarial examples, even in OTA attacks. However, RFML domain specific receiver effects, which would be encountered in an OTA attack, can present significant impairments to adversarial evasion.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2019.2934069",
      "Funding Information": "Bradley Masters Fellowship through the Bradley Department of Electrical and Computer Engineering at Virginia Tech; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8792120",
      "Author Keywords": "Cognitive radio security;machine learning;modulation classification",
      "IEEE Terms": "Perturbation methods;Receivers;Transmitters;Wireless communication;Modulation",
      "Mesh_Terms": "",
      "Article Citation Count": 77,
      "Patent Citation Count": null,
      "Reference Count": 34,
      "License": "IEEE",
      "Online Date": "8-Aug-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "High Intrinsic Dimensionality Facilitates Adversarial Attack: Theoretical Evidence",
      "Authors": "L. Amsaleg; J. Bailey; A. Barbe; S. M. Erfani; T. Furon; M. E. Houle; M. Radovanoviƒá; X. V. Nguyen",
      "Author Affiliations": "Inria, CNRS, IRISA, Campus de Beaulieu, Univ Rennes, Rennes, France; School of Computing and Information Systems, The University of Melbourne, Parkville, VIC, Australia; Laboratoire de Physique, √âcole Normale Sup√©rieure de Lyon, Lyon, France; School of Computing and Information Systems, The University of Melbourne, Parkville, VIC, Australia; Inria, CNRS, IRISA, Campus de Beaulieu, Univ Rennes, Rennes, France; National Institute of Informatics, Tokyo, Japan; Faculty of Sciences, University of Novi Sad, Novi Sad, Serbia; NVIDIA Corporation, Santa Clara, CA, USA",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "7-Oct-20",
      "Publication Year": 2021,
      "Volume": 16,
      "Issue": null,
      "Start Page": 854,
      "End Page": 865,
      "Abstract": "Machine learning systems are vulnerable to adversarial attack. By applying to the input object a small, carefully-designed perturbation, a classifier can be tricked into making an incorrect prediction. This phenomenon has drawn wide interest, with many attempts made to explain it. However, a complete understanding is yet to emerge. In this paper we adopt a slightly different perspective, still relevant to classification. We consider retrieval, where the output is a set of objects most similar to a user-supplied query object, corresponding to the set of k-nearest neighbors. We investigate the effect of adversarial perturbation on the ranking of objects with respect to a query. Through theoretical analysis, supported by experiments, we demonstrate that as the intrinsic dimensionality of the data domain rises, the amount of perturbation required to subvert neighborhood rankings diminishes, and the vulnerability to adversarial attack rises. We examine two modes of perturbation of the query: either `closer' to the target point, or `farther' from it. We also consider two perspectives: `query-centric', examining the effect of perturbation on the query's own neighborhood ranking, and `target-centric', considering the ranking of the query point in the target's neighborhood set. All four cases correspond to practical scenarios involving classification and retrieval.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2020.3023274",
      "Funding Information": "European(grant numbers:CHIST-ERA ID_IOT); Australian Research Council(grant numbers:DP140101969); ANR-AID Chaire SAIDA; JSPS Kakenhi Kiban (B) Research(grant numbers:18H03296); Serbian National Project(grant numbers:OI174023); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9194069",
      "Author Keywords": "Adversarial attack;intrinsic dimensionality;nearest neighbor",
      "IEEE Terms": "Perturbation methods;Feature extraction;Machine learning;Neural networks;Databases;Content-based retrieval;Learning systems",
      "Mesh_Terms": "",
      "Article Citation Count": 15,
      "Patent Citation Count": null,
      "Reference Count": 51,
      "License": "IEEE",
      "Online Date": "10-Sep-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Large-Scale Empirical Study of Important Features Indicative of Discovered Vulnerabilities to Assess Application Security",
      "Authors": "M. Zhang; X. de Carn√© de Carnavalet; L. Wang; A. Ragab",
      "Author Affiliations": "Concordia Institute for Information Systems Engineering, Concordia University, Montreal, QC, Canada; Concordia Institute for Information Systems Engineering, Concordia University, Montreal, QC, Canada; Concordia Institute for Information Systems Engineering, Concordia University, Montreal, QC, Canada; Department of Industrial Electronics and Control Engineering, Menoufia University, Menouf, Egypt",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "24-May-19",
      "Publication Year": 2019,
      "Volume": 14,
      "Issue": 9,
      "Start Page": 2315,
      "End Page": 2330,
      "Abstract": "Existing research on vulnerability discovery models shows that the existence of vulnerabilities inside an application may be linked to certain features, e.g., size or complexity, of that application. However, the applicability of such features to demonstrate the relative security between two applications is not well studied, which may depend on multiple factors in a complex way. In this paper, we perform the first large-scale empirical study of the correlation between various features of applications and the abundance of vulnerabilities. Unlike existing work, which typically focuses on one particular application, resulting in limited successes, we focus on the more realistic issue of assessing the relative security level among different applications. To the best of our knowledge, this is the most comprehensive study of 780 real-world applications involving 6498 vulnerabilities. We apply seven feature selection methods to nine feature subsets selected among 34 collected features, which are then fed into six types of machine learning models, producing 523 estimations. The predictive power of important features is evaluated using four different performance measures. This paper reflects that the complexity of applications is not the only factor in vulnerability discovery and the human-related factors contribute to explaining the number of discovered vulnerabilities in an application.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2019.2895963",
      "Funding Information": "Natural Sciences and Engineering Research Council of Canada(grant numbers:N01035); Vanier Canada Graduate Scholarship; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8629314",
      "Author Keywords": "Software vulnerability analysis;vulnerability discovery model;software security;machine learning",
      "IEEE Terms": "Feature extraction;Correlation;Measurement;Complexity theory;Software;Predictive models;Security",
      "Mesh_Terms": "",
      "Article Citation Count": 23,
      "Patent Citation Count": null,
      "Reference Count": 49,
      "License": "IEEE",
      "Online Date": "29-Jan-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Learning from Mutants: Using Code Mutation to Learn and Monitor Invariants of a Cyber-Physical System",
      "Authors": "Y. Chen; C. M. Poskitt; J. Sun",
      "Author Affiliations": "Singapore University of Technology and Design, Singapore, Singapore; Singapore University of Technology and Design, Singapore, Singapore; Singapore University of Technology and Design, Singapore, Singapore",
      "Publication Title": "2018 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "26-Jul-18",
      "Publication Year": 2018,
      "Volume": null,
      "Issue": null,
      "Start Page": 648,
      "End Page": 660,
      "Abstract": "Cyber-physical systems (CPS) consist of sensors, actuators, and controllers all communicating over a network; if any subset becomes compromised, an attacker could cause significant damage. With access to data logs and a model of the CPS, the physical effects of an attack could potentially be detected before any damage is done. Manually building a model that is accurate enough in practice, however, is extremely difficult. In this paper, we propose a novel approach for constructing models of CPS automatically, by applying supervised machine learning to data traces obtained after systematically seeding their software components with faults (\"mutants\"). We demonstrate the efficacy of this approach on the simulator of a real-world water purification plant, presenting a framework that automatically generates mutants, collects data traces, and learns an SVM-based model. Using cross-validation and statistical model checking, we show that the learnt model characterises an invariant physical property of the system. Furthermore, we demonstrate the usefulness of the invariant by subjecting the system to 55 network and code-modification attacks, and showing that it can detect 85% of them from the data logs generated at runtime.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-5386-4353-2",
      "DOI": "10.1109/SP.2018.00016",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8418629",
      "Author Keywords": "cyber physical systems;water treatment systems;invariants;anomaly detection;attestation;system modelling;machine learning;mutation testing;attacks",
      "IEEE Terms": "Sensors;Software;Actuators;Data models;Feature extraction;Monitoring;Model checking",
      "Mesh_Terms": "",
      "Article Citation Count": 86,
      "Patent Citation Count": null,
      "Reference Count": 48,
      "License": "IEEE",
      "Online Date": "26-Jul-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Poltergeist: Acoustic Adversarial Machine Learning against Cameras and Computer Vision",
      "Authors": "X. Ji; Y. Cheng; Y. Zhang; K. Wang; C. Yan; W. Xu; K. Fu",
      "Author Affiliations": "Ubiquitous System Security Lab (USSLAB), Zhejiang University; Ubiquitous System Security Lab (USSLAB), Zhejiang University; Ubiquitous System Security Lab (USSLAB), Zhejiang University; Ubiquitous System Security Lab (USSLAB), Zhejiang University; Ubiquitous System Security Lab (USSLAB), Zhejiang University; Ubiquitous System Security Lab (USSLAB), Zhejiang University; Security and Privacy Research Group (SPQR), University of Michigan",
      "Publication Title": "2021 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "26-Aug-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 160,
      "End Page": 175,
      "Abstract": "Autonomous vehicles increasingly exploit computer-vision-based object detection systems to perceive environments and make critical driving decisions. To increase the quality of images, image stabilizers with inertial sensors are added to alleviate image blurring caused by camera jitters. However, such a trend opens a new attack surface. This paper identifies a system-level vulnerability resulting from the combination of the emerging image stabilizer hardware susceptible to acoustic manipulation and the object detection algorithms subject to adversarial examples. By emitting deliberately designed acoustic signals, an adversary can control the output of an inertial sensor, which triggers unnecessary motion compensation and results in a blurred image, even if the camera is stable. The blurred images can then induce object misclassification affecting safety-critical decision making. We model the feasibility of such acoustic manipulation and design an attack framework that can accomplish three types of attacks, i.e., hiding, creating, and altering objects. Evaluation results demonstrate the effectiveness of our attacks against four academic object detectors (YOLO V3/V4/V5 and Fast R-CNN), and one commercial detector (Apollo). We further introduce the concept of AMpLe attacks, a new class of system-level security vulnerabilities resulting from a combination of adversarial machine learning and physics-based injection of information-carrying signals into hardware.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-7281-8934-5",
      "DOI": "10.1109/SP40001.2021.00091",
      "Funding Information": "Analog Devices; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9519394",
      "Author Keywords": "",
      "IEEE Terms": "Computer vision;Inertial sensors;Object detection;Detectors;Cameras;Acoustics;Hardware",
      "Mesh_Terms": "",
      "Article Citation Count": 14,
      "Patent Citation Count": null,
      "Reference Count": 59,
      "License": "IEEE",
      "Online Date": "26-Aug-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Homogeneous and Heterogeneous Feed-Forward XOR Physical Unclonable Functions",
      "Authors": "S. V. S. Avvaru; Z. Zeng; K. K. Parhi",
      "Author Affiliations": "Department of Electrical and Computer Engineering, University of Minnesota, Minneapolis, USA; Department of Electrical and Computer Engineering, University of Minnesota, Minneapolis, USA; Department of Electrical and Computer Engineering, University of Minnesota, Minneapolis, USA",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "7-Feb-20",
      "Publication Year": 2020,
      "Volume": 15,
      "Issue": null,
      "Start Page": 2485,
      "End Page": 2498,
      "Abstract": "Physical unclonable functions (PUFs) are hardware security primitives that are used for device authentication and cryptographic key generation. Standard XOR PUFs typically contain multiple standard arbiter PUFs as components, and are more secure than standard arbiter PUFs or feed-forward (FF) arbiter PUFs (FF PUFs). This paper proposes design of feed-forward XOR PUFs (FFXOR PUFs) where each component PUF is a FF PUF. Various homogeneous and heterogeneous FFXOR PUFs are presented and evaluated in terms of four fundamental properties of PUFs: uniqueness, attack-resistance, reliability and randomness. Certain key issues pertaining to XOR PUFs such as their vulnerability to machine learning attacks and instability in responses are investigated. Other important challenges like the lack of uniqueness in FF PUFs and the asymmetry in FPGA arbiter PUFs are addressed and it is shown that FFXOR PUFs can naturally overcome these problems. It is shown that heterogeneous FFXOR PUFs (i.e., FFXOR PUFs with non-identical components) can be resilient to state-of-the-art machine learning attacks. We also present systematic reliability analysis of FFXOR PUFs and demonstrate that soft-response thresholding can be used as an effective countermeasure to overcome the degraded reliability bottleneck. Observations from simulations are further verified through hardware implementation of 64-bit FFXOR PUFs on Xilinx Artix-7 FPGA.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2020.2968113",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8963980",
      "Author Keywords": "Hardware security;arbiter PUF;feed-forward PUF;XOR PUF;FPGA PUF;FFXOR PUFs;homogeneous;heterogeneous;reliability;uniqueness;security;attack-resistance;randomness",
      "IEEE Terms": "Reliability;Standards;Delays;Field programmable gate arrays;Physical unclonable function;Machine learning",
      "Mesh_Terms": "",
      "Article Citation Count": 51,
      "Patent Citation Count": null,
      "Reference Count": 53,
      "License": "IEEE",
      "Online Date": "20-Jan-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Debiasing Android Malware Datasets: How Can I Trust Your Results If Your Dataset Is Biased?",
      "Authors": "T. C. Miranda; P. -F. Gimenez; J. -F. Lalande; V. V. T. Tong; P. Wilke",
      "Author Affiliations": "CentraleSup√©lec, Inria, CNRS, University of Rennes 1, IRISA, Rennes, France; CentraleSup√©lec, Inria, CNRS, University of Rennes 1, IRISA, Rennes, France; CentraleSup√©lec, Inria, CNRS, University of Rennes 1, IRISA, Rennes, France; CentraleSup√©lec, Inria, CNRS, University of Rennes 1, IRISA, Rennes, France; CentraleSup√©lec, Inria, CNRS, University of Rennes 1, IRISA, Rennes, France",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "17-Jun-22",
      "Publication Year": 2022,
      "Volume": 17,
      "Issue": null,
      "Start Page": 2182,
      "End Page": 2197,
      "Abstract": "Android security has received a lot of attention over the last decade, especially malware investigation. Researchers attempt to highlight applications‚Äô security-relevant characteristics to better understand malware and effectively distinguish malware from benign applications. The accuracy and the completeness of their proposals are evaluated experimentally on malware and goodware datasets. Thus, the quality of these datasets is of critical importance: if the datasets are outdated or not representative of the studied population, the conclusions may be flawed. We specify different types of experimental scenarios. Some of them require unlabeled but representative datasets of the entire population. Others require datasets labeled with valuable characteristics that may be difficult to compute, such as malware datasets. We discuss the irregularities of datasets used in experiments, questioning the validity of the performances reported in the literature. This article focuses on providing guidelines for designing debiased datasets. First, we propose guidelines for building representative datasets from unlabeled ones. Second, we propose and experiment a debiasing algorithm that, given a biased labeled dataset and a target representative dataset, builds a representative and labeled dataset. Finally, from the previous debiased datasets, we produce datasets for experiments on Android malware detection or classification with machine learning algorithms. Experiments show that debiased datasets perform better when classifying with machine learning algorithms.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2022.3180184",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9787514",
      "Author Keywords": "Datasets;malware;experiments",
      "IEEE Terms": "Malware;Statistics;Sociology;Machine learning algorithms;Classification algorithms;Training;Security",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 81,
      "License": "CCBY",
      "Online Date": "3-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "2PCLA: Provable Secure and Privacy Preserving Enhanced Certificateless Authentication Scheme for Distributed Learning",
      "Authors": "Y. Ma; Q. Cheng; X. Luo",
      "Author Affiliations": "Fourth Department, Information Engineering University, Zhengzhou, China; Fourth Department, Information Engineering University, Zhengzhou, China; Henan Province Key Laboratory of Cyberspace Situation Awareness, Zhengzhou, China",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "9-Oct-23",
      "Publication Year": 2023,
      "Volume": 18,
      "Issue": null,
      "Start Page": 5876,
      "End Page": 5889,
      "Abstract": "Distributed learning (DL) emerges as machine learning and the Internet of Things develop quickly and widely. As edge servers pre-process and pre-learn the statistics, global servers can reduce costs, improve efficiency and output more precise results. However, to acquire high-quality and adequate data, servers should collect information from a number of end devices, which naturally leads to confidentiality and privacy problems during information transmission. If the private information or the data are compromised by malicious attackers, the users‚Äô security and the network operation will all be in danger. To resolve this thorny challenge, numerous schemes have been put forward, adopting different cryptography technologies and aiming at aspects of security. However, many state-of-the-art schemes can hardly satisfy the security demands and are pointed out to be defective. Lately, Jiang et al. made an effort and proposed a certificateless signature scheme, as well as an authentication scheme for the purpose of solving the privacy issues. Unfortunately, in this paper, we point out that their schemes can hardly resist forgery attacks and ephemeral key leakage attacks. Further, we will propose an improved scheme noted as 2PCLA and change the method of generating the session key. Theoretical analysis and formal security analysis utilizing Tamarin analysis tool are provided to prove the security of 2PCLA scheme. Performance evaluation has been done from both theoretical and experimental perspectives. The assessment results illustrate that 2PCLA can balance security properties with execution efficiency relatively well.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2023.3318952",
      "Funding Information": "National Key Research and Development Program of China(grant numbers:2022YFB3102900); National Natural Science Foundation of China(grant numbers:61872449,62172433,62172435); Science Foundation for the Excellent Youth Scholars of Henan Province(grant numbers:222300420099); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10262019",
      "Author Keywords": "Distributed learning (DL);certificateless-based cryptography;privacy preservation;authentication",
      "IEEE Terms": "Security;Servers;Authentication;Privacy;Protocols;Machine learning;Immune system",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 26,
      "License": "IEEE",
      "Online Date": "25-Sep-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Understanding the Manipulation on Recommender Systems through Web Injection",
      "Authors": "Y. Zhang; J. Xiao; S. Hao; H. Wang; S. Zhu; S. Jajodia",
      "Author Affiliations": "Department of Electrical and Computer Engineering, University of Delaware, Newark, USA; Department of Computer Science, Boise State University, Boise, USA; Department of Computer Science, Old Dominion University, Norfolk, USA; Department of Electrical and Computer Engineering, Virginia Tech, Arlington, USA; Department of Computer Science and Engineering, Penn State University, University Park, USA; Center for Secure Information Systems, George Mason University, Fairfax, USA",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "16-Jul-20",
      "Publication Year": 2020,
      "Volume": 15,
      "Issue": null,
      "Start Page": 3807,
      "End Page": 3818,
      "Abstract": "Recommender systems have been increasingly used in a variety of web services, providing a list of recommended items in which a user may have an interest. While important, recommender systems are vulnerable to various malicious attacks. In this paper, we study a new security vulnerability in recommender systems caused by web injection, through which malicious actors stealthily tamper any unprotected in-transit HTTP webpage content and force victims to visit specific items in some web services (even running HTTPS), e.g., YouTube. By doing so, malicious actors can promote their targeted items in those web services. To obtain a deeper understanding on the recommender systems of our interest (including YouTube, Yelp, Taobao, and 360 App market), we first conduct a measurement-based analysis on several real-world recommender systems by leveraging machine learning algorithms. Then, web injection is implemented in three different types of devices (i.e., computer, router, and proxy server) to investigate the scenarios where web injection could occur. Based on the implementation of web injection, we demonstrate that it is feasible and sometimes effective to manipulate the real-world recommender systems through web injection. We also present several countermeasures against such manipulations.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2019.2954737",
      "Funding Information": "Army Research Office(grant numbers:W911NF-13-1-0421,W911NF-19-1-0049); National Science Foundation(grant numbers:CNS-1618117,CNS-1822094); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8907865",
      "Author Keywords": "Recommender systems;recommendation manipulation;web injection",
      "IEEE Terms": "Recommender systems;YouTube;Web services;Browsers;Pollution;Videos;History",
      "Mesh_Terms": "",
      "Article Citation Count": 7,
      "Patent Citation Count": null,
      "Reference Count": 40,
      "License": "IEEE",
      "Online Date": "20-Nov-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Optimal Adversarial Policies in the Multiplicative Learning System With a Malicious Expert",
      "Authors": "S. R. Etesami; N. Kiyavash; V. Leon; H. V. Poor",
      "Author Affiliations": "Department of Industrial and Enterprise Systems Engineering, University of Illinois at Urbana‚ÄìChampaign, Urbana, IL, USA; College of Management of Technology, EPFL, Lausanne, Switzerland; Department of Industrial and Enterprise Systems Engineering, University of Illinois at Urbana‚ÄìChampaign, Urbana, IL, USA; Department of Electrical Engineering, Princeton University, Princeton, NJ, USA",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "10-Feb-21",
      "Publication Year": 2021,
      "Volume": 16,
      "Issue": null,
      "Start Page": 2276,
      "End Page": 2287,
      "Abstract": "We consider a learning system based on the conventional multiplicative weight (MW) rule that combines experts' advice to predict a sequence of true outcomes. It is assumed that one of the experts is malicious and aims to impose the maximum loss on the system. The system's loss is naturally defined to be the aggregate absolute difference between the sequence of predicted outcomes and the true outcomes. We consider this problem under both offline and online settings. In the offline setting where the malicious expert must choose its entire sequence of decisions a priori, we show somewhat surprisingly that a simple greedy policy of always reporting false prediction is asymptotically optimal with an approximation ratio of 1+O‚àö(ln N)/N, where N is the total number of prediction stages. In particular, we describe a policy that closely resembles the structure of the optimal offline policy. For the online setting where the malicious expert can adaptively make its decisions, we show that the optimal online policy can be efficiently computed by solving a dynamic program in O(N3). We also discuss a generalization of our model to multi-expert settings. Our results provide a new direction for vulnerability assessment of commonly-used learning algorithms to internal adversarial attacks.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2021.3052360",
      "Funding Information": "U.S. National Science Foundation(grant numbers:EPCN-1944403,CCF-1908308); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9328196",
      "Author Keywords": "Adversarial learning;expert advice;Markov decision process;dynamic programming;approximation ratio",
      "IEEE Terms": "Learning systems;Prediction algorithms;Machine learning algorithms;Motion pictures;Approximation algorithms;Analytical models;Training",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 23,
      "License": "IEEE",
      "Online Date": "18-Jan-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "NEUZZ: Efficient Fuzzing with Neural Program Smoothing",
      "Authors": "D. She; K. Pei; D. Epstein; J. Yang; B. Ray; S. Jana",
      "Author Affiliations": "Columbia University; Columbia University; Columbia University; Columbia University; Columbia University; Columbia University",
      "Publication Title": "2019 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "16-Sep-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 803,
      "End Page": 817,
      "Abstract": "Fuzzing has become the de facto standard technique for finding software vulnerabilities. However, even state-of-the-art fuzzers are not very efficient at finding hard-to-trigger software bugs. Most popular fuzzers use evolutionary guidance to generate inputs that can trigger different bugs. Such evolutionary algorithms, while fast and simple to implement, often get stuck in fruitless sequences of random mutations. Gradient-guided optimization presents a promising alternative to evolutionary guidance. Gradient-guided techniques have been shown to significantly outperform evolutionary algorithms at solving high-dimensional structured optimization problems in domains like machine learning by efficiently utilizing gradients or higher-order derivatives of the underlying function. However, gradient-guided approaches are not directly applicable to fuzzing as real-world program behaviors contain many discontinuities, plateaus, and ridges where the gradient-based methods often get stuck. We observe that this problem can be addressed by creating a smooth surrogate function approximating the target program's discrete branching behavior. In this paper, we propose a novel program smoothing technique using surrogate neural network models that can incrementally learn smooth approximations of a complex, real-world program's branching behaviors. We further demonstrate that such neural network models can be used together with gradient-guided input generation schemes to significantly increase the efficiency of the fuzzing process. Our extensive evaluations demonstrate that NEUZZ significantly outperforms 10 state-of-the-art graybox fuzzers on 10 popular real-world programs both at finding new bugs and achieving higher edge coverage. NEUZZ found 31 previously unknown bugs (including two CVEs) that other fuzzers failed to find in 10 real-world programs and achieved 3X more edge coverage than all of the tested graybox fuzzers over 24 hour runs. Furthermore, NEUZZ also outperformed existing fuzzers on both LAVA-M and DARPA CGC bug datasets.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-5386-6660-9",
      "DOI": "10.1109/SP.2019.00052",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8835342",
      "Author Keywords": "fuzzing;-neural-program-smoothing;-gradient-guided-mutation",
      "IEEE Terms": "Optimization;Fuzzing;Computer bugs;Artificial neural networks;Smoothing methods;Evolutionary computation",
      "Mesh_Terms": "",
      "Article Citation Count": 70,
      "Patent Citation Count": null,
      "Reference Count": 89,
      "License": "IEEE",
      "Online Date": "16-Sep-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Are We There Yet? Timing and Floating-Point Attacks on Differential Privacy Systems",
      "Authors": "J. Jin; E. McMurtry; B. I. P. Rubinstein; O. Ohrimenko",
      "Author Affiliations": "School of Computing and Information Systems, The University of Melbourne; Department of Computer Science, ETH Zurich; School of Computing and Information Systems, The University of Melbourne; School of Computing and Information Systems, The University of Melbourne",
      "Publication Title": "2022 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "27-Jul-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 473,
      "End Page": 488,
      "Abstract": "Differential privacy is a de facto privacy framework that has seen adoption in practice via a number of mature software platforms. Implementation of differentially private (DP) mechanisms has to be done carefully to ensure end-to-end security guarantees. In this paper we study two implementation flaws in the noise generation commonly used in DP systems. First we examine the Gaussian mechanism‚Äôs susceptibility to a floating-point representation attack. The premise of this first vulnerability is similar to the one carried out by Mironov in 2011 against the Laplace mechanism. Our experiments show the attack‚Äôs success against DP algorithms, including deep learning models trained using differentially-private stochastic gradient descent. In the second part of the paper we study discrete counterparts of the Laplace and Gaussian mechanisms that were previously proposed to alleviate the shortcomings of floating-point representation of real numbers. We show that such implementations unfortunately suffer from another side channel: a novel timing attack. An observer that can measure the time to draw (discrete) Laplace or Gaussian noise can predict the noise magnitude, which can then be used to recover sensitive attributes. This attack invalidates differential privacy guarantees of systems implementing such mechanisms. We demonstrate that several commonly used, state-of-the-art implementations of differential privacy are susceptible to these attacks. We report success rates up to 92.56% for floating point attacks on DP-SGD, and up to 99.65% for end-to-end timing attacks on private sum protected with discrete Laplace. Finally, we evaluate and suggest partial mitigations.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-6654-1316-9",
      "DOI": "10.1109/SP46214.2022.9833672",
      "Funding Information": "University of Melbourne; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9833672",
      "Author Keywords": "Differential-Privacy;Timing-Side-Channel;Floating-Point-Representation;Gaussian-Mechanisms;Laplace-Mechanisms",
      "IEEE Terms": "Differential privacy;Privacy;Sensitivity;Stochastic processes;Observers;Libraries;Timing",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 55,
      "License": "IEEE",
      "Online Date": "27-Jul-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "RoFL: Robustness of Secure Federated Learning",
      "Authors": "H. Lycklama; L. Burkhalter; A. Viand; N. K√ºchler; A. Hithnawi",
      "Author Affiliations": "ETH Zurich; ETH Zurich; ETH Zurich; ETH Zurich; ETH Zurich",
      "Publication Title": "2023 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "21-Jul-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 453,
      "End Page": 476,
      "Abstract": "Even though recent years have seen many attacks exposing severe vulnerabilities in Federated Learning (FL), a holistic understanding of what enables these attacks and how they can be mitigated effectively is still lacking. In this work, we demystify the inner workings of existing (targeted) attacks. We provide new insights into why these attacks are possible and why a definitive solution to FL robustness is challenging. We show that the need for ML algorithms to memorize tail data has significant implications for FL integrity. This phenomenon has largely been studied in the context of privacy; our analysis sheds light on its implications for ML integrity. We show that certain classes of severe attacks can be mitigated effectively by enforcing constraints such as norm bounds on clients‚Äô updates. We investigate how to efficiently incorporate these constraints into secure FL protocols in the single-server setting. Based on this, we propose RoFL, a new secure FL system that extends secure aggregation with privacy-preserving input validation. Specifically, RoFL can enforce constraints such as L2 and L‚àû bounds on high-dimensional encrypted model updates.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-6654-9336-9",
      "DOI": "10.1109/SP46215.2023.10179400",
      "Funding Information": "Semiconductor Research Corporation; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10179400",
      "Author Keywords": "federated-learning;secure-aggregation;privacy-preserving-machine-learning",
      "IEEE Terms": "Privacy;Protocols;Federated learning;Scalability;Aggregates;Bandwidth;Tail",
      "Mesh_Terms": "",
      "Article Citation Count": 6,
      "Patent Citation Count": null,
      "Reference Count": 99,
      "License": "IEEE",
      "Online Date": "21-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Semantic-Aware Adversarial Training for Reliable Deep Hashing Retrieval",
      "Authors": "X. Yuan; Z. Zhang; X. Wang; L. Wu",
      "Author Affiliations": "School of Computer Science and Technology, Harbin Institute of Technology, Shenzhen, China; School of Computer Science and Technology, Harbin Institute of Technology, Shenzhen, China; School of Computer Science and Technology, Harbin Institute of Technology, Shenzhen, China; Department of Computer Science, Swansea University, Swansea, U.K.",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "1-Aug-23",
      "Publication Year": 2023,
      "Volume": 18,
      "Issue": null,
      "Start Page": 4681,
      "End Page": 4694,
      "Abstract": "Deep hashing has been intensively studied and successfully applied in large-scale image retrieval systems due to its efficiency and effectiveness. Recent studies have recognized that the existence of adversarial examples poses a security threat to deep hashing models, that is, adversarial vulnerability. Notably, it is challenging to efficiently distill reliable semantic representatives for deep hashing to guide adversarial learning, and thereby it hinders the enhancement of adversarial robustness of deep hashing-based retrieval models. Moreover, current researches on adversarial training for deep hashing are hard to be formalized into a unified minimax structure. In this paper, we explore Semantic-Aware Adversarial Training (SAAT) for improving the adversarial robustness of deep hashing models. Specifically, we conceive a discriminative mainstay features learning (DMFL) scheme to construct semantic representatives for guiding adversarial learning in deep hashing. Particularly, our DMFL with the strict theoretical guarantee is adaptively optimized in a discriminative learning manner, where both discriminative and semantic properties are jointly considered. Moreover, adversarial examples are fabricated by maximizing the Hamming distance between the hash codes of adversarial samples and mainstay features, the efficacy of which is validated in the adversarial attack trials. Further, we, for the first time, formulate the formalized adversarial training of deep hashing into a unified minimax optimization under the guidance of the generated mainstay codes. Extensive experiments on benchmark datasets show superb attack performance against the state-of-the-art algorithms, meanwhile, the proposed adversarial training can effectively eliminate adversarial perturbations for trustworthy deep hashing-based retrieval. Our code is available at https://github.com/xandery-geek/SAAT.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2023.3297791",
      "Funding Information": "Shenzhen Science and Technology Program(grant numbers:RCYX20221008092852077); National Natural Science Foundation of China(grant numbers:62002085); Basic and Applied Basic Research Foundation of Guangdong Province(grant numbers:2023A1515010057); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10189878",
      "Author Keywords": "Adversarial attack;adversarial training;trustworthy deep hashing;similarity retrieval",
      "IEEE Terms": "Codes;Training;Semantics;Adversarial machine learning;Task analysis;Robustness;Perturbation methods",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 50,
      "License": "IEEE",
      "Online Date": "21-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Credential Usage Study: Flow-Aware Leakage Detection in Open-Source Projects",
      "Authors": "R. Han; H. Gong; S. Ma; J. Li; C. Xu; E. Bertino; S. Nepal; Z. Ma; J. Ma",
      "Author Affiliations": "School of Cyber Engineering, Xidian University, Xi‚Äôan, China; Faculty of Engineering, The University of Sydney, Sydney, NSW, Australia; School of Engineering and Information System, University of New South Wales, Sydney, NSW, Australia; Zhiyuan College, Shanghai Jiao Tong University, Shanghai, China; School of Computer Science, Faculty of Engineering and IT, The University of Sydney, Darlington, NSW, Australia; Department of Computer Science, Purdue University, West Lafayette, IN, USA; Commonwealth Scientific and Industrial Research, Sydney, NSW, Australia; School of Cyber Engineering, Xidian University, Xi‚Äôan, China; School of Cyber Engineering, Xidian University, Xi‚Äôan, China",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "21-Nov-23",
      "Publication Year": 2024,
      "Volume": 19,
      "Issue": null,
      "Start Page": 722,
      "End Page": 734,
      "Abstract": "Authentication and cryptography are critical security functions and, thus, are very often included as part of code. These functions require using credentials, such as passwords, security tokens, and cryptographic keys. However, developers often incorrectly implement/use credentials in their code because of a lack of secure coding skills. This paper analyzes open-source projects concerning the correct use of security credentials. We developed a semantic-rich, language-independent analysis approach for analyzing many projects automatically. We implemented a detection tool, SEAGULL, to automatically check open-source projects based on string literal and code structure information. Instead of analyzing the entire project code, which might result in path explosion when constructing data and control dependencies, SEAGULL pinpoints all literal constants to identify credential candidates and then analyzes the code snippets correlated to these candidates. SEAGULL accurately identifies the leaked credentials by obtaining semantic and syntax information about the code. We applied SEAGULL to 377 open-source projects. SEAGULL successfully reported 19 real-world credential leakages out of those projects. Our analysis shows that some developers protected or erased the credentials in the current project versions, but previously used credentials can still be extracted from the project‚Äôs historical versions. Although the implementations of credential leakages seem to be fixed in the current projects, attackers could successfully log into accounts if developers keep using the same credentials as before. Additionally, we found that such credential leakages still affect some projects. By exploiting leaked credentials, attackers can log into particular accounts.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2023.3326985",
      "Funding Information": "National Natural Science Foundation of China (Key Program)(grant numbers:62232013); Major Research Plan of the National Natural Science Foundation of China(grant numbers:92267204,92167203); Natural Science Basis Research Plan in Shaanxi Province of China(grant numbers:2022JM-338); Fundamental Research Funds for the Central Universities(grant numbers:XJSJ23185); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10292698",
      "Author Keywords": "Credential leakage;bug detection;static code analysis",
      "IEEE Terms": "Codes;Source coding;Passwords;Authentication;Semantics;Java;Machine learning",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 56,
      "License": "IEEE",
      "Online Date": "23-Oct-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Understanding the (In)Security of Cross-side Face Verification Systems in Mobile Apps: A System Perspective",
      "Authors": "X. Zhang; H. Ye; Z. Huang; X. Ye; Y. Cao; Y. Zhang; M. Yang",
      "Author Affiliations": "Fudan University, Shanghai, China; Fudan University, Shanghai, China; Fudan University, Shanghai, China; Fudan University, Shanghai, China; Johns Hopkins University, Baltimore, USA; Fudan University, Shanghai, China; Fudan University, Shanghai, China",
      "Publication Title": "2023 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "21-Jul-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 934,
      "End Page": 950,
      "Abstract": "Face Verification Systems (FVSes) are more and more deployed by real-world mobile applications (apps) to verify a human‚Äôs claimed identity. One popular type of FVSes is called cross-side FVS (XFVS), which splits the FVS functionality into two sides: one at a mobile phone to take pictures or videos and the other at a trusted server for verification. Prior works have studied the security of XFVSes from the machine learning perspective, i.e., whether the learning models used by XFVSes are robust to adversarial attacks. However, the security of other parts of XFVSes, especially the design and implementation of the verification procedure used by XFVSes, is not well understood.In this paper, we conduct the first measurement study on the security of real-world XFVSes used by popular mobile apps from a system perspective. More specifically, we design and implement a semi-automated system, called XFVSChecker, to detect XFVSes in mobile apps and then inspect their compliance with four security properties. Our evaluation reveals that most of existing XFVS apps, including those with billions of downloads, are vulnerable to at least one of four types of attacks. These attacks require only easily available attack prerequisites, such as one photo of the victim, to pose significant security risks, including complete account takeover, identity fraud and financial loss. Our findings result in 14 Chinese National Vulnerability Database (CNVD) IDs and one of them, particularly CNVD-2021-86899, is awarded the most valuable vulnerability in 2021 among all the reported vulnerabilities to CNVD.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-6654-9336-9",
      "DOI": "10.1109/SP46215.2023.10179474",
      "Funding Information": "Research and Development; National Natural Science Foundation of China; Shanghai Rising-Star Program; National Science Foundation; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10179474",
      "Author Keywords": "Mobile-Security;Face-Verification;System-Perspective",
      "IEEE Terms": "Privacy;Machine learning;Mobile applications;Internet;Fraud;Security;Servers",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 87,
      "License": "IEEE",
      "Online Date": "21-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Deep Face Representations for Differential Morphing Attack Detection",
      "Authors": "U. Scherhag; C. Rathgeb; J. Merkle; C. Busch",
      "Author Affiliations": "da/sec‚ÄîBiometrics and Internet Security Research Group, Hochschule Darmstadt, Darmstadt, Germany; da/sec‚ÄîBiometrics and Internet Security Research Group, Hochschule Darmstadt, Darmstadt, Germany; Security Networks AG, Essen, Germany; da/sec‚ÄîBiometrics and Internet Security Research Group, Hochschule Darmstadt, Darmstadt, Germany",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "3-Jul-20",
      "Publication Year": 2020,
      "Volume": 15,
      "Issue": null,
      "Start Page": 3625,
      "End Page": 3639,
      "Abstract": "The vulnerability of facial recognition systems to face morphing attacks is well known. Many different approaches for morphing attack detection (MAD) have been proposed in the scientific literature. However, the MAD algorithms proposed so far have mostly been trained and tested on datasets whose distributions of image characteristics are either very limited (e.g., only created with a single morphing tool) or rather unrealistic (e.g., no print-scan transformation). As a consequence, these methods easily overfit on certain image types and the results presented cannot be expected to apply to real-world scenarios. For example, the results of the latest NIST FRVT MORPH show that the majority of submitted MAD algorithms lacks robustness and performance when considering unseen and challenging datasets. In this work, subsets of the FERET and FRGCv2 face databases are used to create a realistic database for training and testing of MAD algorithms, containing a large number of ICAO-compliant bona fide facial images, corresponding unconstrained probe images, and morphed images created with four different face morphing tools. Furthermore, multiple post-processings are applied on the reference images, e.g., print-scan and JPEG2000 compression. On this database, previously proposed differential morphing algorithms are evaluated and compared. In addition, the application of deep face representations for differential MAD algorithms is investigated. It is shown that algorithms based on deep face representations can achieve very high detection performance (less than 3% D-EER) and robustness with respect to various post-processings. Finally, the limitations of the developed methods are analyzed.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2020.2994750",
      "Funding Information": "German Federal Ministry of Education and Research; Hessen State Ministry for Higher Education, Research and the Arts within their joint support of the ATHENE (National Research Center for Applied Cybersecurity); Federal Office of Information Security (BSI) through the FACETRUST Project; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9093905",
      "Author Keywords": "Biometrics;face recognition;morphing attacks;morphing attack detection;differential attack detection;deep face representation",
      "IEEE Terms": "Face;Databases;Probes;Face recognition;Feature extraction;Neural networks;Forensics",
      "Mesh_Terms": "",
      "Article Citation Count": 75,
      "Patent Citation Count": null,
      "Reference Count": 56,
      "License": "CCBY",
      "Online Date": "14-May-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Self-Configurable Cyber-Physical Intrusion Detection for Smart Homes Using Reinforcement Learning",
      "Authors": "R. Heartfield; G. Loukas; A. Bezemskij; E. Panaousis",
      "Author Affiliations": "School of Computing and Mathematical Sciences, University of Greenwich, London, U.K.; School of Computing and Mathematical Sciences, University of Greenwich, London, U.K.; School of Computing and Mathematical Sciences, University of Greenwich, London, U.K.; School of Computing and Mathematical Sciences, University of Greenwich, London, U.K.",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "28-Dec-20",
      "Publication Year": 2021,
      "Volume": 16,
      "Issue": null,
      "Start Page": 1720,
      "End Page": 1735,
      "Abstract": "The modern Internet of Things (IoT)-based smart home is a challenging environment to secure: devices change, new vulnerabilities are discovered and often remain unpatched, and different users interact with their devices differently and have different cyber risk attitudes. A security breach's impact is not limited to cyberspace, as it can also affect or be facilitated in physical space, for example, via voice. In this environment, intrusion detection cannot rely solely on static models that remain the same over time and are the same for all users. We present MAGPIE, the first smart home intrusion detection system that is able to autonomously adjust the decision function of its underlying anomaly classification models to a smart home's changing conditions (e.g., new devices, new automation rules and user interaction with them). The method achieves this goal by applying a novel probabilistic cluster-based reward mechanism to non-stationary multi-armed bandit reinforcement learning. MAGPIE rewards the sets of hyperparameters of its underlying isolation forest unsupervised anomaly classifiers based on the cluster silhouette scores of their output. Experimental evaluation in a real household shows that MAGPIE exhibits high accuracy because of two further innovations: it takes into account both cyber and physical sources of data; and it detects human presence to utilise models that exhibit the highest accuracy in each case. MAGPIE is available in open-source format, together with its evaluation datasets, so it can benefit from future advances in unsupervised and reinforcement learning and be able to be enriched with further sources of data as smart home environments and attacks evolve.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2020.3042049",
      "Funding Information": "European Coordinated Research on Long-term Challenges in Information and Communication Sciences and Technologies ERA-NET (CHIST-ERA), under Project COCOON; EPSRC(grant numbers:EP/P016448/1); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9277640",
      "Author Keywords": "Intrusion detection system;cyber-physical attacks;smart home;reinforcement learning",
      "IEEE Terms": "Smart homes;IP networks;Intrusion detection;Hidden Markov models;Reinforcement learning;Wireless fidelity;Monitoring",
      "Mesh_Terms": "",
      "Article Citation Count": 52,
      "Patent Citation Count": null,
      "Reference Count": 45,
      "License": "IEEE",
      "Online Date": "2-Dec-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Metrics Towards Measuring Cyber Agility",
      "Authors": "J. D. Mireles; E. Ficke; J. -H. Cho; P. Hurley; S. Xu",
      "Author Affiliations": "Department of Computer Science, The University of Texas at San Antonio, San Antonio, TX, USA; Department of Computer Science, The University of Texas at San Antonio, San Antonio, TX, USA; Department of Computer Science, Virginia Tech, Blacksburg, VA, USA; U.S. Air Force Research Laboratory, Rome, NY, USA; Department of Computer Science, The University of Texas at San Antonio, San Antonio, TX, USA",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "31-Jul-19",
      "Publication Year": 2019,
      "Volume": 14,
      "Issue": 12,
      "Start Page": 3217,
      "End Page": 3232,
      "Abstract": "In cyberspace, evolutionary strategies are commonly used by both attackers and defenders. For example, an attacker's strategy often changes over the course of time, as new vulnerabilities are discovered and/or mitigated. Similarly, a defender's strategy changes over time. These changes may or may not be in direct response to a change in the opponent's strategy. In any case, it is important to have a set of quantitative metrics to characterize and understand the effectiveness of attackers' and defenders' evolutionary strategies, which reflect their cyber agility. Despite its clear importance, few systematic metrics have been developed to quantify the cyber agility of attackers and defenders. In this paper, we propose the first metric framework for measuring cyber agility in terms of the effectiveness of the dynamic evolution of cyber attacks and defenses. The proposed framework is generic and applicable to transform any relevant, quantitative, and/or conventional static security metrics (e.g., false positives and false negatives) into dynamic metrics to capture dynamics of system behaviors. In order to validate the usefulness of the proposed framework, we conduct case studies on measuring the evolution of cyber attacks and defenses using two real-world datasets. We discuss the limitations of the current work and identify future research directions.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2019.2912551",
      "Funding Information": "U.S. Department of Defense; Army Research Office(grant numbers:W911NF-17-1-0566); Army Research Laboratory(grant numbers:W911NF-17-2-0127); National Science Foundation(grant numbers:1814825); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8695107",
      "Author Keywords": "Security metrics;agility metrics;cyber agility;cyber maneuverability;measurements;attack;defense",
      "IEEE Terms": "Time measurement;Cyberattack;Systematics;Current measurement",
      "Mesh_Terms": "",
      "Article Citation Count": 26,
      "Patent Citation Count": null,
      "Reference Count": 54,
      "License": "IEEE",
      "Online Date": "22-Apr-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Information Leakage-Aware Computer-Aided Cyber-Physical Manufacturing",
      "Authors": "S. R. Chhetri; S. Faezi; M. A. Al Faruque",
      "Author Affiliations": "Department of Electrical Engineering and Computer Science, University of California at Irvine, Irvine, CA, USA; Department of Electrical Engineering and Computer Science, University of California at Irvine, Irvine, CA, USA; Department of Electrical Engineering and Computer Science, University of California at Irvine, Irvine, CA, USA",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "2-May-18",
      "Publication Year": 2018,
      "Volume": 13,
      "Issue": 9,
      "Start Page": 2333,
      "End Page": 2344,
      "Abstract": "Cyber-physical additive manufacturing systems consist of tight integration of cyber and physical domains. This union, however, induces new cross-domain vulnerabilities that pose unique security challenges. One of these challenges is preventing confidentiality breach, caused by physical-to-cyber domain attacks. In this form of attack, attackers utilize the side-channels (such as acoustics, power, electromagnetic emissions, and so on) in the physical-domain to estimate and steal cyber-domain data (such as G/M-codes). Since these emissions depend on the physical structure of the system, one way to minimize the information leakage is to modify the physical-domain. However, this process can be costly due to added hardware modification. Instead, we propose a novel methodology that allows the cyber-domain tools [such as computer aided-manufacturing (CAM)] to be aware of the existing information leakage. Then, we propose to change either machine process or product design parameters in the cyber-domain to minimize the information leakage. Our methodology aids the existing cyber-domain and physical-domain security solution by utilizing the cross-domain relationship. We have implemented our methodology in a fused-deposition modeling-based Cartesian additive manufacturing system. Our methodology achieves reduction of mutual information by 24.94% in acoustic side-channel, 32.91% in power side-channel, 32.29% in magnetic side-channel, and 55.65% in vibration side-channel. As a case study, to help understand the implication of mutual information drop, we have also presented the calculation of success rate and the reconstruction of the 3D object based on an attack model. For the given attack model, our leakage-aware CAM tool decreases the success rate of an attacker by 8.74% and obstructs the reconstruction of finer geometry details.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2018.2818659",
      "Funding Information": "NSF CPS(grant numbers:CNS-1546993); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8322219",
      "Author Keywords": "Cyber-physical systems;confidentiality;security;information leakage;manufacturing",
      "IEEE Terms": "Three-dimensional displays;Tools;Three-dimensional printing;Solid modeling;Mutual information;Security;Geometry",
      "Mesh_Terms": "",
      "Article Citation Count": 18,
      "Patent Citation Count": null,
      "Reference Count": 41,
      "License": "IEEE",
      "Online Date": "22-Mar-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "SAFELearning: Secure Aggregation in Federated Learning With Backdoor Detectability",
      "Authors": "Z. Zhang; J. Li; S. Yu; C. Makaya",
      "Author Affiliations": "Electrical and Computer Engineering Department, Stevens Institute of Technology, Hoboken, NJ, USA; Electrical and Computer Engineering Department, Stevens Institute of Technology, Hoboken, NJ, USA; Electrical and Computer Engineering Department, Stevens Institute of Technology, Hoboken, NJ, USA; HP Inc., Palo Alto, CA, USA",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "8-Jun-23",
      "Publication Year": 2023,
      "Volume": 18,
      "Issue": null,
      "Start Page": 3289,
      "End Page": 3304,
      "Abstract": "For model privacy, local model parameters in federated learning shall be obfuscated before sent to the remote aggregator. This technique is referred to as secure aggregation. However, secure aggregation makes model poisoning attacks such as backdooring more convenient given that existing anomaly detection methods mostly require access to plaintext local models. This paper proposes a new federated learning technique SAFELearning to support backdoor detection for secure aggregation. We achieve this through two new primitives -oblivious random grouping (ORG) and partial parameter disclosure (PPD). ORG partitions participants into one-time random subgroups with group configurations oblivious to participants; PPD allows secure partial disclosure of aggregated subgroup models for anomaly detection without leaking individual model privacy. ORG is based on our construction of several new primitives including tree-based random subgroup generation, oblivious secure aggregation, and randomized Diffie-Hellman key exchange. ORG can thwart colluding attackers from knowing each other‚Äôs group membership assignment with non-negligible advantage than random guess. Backdoor attacks are detected based on statistical distributions of the subgroup aggregated parameters of the learning iterations. SAFELearning can significantly reduce backdoor model accuracy without jeopardizing the main task accuracy under common backdoor strategies. Extensive experiments show SAFELearning is robust against malicious and faulty participants, whilst being more efficient than the state-of-art secure aggregation protocol in terms of both communication and computation costs.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2023.3280032",
      "Funding Information": "NSF(grant numbers:ECCS#1923739); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10136231",
      "Author Keywords": "Federated learning;secure aggregation;backdoor attack;machine learning",
      "IEEE Terms": "Federated learning;Data models;Computational modeling;Privacy;Servers;Cryptography;Protocols",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 51,
      "License": "IEEE",
      "Online Date": "25-May-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Byzantines Can Also Learn From History: Fall of Centered Clipping in Federated Learning",
      "Authors": "K. √ñzfatura; E. √ñzfatura; A. K√ºp√ß√º; D. Gunduz",
      "Author Affiliations": "KUIS AI Center, Ko√ß University, ƒ∞Istanbul, Turkey; IPC Laboratory, Imperial College London, London, U.K; Department of Computer Engineering, Ko√ß University, ƒ∞Istanbul, Turkey; IPC Laboratory, Imperial College London, London, U.K",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "3-Jan-24",
      "Publication Year": 2024,
      "Volume": 19,
      "Issue": null,
      "Start Page": 2010,
      "End Page": 2022,
      "Abstract": "The increasing popularity of the federated learning (FL) framework due to its success in a wide range of collaborative learning tasks also induces certain security concerns. Among many vulnerabilities, the risk of Byzantine attacks is of particular concern, which refers to the possibility of malicious clients participating in the learning process. Hence, a crucial objective in FL is to neutralize the potential impact of Byzantine attacks and to ensure that the final model is trustable. It has been observed that the higher the variance among the clients‚Äô models/updates, the more space there is for Byzantine attacks to be hidden. As a consequence, by utilizing momentum, and thus, reducing the variance, it is possible to weaken the strength of known Byzantine attacks. The centered clipping (CC) framework has further shown that the momentum term from the previous iteration, besides reducing the variance, can be used as a reference point to neutralize Byzantine attacks better. In this work, we first expose vulnerabilities of the CC framework, and introduce a novel attack strategy that can circumvent the defences of CC and other robust aggregators and reduce their test accuracy up to %33 on best-case scenarios in image classification tasks. Then, we propose a new robust and fast defence mechanism that is effective against the proposed and other existing Byzantine attacks.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2023.3345171",
      "Funding Information": "T√úBƒ∞ITAK; Scientific and Technological Research Council of Turkey(grant numbers:119E088); UK Research and Innovation (UKRI) for the Project ‚ÄúAIR‚Äù (European Research Council (ERC)-Consolidator Grant)(grant numbers:EP/X030806/1); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10366296",
      "Author Keywords": "Federated learning;adversarial machine learning;deep learning",
      "IEEE Terms": "Task analysis;Robustness;Federated learning;Security;Training;Aggregates;Taxonomy",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 58,
      "License": "IEEE",
      "Online Date": "19-Dec-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Neutaint: Efficient Dynamic Taint Analysis with Neural Networks",
      "Authors": "D. She; Y. Chen; A. Shah; B. Ray; S. Jana",
      "Author Affiliations": "Columbia University; Columbia University; Columbia University; Columbia University; Columbia University",
      "Publication Title": "2020 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "30-Jul-20",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 1527,
      "End Page": 1543,
      "Abstract": "Dynamic taint analysis (DTA) is widely used by various applications to track information flow during runtime execution. Existing DTA techniques use rule-based taint-propagation, which is neither accurate (i.e., high false positive rate) nor efficient (i.e., large runtime overhead). It is hard to specify taint rules for each operation while covering all corner cases correctly. Moreover, the overtaint and undertaint errors can accumulate during the propagation of taint information across multiple operations. Finally, rule-based propagation requires each operation to be inspected before applying the appropriate rules resulting in prohibitive performance overhead on large real-world applications.In this work, we propose Neutaint, a novel end-to-end approach to track information flow using neural program embeddings. The neural program embeddings model the target's programs computations taking place between taint sources and sinks, which automatically learns the information flow by observing a diverse set of execution traces. To perform lightweight and precise information flow analysis, we utilize saliency maps to reason about most influential sources for different sinks. Neutaint constructs two saliency maps, a popular machine learning approach to influence analysis, to summarize both coarse-grained and fine-grained information flow in the neural program embeddings.We compare Neutaint with 3 state-of-the-art dynamic taint analysis tools. The evaluation results show that Neutaint can achieve 68% accuracy, on average, which is 10% improvement while reducing 40√ó runtime overhead over the second-best taint tool Libdft on 6 real world programs. Neutaint also achieves 61% more edge coverage when used for taint-guided fuzzing indicating the effectiveness of the identified influential bytes. We also evaluate Neutaint's ability to detect real world software attacks. The results show that Neutaint can successfully detect different types of vulnerabilities including buffer/heap/integer overflows, division by zero, etc. Lastly, Neutaint can detect 98.7% of total flows, the highest among all taint analysis tools.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-7281-3497-0",
      "DOI": "10.1109/SP40000.2020.00022",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9152790",
      "Author Keywords": "",
      "IEEE Terms": "Tools;Fuzzing;Runtime;Neural networks;Security;Performance analysis;Task analysis",
      "Mesh_Terms": "",
      "Article Citation Count": 20,
      "Patent Citation Count": null,
      "Reference Count": 64,
      "License": "IEEE",
      "Online Date": "30-Jul-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Security Vulnerabilities and Countermeasures for Target Localization in Bio-NanoThings Communication Networks",
      "Authors": "A. Giaretta; S. Balasubramaniam; M. Conti",
      "Author Affiliations": "Department of Mathematics, University of Padua, Padua, Italy; Nano Communication Centre, Tampere University of Technology, Tampere, Finland; Department of Mathematics, University of Padua, Padua, Italy",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "19-May-17",
      "Publication Year": 2016,
      "Volume": 11,
      "Issue": 4,
      "Start Page": 665,
      "End Page": 676,
      "Abstract": "The emergence of molecular communication has provided an avenue for developing biological nanonetworks. Synthetic biology is a platform that enables reprogramming cells, which we refer to as Bio-NanoThings, that can be assembled to create nanonetworks. In this paper, we focus on specific Bio-NanoThings, i.e, bacteria, where engineering their ability to emit or sense molecules can result in functionalities, such as cooperative target localization. Although this opens opportunities, e.g., for novel healthcare applications of the future, this can also lead to new problems, such as a new form of bioterrorism. In this paper, we investigate the disruptions that malicious Bio-NanoThings (M-BNTs) can create for molecular nanonetworks. In particular, we introduce two types of attacks: 1) blackhole and 2) sentry attacks. In blackhole attack M-BNTs emit attractant chemicals to draw-in the legitimate Bio-NanoThings (L-BNTs) from searching for their target, while in the sentry attack, the M-BNTs emit repellents to disperse the L-BNTs from reaching their target. We also present a countermeasure that L-BNTs can take to be resilient to the attacks, where we consider two forms of decision processes that includes Bayes‚Äô rule as well as a simple threshold approach. We run a thorough set of simulations to assess the effectiveness of the proposed attacks as well as the proposed countermeasure. Our results show that the attacks can significantly hinder the regular behavior of Bio-NanoThings, while the countermeasures are effective for protecting against such attacks.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2015.2505632",
      "Funding Information": "Academy of Finland FiDiPro (Finnish Distinguished Professor) program, for the Project ‚ÄúNanocommunication Networks,‚Äù 2012-2016; Finnish Academy Research Fellow program(grant numbers:284531); TENACE PRIN Project 20103P34XC funded by the Italian MIUR; Project ‚ÄúTackling Mobile Malware with Innovative Machine Learning Techniques‚Äù funded by the University of Padua; Marie Curie Fellowship through the European Commission(grant numbers:PCIG11-GA-2012-321980); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7347397",
      "Author Keywords": "Molecular Communication;Internet of Nano Things;Security;Bioterrorism;Molecular communication;Internet of Nano Things;security;bioterrorism",
      "IEEE Terms": "Nanobioscience;Microorganisms;Bioterrorism;Biological system modeling;Molecular communication;Chemicals",
      "Mesh_Terms": "",
      "Article Citation Count": 41,
      "Patent Citation Count": null,
      "Reference Count": 37,
      "License": "IEEE",
      "Online Date": "4-Dec-15",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "HVLearn: Automated Black-Box Analysis of Hostname Verification in SSL/TLS Implementations",
      "Authors": "S. Sivakorn; G. Argyros; K. Pei; A. D. Keromytis; S. Jana",
      "Author Affiliations": "Department of Computer Science, Columbia University, New York, USA; Department of Computer Science, Columbia University, New York, USA; Department of Computer Science, Columbia University, New York, USA; Department of Computer Science, Columbia University, New York, USA; Department of Computer Science, Columbia University, New York, USA",
      "Publication Title": "2017 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "26-Jun-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 521,
      "End Page": 538,
      "Abstract": "SSL/TLS is the most commonly deployed family of protocols for securing network communications. The security guarantees of SSL/TLS are critically dependent on the correct validation of the X.509 server certificates presented during the handshake stage of the SSL/TLS protocol. Hostname verification is a critical component of the certificate validation process that verifies the remote server's identity by checking if the hostname of the server matches any of the names present in the X.509 certificate. Hostname verification is a highly complex process due to the presence of numerous features and corner cases such as wildcards, IP addresses, international domain names, and so forth. Therefore, testing hostname verification implementations present a challenging task. In this paper, we present HVLearn, a novel black-box testing framework for analyzing SSL/TLS hostname verification implementations, which is based on automata learning algorithms. HVLearn utilizes a number of certificate templates, i.e., certificates with a common name (CN) set to a specific pattern, in order to test different rules from the corresponding specification. For each certificate template, HVLearn uses automata learning algorithms to infer a Deterministic Finite Automaton (DFA) that describes the set of all hostnames that match the CN of a given certificate. Once a model is inferred for a certificate template, HVLearn checks the model for bugs by finding discrepancies with the inferred models from other implementations or by checking against regular-expression-based rules derived from the specification. The key insight behind our approach is that the acceptable hostnames for a given certificate template form a regular language. Therefore, we can leverage automata learning techniques to efficiently infer DFA models that accept the corresponding regular language. We use HVLearn to analyze the hostname verification implementations in a number of popular SSL/TLS libraries and applications written in a diverse set of languages like C, Python, and Java. We demonstrate that HVLearn can achieve on average 11.21% higher code coverage than existing black/gray-box fuzzing techniques. By comparing the DFA models inferred by HVLearn, we found 8 unique violations of the RFC specifications in the tested hostname verification implementations. Several of these violations are critical and can render the affected implementations vulnerable to active man-in-the-middle attacks.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-5090-5533-3",
      "DOI": "10.1109/SP.2017.46",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7958596",
      "Author Keywords": "",
      "IEEE Terms": "Testing;Servers;IP networks;Learning automata;Security;Protocols;Electronic mail",
      "Mesh_Terms": "",
      "Article Citation Count": 41,
      "Patent Citation Count": null,
      "Reference Count": 61,
      "License": "IEEE",
      "Online Date": "26-Jun-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "DEEPSEC: A Uniform Platform for Security Analysis of Deep Learning Model",
      "Authors": "X. Ling; S. Ji; J. Zou; J. Wang; C. Wu; B. Li; T. Wang",
      "Author Affiliations": "Zhejiang University; Alibaba-Zhejiang University Joint Research Institute of Frontier Technologies; Zhejiang University; Zhejiang University; Zhejiang University; UIUC; Lehigh University",
      "Publication Title": "2019 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "16-Sep-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 673,
      "End Page": 690,
      "Abstract": "Deep learning (DL) models are inherently vulnerable to adversarial examples ‚Äì maliciously crafted inputs to trigger target DL models to misbehave ‚Äì which significantly hinders the application of DL in security-sensitive domains. Intensive research on adversarial learning has led to an arms race between adversaries and defenders. Such plethora of emerging attacks and defenses raise many questions: Which attacks are more evasive, preprocessing-proof, or transferable? Which defenses are more effective, utility-preserving, or general? Are ensembles of multiple defenses more robust than individuals? Yet, due to the lack of platforms for comprehensive evaluation on adversarial attacks and defenses, these critical questions remain largely unsolved. In this paper, we present the design, implementation, and evaluation of DEEPSEC, a uniform platform that aims to bridge this gap. In its current implementation, DEEPSEC incorporates 16 state-of-the-art attacks with 10 attack utility metrics, and 13 state-of-the-art defenses with 5 defensive utility metrics. To our best knowledge, DEEPSEC is the first platform that enables researchers and practitioners to (i) measure the vulnerability of DL models, (ii) evaluate the effectiveness of various attacks/defenses, and (iii) conduct comparative studies on attacks/defenses in a comprehensive and informative manner. Leveraging DEEPSEC, we systematically evaluate the existing adversarial attack and defense methods, and draw a set of key findings, which demonstrate DEEPSEC‚Äôs rich functionality, such as (1) the trade-off between misclassification and imperceptibility is empirically confirmed; (2) most defenses that claim to be universally applicable can only defend against limited types of attacks under restricted settings; (3) it is not necessary that adversarial examples with higher perturbation magnitude are easier to be detected; (4) the ensemble of multiple defenses cannot improve the overall defense capability, but can improve the lower bound of the defense effectiveness of individuals. Extensive analysis on DEEPSEC demonstrates its capabilities and advantages as a benchmark platform which can benefit future adversarial learning research.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-5386-6660-9",
      "DOI": "10.1109/SP.2019.00023",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8835375",
      "Author Keywords": "Deep-Learning;Adversarial-machine-learning;benchmark-platform",
      "IEEE Terms": "Measurement;Perturbation methods;Security;Robustness;Terminology;Jacobian matrices;Training",
      "Mesh_Terms": "",
      "Article Citation Count": 66,
      "Patent Citation Count": null,
      "Reference Count": 67,
      "License": "IEEE",
      "Online Date": "16-Sep-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "DP-Sniper: Black-Box Discovery of Differential Privacy Violations using Classifiers",
      "Authors": "B. Bichsel; S. Steffen; I. Bogunovic; M. Vechev",
      "Author Affiliations": "ETH Zurich, Switzerland; ETH Zurich, Switzerland; ETH Zurich, Switzerland; ETH Zurich, Switzerland",
      "Publication Title": "2021 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "26-Aug-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 391,
      "End Page": 409,
      "Abstract": "We present DP-Sniper, a practical black-box method that automatically finds violations of differential privacy.DP-Sniper is based on two key ideas: (i) training a classifier to predict if an observed output was likely generated from one of two possible inputs, and (ii) transforming this classifier into an approximately optimal attack on differential privacy.Our experimental evaluation demonstrates that DP-Sniper obtains up to 12.4 times stronger guarantees than state-of-the-art, while being 15.5 times faster. Further, we show that DP-Sniper is effective in exploiting floating-point vulnerabilities of naively implemented algorithms: it detects that a supposedly 0.1-differentially private implementation of the Laplace mechanism actually does not satisfy even 0.25-differential privacy.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-7281-8934-5",
      "DOI": "10.1109/SP40001.2021.00081",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9519405",
      "Author Keywords": "differential privacy;differential distinguishability;inference attacks;machine learning;classifiers",
      "IEEE Terms": "Training;Privacy;Differential privacy;Approximation algorithms;Classification algorithms;Security",
      "Mesh_Terms": "",
      "Article Citation Count": 7,
      "Patent Citation Count": null,
      "Reference Count": 50,
      "License": "IEEE",
      "Online Date": "26-Aug-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Runtime Recovery of Web Applications under Zero-Day ReDoS Attacks",
      "Authors": "Z. Bai; K. Wang; H. Zhu; Y. Cao; X. Jin",
      "Author Affiliations": "Johns Hopkins University; Peking University; Johns Hopkins University; Johns Hopkins University; Peking University",
      "Publication Title": "2021 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "26-Aug-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 1575,
      "End Page": 1588,
      "Abstract": "Regular expression denial of service (ReDoS)‚Äî which exploits the super-linear running time of matching regular expressions against carefully crafted inputs‚Äîis an emerging class of DoS attacks to web services. One challenging question for a victim web service under ReDoS attacks is how to quickly recover its normal operation after ReDoS attacks, especially these zero-day ones exploiting previously unknown vulnerabilities.In this paper, we present RegexNet, the first payload-based, automated, reactive ReDoS recovery system for web services. RegexNet adopts a learning model, which is updated constantly in a feedback loop during runtime, to classify payloads of upcoming requests including the request contents and database query responses. If detected as a cause leading to ReDoS, RegexNet migrates those requests to a sandbox and isolates their execution for a fast, first-measure recovery.We have implemented a RegexNet prototype and integrated it with HAProxy and Node.js. Evaluation results show that RegexNet is effective in recovering the performance of web services against zero-day ReDoS attacks, responsive on reacting to attacks in sub-minute, and resilient to different ReDoS attack types including adaptive ones that are designed to evade RegexNet on purpose.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-7281-8934-5",
      "DOI": "10.1109/SP40001.2021.00077",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9519496",
      "Author Keywords": "Regular expression Denial of Service (ReDoS);Deep Neural Networks;Adversarial Machine Learning;Online Feedback Loop",
      "IEEE Terms": "Feedback loop;Privacy;Runtime;Databases;Prototypes;Web servers;Data models",
      "Mesh_Terms": "",
      "Article Citation Count": 6,
      "Patent Citation Count": null,
      "Reference Count": 53,
      "License": "IEEE",
      "Online Date": "26-Aug-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Wireless Anomaly Detection Based on IEEE 802.11 Behavior Analysis",
      "Authors": "H. Alipour; Y. B. Al-Nashif; P. Satam; S. Hariri",
      "Author Affiliations": "Cloud Identity Services and Security Division, Microsoft, Redmond, WA, USA; Department of Electrical and Computer Engineering, Old Dominion University, Norfolk, VA, USA; Department of Electrical and Computer Engineering, The University of Arizona, Tucson, AZ, USA; Department of Electrical and Computer Engineering, The University of Arizona, Tucson, AZ, USA",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "19-May-17",
      "Publication Year": 2015,
      "Volume": 10,
      "Issue": 10,
      "Start Page": 2158,
      "End Page": 2170,
      "Abstract": "Wireless communication networks are pervading every aspect of our lives due to their fast, easy, and inexpensive deployment. They are becoming ubiquitous and have been widely used to transfer critical information, such as banking accounts, credit cards, e-mails, and social network credentials. The more pervasive the wireless technology is going to be, the more important its security issue will be. Whereas the current security protocols for wireless networks have addressed the privacy and confidentiality issues, there are unaddressed vulnerabilities threatening their availability and integrity (e.g., denial of service, session hijacking, and MAC address spoofing attacks). In this paper, we describe an anomaly based intrusion detection system for the IEEE 802.11 wireless networks based on behavioral analysis to detect deviations from normal behaviors that are triggered by wireless network attacks. Our anomaly behavior analysis of the 802.11 protocols is based on monitoring the n-consecutive transitions of the protocol state machine. We apply sequential machine learning techniques to model the n-transition patterns in the protocol and characterize the probabilities of these transitions being normal. We have implemented several experiments to evaluate our system performance. By cross validating the system over two different wireless channels, we have achieved a low false alarm rate (<;0.1%). We have also evaluated our approach against an attack library of known wireless attacks and has achieved more than 99% detection rate.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2015.2433898",
      "Funding Information": "AFOSR DDDAS(grant numbers:FA95550-12-1-0241); National Science Foundation research projects(grant numbers:NSF IIP-0758579,NCS-0855087,IIP-1127873); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7109166",
      "Author Keywords": "Anomaly detection;IEEE 802.11 security;Intrusion detection;Wireless Network security;Protocol analysis;Wireless networks;Anomaly detection;IEEE 802.11 security;intrusion detection;wireless network security;protocol analysis;wireless networks",
      "IEEE Terms": "Protocols;IEEE 802.11 Standards;Intrusion detection;Detectors;Communication system security;Wireless networks",
      "Mesh_Terms": "",
      "Article Citation Count": 56,
      "Patent Citation Count": null,
      "Reference Count": 27,
      "License": "IEEE",
      "Online Date": "15-May-15",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Person Identification by Keystroke Dynamics Using Pairwise User Coupling",
      "Authors": "S. Mondal; P. Bours",
      "Author Affiliations": "University of Twente (UT), Enschede, AE, The Netherlands; Department of Information Security and Communication Technology, Norwegian University of Science and Technology, NO-2802, Gj√∏vik, Norway",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "1-Mar-17",
      "Publication Year": 2017,
      "Volume": 12,
      "Issue": 6,
      "Start Page": 1319,
      "End Page": 1329,
      "Abstract": "Due to the increasing vulnerabilities in cyberspace, security alone is not enough to prevent a breach, but cyber forensics or cyber intelligence is also required to prevent future attacks or to identify the potential attacker. The unobtrusive and covert nature of biometric data collection of keystroke dynamics has a high potential for use in cyber forensics or cyber intelligence. In this paper, we investigate the usefulness of keystroke dynamics to establish the person identity. We propose three schemes for identifying a person when typing on a keyboard. We use various machine learning algorithms in combination with the proposed pairwise user coupling technique and show the performance of each separate technique as well as the performance when combining two or more together. In particular, we show that pairwise user coupling in a bottom-up tree structure scheme gives the best performance, both concerning accuracy and time complexity. The proposed techniques are validated by using keystroke data. However, these techniques could equally well be applied to other pattern identification problems. We have also investigated the optimized feature set for person identification by using keystroke dynamics. Finally, we also examined the performance of the identification system when a user, unlike his normal behaviour, types with only one hand, and we show that performance then is not optimal, as was to be expected.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2017.2658539",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7833085",
      "Author Keywords": "Pairwise user coupling;keystroke dynamics;person identification;behavioural biometrics;cyber-forensics",
      "IEEE Terms": "Authentication;Couplings;Support vector machines;Keyboards;Computers;Biological neural networks;Training",
      "Mesh_Terms": "",
      "Article Citation Count": 34,
      "Patent Citation Count": null,
      "Reference Count": 33,
      "License": "IEEE",
      "Online Date": "25-Jan-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Improvement of Min-Entropy Evaluation Based on Pruning and Quantized Deep Neural Network",
      "Authors": "H. Li; J. Zhang; Z. Li; J. Liu; Y. Wang",
      "Author Affiliations": "Key Laboratory of Advanced Transducers and Intelligent Control System, Ministry of Education of China, College of Physics and Optoelectronics, Taiyuan University of Technology, Taiyuan, China; Key Laboratory of Advanced Transducers and Intelligent Control System, Ministry of Education of China, College of Physics and Optoelectronics, Taiyuan University of Technology, Taiyuan, China; China Electric Power Research Institute, Beijing, China; Nations Technology Company Ltd, Shenzhen, China; Advanced Institute of Photonic Technology, Guangdong University of Technology, Guangzhou, China",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "7-Feb-23",
      "Publication Year": 2023,
      "Volume": 18,
      "Issue": null,
      "Start Page": 1410,
      "End Page": 1420,
      "Abstract": "In the field of information security, the unpredictability of random numbers plays determinant role according to the security of cryptographic systems. However, limited by the capability of pattern recognition and data mining, statistical-based methods for random number security assessment can only detect whether there are obvious statistical flaws in random sequences. In recent years, some machine learning-based techniques such as deep neural networks and prediction-based methods applied to random number security have exhibited superior performance. Concurrently, the proposed deep learning models bring out issues of large number of parameters, high storage space occupation and complex computation. In this paper, for the challenge of random number security analysis: building high-performance predictive models, we propose an effective analysis method based on pruning and quantized deep neural network. Firstly, we train a temporal pattern attention-based long short-term memory (TPA-LSTM) model with complex structure and good prediction performance. Secondly, through pruning and quantization operations, the complexity and storage space occupation of the TPA-LSTM model were reduced. Finally, we retrain the network to find the best model and evaluate the effectiveness of this method using various simulated data sets with known min-entropy values. By comparing with related work, the TPA-LSTM model provides more accurate estimates: the relative error is less than 0.43%. In addition, the model weight parameters are reduced by more than 98% and quantized to 2 bits (compression over 175x) without accuracy loss.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2023.3240859",
      "Funding Information": "National Key Research and Development Program of China(grant numbers:2019YFB1803500); National Natural Science Foundation of China(grant numbers:62045009,61731014); Natural Science Foundation of Shanxi Province(grant numbers:202103021224038,20210302123185); International Cooperation of Key Research and Development Program of Shanxi Province(grant numbers:201903D421012); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10032186",
      "Author Keywords": "Min-entropy;TPA-LSTM;random number;pruning;quantization",
      "IEEE Terms": "Security;Predictive models;Entropy;Deep learning;Data models;Quantization (signal);Neural networks",
      "Mesh_Terms": "",
      "Article Citation Count": 6,
      "Patent Citation Count": null,
      "Reference Count": 39,
      "License": "IEEE",
      "Online Date": "30-Jan-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Profiled Side-Channel Attack on Cryptosystems Based on the Binary Syndrome Decoding Problem",
      "Authors": "B. Colombier; V. -F. DrƒÉgoi; P. -L. Cayrel; V. Grosso",
      "Author Affiliations": "TIMA, CNRS, Grenoble INP, Universit√© Grenoble Alpes, Grenoble, France; Faculty of Exact Sciences, Aurel Vlaicu University, Arad, Romania; aboratoire Hubert Curien UMR 5516, CNRS, Universit√© Jean Monnet, Saint-Etienne, France; aboratoire Hubert Curien UMR 5516, CNRS, Universit√© Jean Monnet, Saint-Etienne, France",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "4-Oct-22",
      "Publication Year": 2022,
      "Volume": 17,
      "Issue": null,
      "Start Page": 3407,
      "End Page": 3420,
      "Abstract": "The NIST standardization process for post-quantum cryptography has been drawing the attention of researchers to the submitted candidates. One direction of research consists in implementing those candidates on embedded systems and that exposes them to physical attacks in return. The Classic McEliece cryptosystem, which is among the four finalists of round 3 in the Key Encapsulation Mechanism category, builds its security on the hardness of the syndrome decoding problem, which is a classic hard problem in code-based cryptography. This cryptosystem was recently targeted by a laser fault injection attack leading to message recovery. Regrettably, the attack setting is very restrictive and it does not tolerate any error in the faulty syndrome. Moreover, it depends on the very strong attacker model of laser fault injection, and does not apply to optimised implementations of the algorithm that make optimal usage of the machine words capacity. In this article, we propose a to change the angle and perform a message-recovery attack that relies on side-channel information only. We improve on the previously published work in several key aspects. First, we show that side-channel information, obtained with power consumption analysis, is sufficient to obtain an integer syndrome, as required by the attack framework. This is done by leveraging classic machine learning techniques that recover the Hamming weight information very accurately. Second, we put forward a computationally-efficient method, based on a simple dot product and information-set decoding algorithms, to recover the message from the, possibly inaccurate, recovered integer syndrome. Finally, we present a masking countermeasure against the proposed attack.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2022.3198277",
      "Funding Information": "French National Research Agency in the Framework of the ‚ÄúInvestissements d‚Äôavenir‚Äù Program(grant numbers:ANR-15-IDEX-02); LabEx PERSYVAL(grant numbers:ANR-11-LABX-0025-01); Ministry of Research, Innovation and Digitization, CNCS/CCCDI‚ÄîUEFISCDI within PNCDI III(grant numbers:PN-III-P1-1.1-PD-2019-0285); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9854893",
      "Author Keywords": "Post-quantum cryptography;syndrome decoding problem;side-channel attack",
      "IEEE Terms": "Decoding;NIST;Side-channel attacks;Semiconductor lasers;Encryption;Encapsulation;Public key",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 52,
      "License": "IEEE",
      "Online Date": "11-Aug-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Low Communication Secure Computation From Semi-Trusted Hardware",
      "Authors": "Y. Lu; B. Zhang; K. Ren",
      "Author Affiliations": "School of Cyber Science and Technology, Zhejiang University, Hangzhou, China; School of Cyber Science and Technology, Zhejiang University, Hangzhou, China; School of Cyber Science and Technology, Zhejiang University, Hangzhou, China",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "6-Jul-23",
      "Publication Year": 2023,
      "Volume": 18,
      "Issue": null,
      "Start Page": 3962,
      "End Page": 3976,
      "Abstract": "In privacy-preserving machine learning and many other applications, the involved parties want to obtain the computation result without revealing their private inputs. Secure computation aims to solve this problem, but current secure computation protocols often fail to provide efficient solutions due to large communication, especially in a real-life Internet network where the bandwidth and the delay can be unsatisfying. Assuming the existence of a trusted hardware component that is resilient to side-channel attacks and will faithfully compute a pre-agreed program, secure computation can be realized by each party sending its input to the hardware and receiving the execution result back. However, a recent work of Lu et al. (ESORICS‚Äô21) points out that the hardware components can‚Äôt be fully trusted. In this work, we improve the semi-trusted hardware model of Lu et al., and we propose secure computation protocols with low communication in the new model. We observe that the ESORICS‚Äô21 two-party computation protocol have some security flaws; in this work, we fix them and improve its online efficiency. Moreover, we propose an efficient constant-round secure multi-party computation protocol which has a communication cost of  $(n-1) {\\lambda }+2(n-1)\\ell $  bits, where  $n$  is the number of the parties,  ${\\lambda }$  is the security parameter and  $\\ell $  is the input/output size. The computation cost of our multi-party protocol is also much smaller than current best-known constant-round protocols.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2023.3282134",
      "Funding Information": "National Key Research and Development Program of China(grant numbers:2021YFB3101601); National Natural Science Foundation of China(grant numbers:62072401,62232002); Open Project Program of Key Laboratory of Blockchain and Cyberspace Governance of Zhejiang Province; Input Output (iohk.io); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10142026",
      "Author Keywords": "Semi-trusted hardware model;multi-party computation;garbled circuit",
      "IEEE Terms": "Protocols;Hardware;Computational modeling;Integrated circuit modeling;Security;Costs;Servers",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 35,
      "License": "IEEE",
      "Online Date": "1-Jun-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "AST-SafeSec: Adaptive Stress Testing for Safety and Security Co-Analysis of Cyber-Physical Systems",
      "Authors": "N. Kaloudi; J. Li",
      "Author Affiliations": "Department of Computer Science, Norwegian University of Science and Technology, Trondheim, Norway; Department of Computer Science, Norwegian University of Science and Technology, Trondheim, Norway",
      "Publication Title": "IEEE Transactions on Information Forensics and Security",
      "Date Added To Xplore": "11-Sep-23",
      "Publication Year": 2023,
      "Volume": 18,
      "Issue": null,
      "Start Page": 5567,
      "End Page": 5579,
      "Abstract": "Cyber-physical systems are becoming more intelligent with the adoption of heterogeneous sensor networks and machine learning capabilities that deal with an increasing amount of input data. While this complexity aims to solve problems in various domains, it adds new challenges for the system assurance. One issue is the rise in the number of abnormal behaviors that affect system performance due to possible sensor faults and attacks. The combination of safety risks, which are usually caused by random sensor faults and security risks that can happen during any random system state, makes the full coverage testing of the cyber-physical system challenging. Existing techniques are inadequate to deal with complex safety and security co-risks against cyber-physical systems. In this paper, we propose AST-SafeSec, an analysis methodology for both safety and security aspects that utilizes reinforcement learning to identify the most likely adversarial paths at various normal or failure states of a cyber-physical system that can influence system behavior through its sensor data. The methodology is evaluated using an autonomous vehicle scenario by incorporating a security attack into the stochastic sensor elements of a vehicle. Evaluation results show that the methodology analyzes the interaction of malicious attacks with random faults and identifies the incident caused by the interactions and the most likely path that leads to the incident.",
      "ISSN": "1556-6021",
      "ISBNs": "",
      "DOI": "10.1109/TIFS.2023.3309160",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10231138",
      "Author Keywords": "Co-analysis;cyber-physical systems (CPSs);cybersecurity;safety;stress testing;validation;verification",
      "IEEE Terms": "Safety;Security;Testing;Complexity theory;Behavioral sciences;Cyber-physical systems;Cyberattack",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 57,
      "License": "IEEE",
      "Online Date": "28-Aug-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Bookworm Game: Automatic Discovery of LTE Vulnerabilities Through Documentation Analysis",
      "Authors": "Y. Chen; Y. Yao; X. Wang; D. Xu; C. Yue; X. Liu; K. Chen; H. Tang; B. Liu",
      "Author Affiliations": "Indiana University, Bloomington; CAS-KLONAT Key Laboratory of Network Assessment Technology, CAS, BKLONSPT Beijing Key Laboratory of Network Security and Protection Technology, SKLOIS State Key Laboratory of Information Security, IIE, CAS, Institute of Information Engineering, CAS; Indiana University, Bloomington; CAS-KLONAT Key Laboratory of Network Assessment Technology, CAS, BKLONSPT Beijing Key Laboratory of Network Security and Protection Technology, SKLOIS State Key Laboratory of Information Security, IIE, CAS, Institute of Information Engineering, CAS; CAS-KLONAT Key Laboratory of Network Assessment Technology, CAS, BKLONSPT Beijing Key Laboratory of Network Security and Protection Technology, SKLOIS State Key Laboratory of Information Security, IIE, CAS, Institute of Information Engineering, CAS; Indiana University, Bloomington; CAS-KLONAT Key Laboratory of Network Assessment Technology, CAS, BKLONSPT Beijing Key Laboratory of Network Security and Protection Technology, SKLOIS State Key Laboratory of Information Security, IIE, CAS, Institute of Information Engineering, CAS; Indiana University, Bloomington; CAS-KLONAT Key Laboratory of Network Assessment Technology, CAS, BKLONSPT Beijing Key Laboratory of Network Security and Protection Technology, SKLOIS State Key Laboratory of Information Security, IIE, CAS, Institute of Information Engineering, CAS",
      "Publication Title": "2021 IEEE Symposium on Security and Privacy (SP)",
      "Date Added To Xplore": "26-Aug-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 1197,
      "End Page": 1214,
      "Abstract": "In the past decade, the security of cellular networks has been increasingly under scrutiny, leading to the discovery of numerous vulnerabilities that expose the network and its users to a wide range of security risks, from denial of service to information leak. However, most of these findings have been made through ad-hoc manual analysis, which is inadequate for fundamentally enhancing the security assurance of a system as complex as the cellular network. An important observation is that the massive amount of technical documentation of cellular network can provide key insights into the protection it puts in place and help identify potential security flaws. Particularly, we found that such documentation often contains hazard indicators (HIs) ‚Äì the statement that describes a risky operation (e.g., abort an ongoing procedure) when a certain event happens at a state, which can guide a test on the system to find out whether the operation can indeed be triggered by an unauthorized party to cause harm to the cellular core or legitimate users‚Äô equipment. Based upon this observation, we present in this paper a new framework that makes the first step toward intelligent and systematic security analysis of cellular networks. Our approach, called Atomic, utilizes natural-language processing and machine learning techniques to scan a large amount of LTE documentation for HIs. The HIs discovered are further parsed and analyzed to recover state and event information for generating test cases. These test cases are further utilized to automatically construct tests in an LTE simulation environment, which runs the tests to detect the vulnerabilities in the LTE that allow the risky operations to happen without proper protection. In our research, we implemented Atomic and ran it on the LTE NAS specification, including 549 pages with 13,598 sentences and 283,850 words. In less than 5 hours, our prototype reported 42 vulnerabilities from 192 HIs discovered, including 10 never reported before, under two threat models. All these vulnerabilities have been confirmed through end-to-end attacks, which lead to unauthorized disruption of the LTE service a legitimate user‚Äôs equipment receives. We reported our findings to authorized parties and received their confirmation that these vulnerabilities indeed exist in major commercial carriers and $2,000 USD reward from Google.",
      "ISSN": "2375-1207",
      "ISBNs": "978-1-7281-8934-5",
      "DOI": "10.1109/SP40001.2021.00104",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9519388",
      "Author Keywords": "Cellular Network;4G;LTE;Vulnerability;Attack;Documentation Analysis;NLP",
      "IEEE Terms": "Cellular networks;Protocols;Systematics;Prototypes;Documentation;Manuals;Hazards",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 60,
      "License": "IEEE",
      "Online Date": "26-Aug-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "The Ethics of Going Deep: Challenges in Machine Learning for Sensitive Security Domains",
      "Authors": "A. Eusebi; M. Vasek; E. Cockbain; E. Mariconti",
      "Author Affiliations": "UCL, London, UK; UCL, London, UK; UCL, London, UK; UCL, London, UK",
      "Publication Title": "2022 IEEE European Symposium on Security and Privacy Workshops (EuroS&PW)",
      "Date Added To Xplore": "27-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 533,
      "End Page": 537,
      "Abstract": "Sometimes, machine learning models can determine the trajectory of human life, and a series of cascading ethical failures could be irreversible. Ethical concerns are nevertheless set to increase, in particular when the injection of algorithmic forms of decision-making occurs in highly sensitive security contexts. In cybercrime, there have been cases of algorithms that have not identified racist and hateful speeches, as well as missing the identification of Image Based Sexual Abuse cases. Hence, this paper intends to add a voice of caution on the vulnerabilities pervading the different stages of a machine learning development pipeline and the ethical challenges that these potentially nurture and perpetuate. To highlight both the issues and potential fixes in an adversarial environment, we use Child Sexual Exploitation and its implications on the Internet as a case study, being 2021 its worst year according to the Internet Watch Foundation.",
      "ISSN": "2768-0657",
      "ISBNs": "978-1-6654-9560-8",
      "DOI": "10.1109/EuroSPW55150.2022.00063",
      "Funding Information": "EPSRC(grant numbers:180330); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9799317",
      "Author Keywords": "machine learning;ethics;security;online child sexual abuse",
      "IEEE Terms": "Ethics;Machine learning algorithms;Pipelines;Power system protection;Focusing;Machine learning;Internet",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 30,
      "License": "IEEE",
      "Online Date": "27-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "SoK: Security and Privacy in Machine Learning",
      "Authors": "N. Papernot; P. McDaniel; A. Sinha; M. P. Wellman",
      "Author Affiliations": "Pennsylvania State University; Pennsylvania State University; University of Michigan; University of Michigan",
      "Publication Title": "2018 IEEE European Symposium on Security and Privacy (EuroS&P)",
      "Date Added To Xplore": "9-Jul-18",
      "Publication Year": 2018,
      "Volume": null,
      "Issue": null,
      "Start Page": 399,
      "End Page": 414,
      "Abstract": "Advances in machine learning (ML) in recent years have enabled a dizzying array of applications such as data analytics, autonomous systems, and security diagnostics. ML is now pervasive-new systems and models are being deployed in every domain imaginable, leading to widespread deployment of software based inference and decision making. There is growing recognition that ML exposes new vulnerabilities in software systems, yet the technical community's understanding of the nature and extent of these vulnerabilities remains limited. We systematize findings on ML security and privacy, focusing on attacks identified on these systems and defenses crafted to date.We articulate a comprehensive threat model for ML, and categorize attacks and defenses within an adversarial framework. Key insights resulting from works both in the ML and security communities are identified and the effectiveness of approaches are related to structural elements of ML algorithms and the data used to train them. In particular, it is apparent that constructing a theoretical understanding of the sensitivity of modern ML algorithms to the data they analyze, √† la PAC theory, will foster a science of security and privacy in ML.",
      "ISSN": "",
      "ISBNs": "978-1-5386-4228-3",
      "DOI": "10.1109/EuroSP.2018.00035",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8406613",
      "Author Keywords": "security;privacy;machine learning",
      "IEEE Terms": "Security;Machine learning;Data models;Training;Privacy;Computational modeling;Analytical models",
      "Mesh_Terms": "",
      "Article Citation Count": 225,
      "Patent Citation Count": 1,
      "Reference Count": 115,
      "License": "IEEE",
      "Online Date": "9-Jul-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Detecting False Data Injection Attacks in Peer to Peer Energy Trading Using Machine Learning",
      "Authors": "S. Mohammadi; F. Eliassen; Y. Zhang; H. -A. Jacobsen",
      "Author Affiliations": "Department of Informatics, University of Oslo, Oslo, Norway; Department of Informatics, University of Oslo, Oslo, Norway; Department of Informatics, University of Oslo, Oslo, Norway; Faculty of Applied Science & Engineering, University of Toronto, Toronto, ON, Canada",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "31-Aug-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 5,
      "Start Page": 3417,
      "End Page": 3431,
      "Abstract": "In peer-to-peer (P2P) energy trading, the incorporation of distributed energy resources with unprotected data, originating from sources such as home energy management systems that are connected through the Internet, provokes vulnerabilities that can manifest security breaches. In this article, two threat scenarios based on a novel false data injection attack (FDIA) model in a local P2P energy trading system are explored. In these scenarios, an attacker gains free energy by manipulating prosumers‚Äô consumption and demand. Precise and fast attack detection is needed to guarantee suitable countermeasures to prevent potential risks. We propose a novel instance-based machine learning (ML) classifier for detecting FDIAs. In contrast to black-box ML models, our algorithm provides a transparent decision-making procedure with significant predictive performance. We apply our detection model to a real-world dataset from Austin, Texas. Our experimental results show superior performance as compared to several popular interpretable and non-interpretable ML methods. On average, we achieve a 96.10 percent detection rate, a 96.18 percent accuracy rate, and a false negative rate of 1.97 percent with our approach.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2021.3096213",
      "Funding Information": "Norges Forskningsr√•d(grant numbers:267967,287412); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9483661",
      "Author Keywords": "False data injection;local P2P energy trading;prosumer;smart grid;false data injection attack detection;interpretable machine learning",
      "IEEE Terms": "Games;Machine learning;Security;Data models;Economics;Convergence;Support vector machines",
      "Mesh_Terms": "",
      "Article Citation Count": 9,
      "Patent Citation Count": null,
      "Reference Count": 42,
      "License": "IEEE",
      "Online Date": "13-Jul-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Mitch: A Machine Learning Approach to the Black-Box Detection of CSRF Vulnerabilities",
      "Authors": "S. Calzavara; M. Conti; R. Focardi; A. Rabitti; G. Tolomei",
      "Author Affiliations": "Universit√† Ca‚Äô Foscari; Universit√† di Padova; Universit√† Ca‚Äô Foscari; Universit√† Ca‚Äô Foscari; Universit√† di Padova",
      "Publication Title": "2019 IEEE European Symposium on Security and Privacy (EuroS&P)",
      "Date Added To Xplore": "22-Aug-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 528,
      "End Page": 543,
      "Abstract": "Cross-Site Request Forgery (CSRF) is one of the oldest and simplest attacks on the Web, yet it is still effective on many websites and it can lead to severe consequences, such as economic losses and account takeovers. Unfortunately, tools and techniques proposed so far to identify CSRF vulnerabilities either need manual reviewing by human experts or assume the availability of the source code of the web application. In this paper we present Mitch, the first machine learning solution for the black-box detection of CSRF vulnerabilities. At the core of Mitch there is an automated detector of sensitive HTTP requests, i.e., requests which require protection against CSRF for security reasons. We trained the detector using supervised learning techniques on a dataset of 5,828 HTTP requests collected on popular websites, which we make available to other security researchers. Our solution outperforms existing detection heuristics proposed in the literature, allowing us to identify 35 new CSRF vulnerabilities on 20 major websites and 3 previously undetected CSRF vulnerabilities on production software already analyzed using a state-of-the-art tool.",
      "ISSN": "",
      "ISBNs": "978-1-7281-1148-3",
      "DOI": "10.1109/EuroSP.2019.00045",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8806728",
      "Author Keywords": "Cross site request forgery;Machine learning;Web security",
      "IEEE Terms": "Security;Tools;Browsers;Forgery;Machine learning;Manuals;Task analysis",
      "Mesh_Terms": "",
      "Article Citation Count": 14,
      "Patent Citation Count": null,
      "Reference Count": 38,
      "License": "IEEE",
      "Online Date": "22-Aug-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Effective Machine Learning-based Access Control Administration through Unlearning",
      "Authors": "J. M. Llamas; D. Preuveneers; W. Joosen",
      "Author Affiliations": "imec-DistriNet, KU Leuven, Leuven, Belgium; imec-DistriNet, KU Leuven, Leuven, Belgium; imec-DistriNet, KU Leuven, Leuven, Belgium",
      "Publication Title": "2023 IEEE European Symposium on Security and Privacy Workshops (EuroS&PW)",
      "Date Added To Xplore": "31-Jul-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 50,
      "End Page": 57,
      "Abstract": "With the rapid and increasing complexity of computer systems and software, there is a need for more effective, scalable, and secure access control methods. Machine learning (ML) has gained popularity in complementing manually crafted authorisation policies in such environments. However, given the dynamic and constantly evolving nature of software and access control systems, the administration of the latter presents a significant security challenge. This paper examines the administration problem of Machine Learning-based Access Control (MLBAC) systems through Machine Unlearning as a lightweight and secure method. More specifically, we explore this problem through exact and approximate unlearning and evaluate its impact using real-world data. We demonstrate the effectiveness of Machine Unlearning in both reverting policies and addressing potential vulnerabilities that may emerge during the model‚Äôs lifecycle. Compared to alternative options such as retraining from scratch, our approach reduces deployment and verification costs, making it a promising solution for MLBAC administration.",
      "ISSN": "2768-0657",
      "ISBNs": "979-8-3503-2720-5",
      "DOI": "10.1109/EuroSPW59978.2023.00011",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10190682",
      "Author Keywords": "machine learning;machine unlearning;administration;access control;security",
      "IEEE Terms": "Authorization;Costs;Machine learning;Software;Data models;Complexity theory;Behavioral sciences",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 33,
      "License": "IEEE",
      "Online Date": "31-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "xFuzz: Machine Learning Guided Cross-Contract Fuzzing",
      "Authors": "Y. Xue; J. Ye; W. Zhang; J. Sun; L. Ma; H. Wang; J. Zhao",
      "Author Affiliations": "University of Science and Technology of China, Hefei, Anhui, China; Kyushu University, Fukuoka, Japan; University of Science and Technology of China, Hefei, Anhui, China; Singapore Management University, Singapore; University of Alberta, Alberta Machine Intelligence Institute, Edmonton, AB, Canada; Nanyang Technological University, Singapore; Kyushu University, Fukuoka, Japan",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "13-Mar-24",
      "Publication Year": 2024,
      "Volume": 21,
      "Issue": 2,
      "Start Page": 515,
      "End Page": 529,
      "Abstract": "Smart contract transactions are increasingly interleaved by cross-contract calls. While many tools have been developed to identify a common set of vulnerabilities, the cross-contract vulnerability is overlooked by existing tools. Cross-contract vulnerabilities are exploitable bugs that manifest in the presence of more than two interacting contracts. Existing methods are however limited to analyze a maximum of two contracts at the same time. Detecting cross-contract vulnerabilities is highly non-trivial. With multiple interacting contracts, the search space is much larger than that of a single contract. To address this problem, we present xFuzz, a machine learning guided smart contract fuzzing framework. The machine learning models are trained with novel features (e.g., word vectors and instructions) and are used to filter likely benign program paths. Comparing with existing static tools, machine learning model is proven to be more robust, avoiding directly adopting manually-defined rules in specific tools. We compare xFuzz with three state-of-the-art tools on 7,391 contracts. xFuzz detects 18 exploitable cross-contract vulnerabilities, of which 15 vulnerabilities are exposed for the first time. Furthermore, our approach is shown to be efficient in detecting non-cross-contract vulnerabilities as well‚Äîusing less than 20% time as that of other fuzzing tools, xFuzz detects twice as many vulnerabilities.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2022.3182373",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:61972373); Basic Research Program of Jiangsu Province(grant numbers:BK20201192); National Research Foundation Singapore; NSoE Programme(grant numbers:NSOE-TSS2019-03); CAS Pioneer Hundred Talents Program of China; Canada CIFAR AI Chairs Program; Amii RAP Program; Natural Sciences and Engineering Research Council of Canada(grant numbers:RGPIN-2021-02549,RGPAS-2021-00034,DGECR-2021-00019); JSPS KAKENHI(grant numbers:JP20H04168,JP21H04877); JST-Mirai Program(grant numbers:JPMJMI20B8); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9795233",
      "Author Keywords": "Cross-contract vulnerability;fuzzing;machine learning;smart contract",
      "IEEE Terms": "Smart contracts;Fuzzing;Machine learning;Security;Codes;Engines;Training",
      "Mesh_Terms": "",
      "Article Citation Count": 14,
      "Patent Citation Count": null,
      "Reference Count": 56,
      "License": "IEEE",
      "Online Date": "13-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Hybrid Solution for Constrained Devices to Detect Microarchitectural Attacks",
      "Authors": "N. -F. Polychronou; P. -H. Thevenon; M. Puys; V. Beroulle",
      "Author Affiliations": "Univ. Grenoble Alpes, CEA, LETI, DSYS, LSES, Grenoble, France; Univ. Grenoble Alpes, CEA, LETI, DSYS, LSES, Grenoble, France; Univ. Grenoble Alpes, CEA, LETI, DSYS, LSES, Grenoble, France; Univ. Grenoble Alpes, Grenoble-INP, LCIS, Grenoble, France",
      "Publication Title": "2023 IEEE European Symposium on Security and Privacy Workshops (EuroS&PW)",
      "Date Added To Xplore": "31-Jul-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 259,
      "End Page": 269,
      "Abstract": "We are seeing an increase in cybersecurity attacks on resource-constrained systems such as the Internet of Things (IoT) and Industrial IoT (I-IoT) devices. Recently, a new category of attacks has emerged called microarchitectural attacks. It targets hardware units of the system such as the processor or memory and is often complicated if not impossible to remediate since it imposes modifying the hardware. In default of remediation, some solutions propose to detect these attacks. Yet, most of them are not suitable for embedded systems since they are based on complex machine learning algorithms.In this paper, we propose an edge-computing security solution for attack detection that uses a local-remote machine learning implementation to find an equilibrium between accuracy and decision-making latency while addressing the memory, performance, and communication bandwidth constraints of resource-constrained systems. We demonstrate effectiveness in the detection of multiple microarchitectural attacks such as Row hammer or cache attacks on an embedded device with an accuracy of 98.75% and a FPR near 0%. To limit the overhead on the communication bus, the proposed solution allows to locally classify as trusted 99% of the samples during normal operation and thus filtering them out.",
      "ISSN": "2768-0657",
      "ISBNs": "979-8-3503-2720-5",
      "DOI": "10.1109/EuroSPW59978.2023.00033",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10190668",
      "Author Keywords": "IoT;Security;HPCs;Edge-Computing;Local Remote Detection;Microarchitectural Attacks",
      "IEEE Terms": "Performance evaluation;Microarchitecture;Machine learning algorithms;Image edge detection;Bandwidth;Machine learning;Minimization",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 37,
      "License": "IEEE",
      "Online Date": "31-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Comments on ‚ÄúVERSA: Verifiable Secure Aggregation for Cross-Device Federated Learning‚Äù",
      "Authors": "F. Luo; H. Wang; X. Yan",
      "Author Affiliations": "College of Computer and Information Engineering, Zhejiang Gongshang University, Hangzhou, China; Department of New Networks, Peng Cheng Laboratory, Shenzhen, China; School of Computer Science, South China Normal University, Guangzhou, China",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "16-Jan-24",
      "Publication Year": 2024,
      "Volume": 21,
      "Issue": 1,
      "Start Page": 499,
      "End Page": 500,
      "Abstract": "Federated learning (FL) allows a large number of users to collaboratively train machine learning (ML) models by sending only their local gradients to a central server for aggregation in each training iteration, without sending their raw training data. The main security issues of FL, that is, the privacy of the gradient vector and the correctness verification of the aggregated gradient, are gaining increasing attention from industry and academia. To protect the privacy of the gradient, a secure aggregation was proposed; to verify the correctness of the aggregated gradient, a verifiable secure aggregation that requires the server to provide a verifiable aggregated gradient was proposed. In 2021, Hahn et al. proposed VERSA, a verifiable secure aggregation. However, in this article, we will point out a flaw in VERSA, which indicates that VERSA does not work. To address the flaw, we present several approaches with different advantages and disadvantages. We hope that by identifying the flaw, similar errors can be avoided in future designs of verifiable secure aggregation.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2023.3253082",
      "Funding Information": "PCL(grant numbers:PCL2022A03); Guangxi Natural Science Foundation(grant numbers:2022GXNSFBA035650); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10061268",
      "Author Keywords": "Federated learning;machine learning;privacy-preserving;verifiable secure aggregation",
      "IEEE Terms": "Servers;Protocols;Security;Privacy;Federated learning;Public key;Data models",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 9,
      "License": "IEEE",
      "Online Date": "6-Mar-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Man-in-the-Middle Attacks Against Machine Learning Classifiers Via Malicious Generative Models",
      "Authors": "D. Wang; C. Li; S. Wen; S. Nepal; Y. Xiang",
      "Author Affiliations": "School of Software and Electrical Engineering, Swinburne University of Technology, Hawthorn, VIC, Australia; School of Software and Electrical Engineering, Swinburne University of Technology, Hawthorn, VIC, Australia; CSIRO's Data 61, North Ryde, NSW, Australia; School of Software and Electrical Engineering, Swinburne University of Technology, Hawthorn, VIC, Australia; CSIRO's Data 61, North Ryde, NSW, Australia",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "31-Aug-21",
      "Publication Year": 2021,
      "Volume": 18,
      "Issue": 5,
      "Start Page": 2074,
      "End Page": 2087,
      "Abstract": "Deep Neural Networks (DNNs) are vulnerable to deliberately crafted adversarial examples. In the past few years, many efforts have been spent on exploring query-optimisation attacks to find adversarial examples of either black-box or white-box DNN models, as well as the defending countermeasures against those attacks. In this article, we explore vulnerabilities of DNN models under the umbrella of Man-in-the-Middle (MitM) attacks, which have not been investigated before. From the perspective of an MitM adversary, the aforementioned adversarial example attacks are not viable anymore. First, such attacks must acquire the outputs from the models multiple times before actually launching attacks, which is difficult for the MitM adversary in practice. Second, such attacks are one-off and cannot be directly generalised onto new data examples, which decreases the rate of return for the attacker. In contrast, using generative models to craft adversarial examples on the fly can mitigate the drawbacks. However, the adversarial capability of the generative models, such as Variational Auto-Encoder (VAE), has not been extensively studied. Therefore, given a classifier, we investigate using a VAE decoder to either transform benign inputs to their adversarial counterparts or decode outputs from benign VAE encoders to be adversarial examples. The proposed method can endue more capability to MitM attackers. Based on our evaluation, the proposed attack can achieve above 95 percent success rates on both MNIST and CIFAR10 datasets, which is better or comparable with state-of-the-art query-optimisation attacks. In the meantime, the attack is 104 times faster than the query-optimisation attacks.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2020.3021008",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9183938",
      "Author Keywords": "Deep neural network;adversarial example;security",
      "IEEE Terms": "Decoding;Optimization;Computational modeling;Gallium nitride;Machine learning;Transforms;Task analysis",
      "Mesh_Terms": "",
      "Article Citation Count": 10,
      "Patent Citation Count": null,
      "Reference Count": 47,
      "License": "IEEE",
      "Online Date": "1-Sep-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "CBA-Detector: A Self-Feedback Detector Against Cache-Based Attacks",
      "Authors": "B. Zheng; J. Gu; J. Wang; C. Weng",
      "Author Affiliations": "East China Normal University, Shanghai, China; East China Normal University, Shanghai, China; East China Normal University, Shanghai, China; East China Normal University, Shanghai, China",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "31-Aug-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 5,
      "Start Page": 3231,
      "End Page": 3243,
      "Abstract": "Cloud computing is convenient to provide adequate resources for tenants. However, since multiple tenants share the underlying hardware resources, malicious tenants can use the shared processor to launch cache-based attacks. Such attacks can help malicious tenants steal private data of other tenants bypassing isolation mechanisms provided by the system, resulting in information leakage. Moreover, Spectre and Meltdown vulnerabilities can even extract memory contents arbitrarily with the help of cache attacks. Therefore, cache-based attacks pose a serious threat to the security of cloud platforms. To defeat such attacks, many detection methods have been proposed. However, most methods induce high false positives because they completely rely on the hardware performance counters (HPCs) and detect attacks with static criteria. To solve this problem, this article proposes a self-feedback detector named CBA-Detector to detect cache-based attacks in real time. Specifically, CBA-Detector first uses machine learning technologies to create models for identifying suspicious programs with abnormal hardware behaviors, then analyzes suspicious programs from the instruction level to identify real attacks and provide feedback. Based on the feedback, the models can be updated to further improve their detection accuracy. As our experiments show, CBA-Detector can accurately identify cache-based attacks in real time and introduces a little overhead. Besides, the misjudgment rate decreases with the running time.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2021.3089882",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:61772204,61732014); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9457125",
      "Author Keywords": "Cache-based side-channel attacks;self-feedback;false positives;machine learning",
      "IEEE Terms": "Hardware;Real-time systems;Machine learning;Detectors;Side-channel attacks;Time measurement;Decision trees",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 36,
      "License": "IEEE",
      "Online Date": "16-Jun-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Yes, Machine Learning Can Be More Secure! A Case Study on Android Malware Detection",
      "Authors": "A. Demontis; M. Melis; B. Biggio; D. Maiorca; D. Arp; K. Rieck; I. Corona; G. Giacinto; F. Roli",
      "Author Affiliations": "Department of Electrical and Electronic Engineering, University of Cagliari, Piazza d'Armi, Cagliari, Italy; Department of Electrical and Electronic Engineering, University of Cagliari, Piazza d'Armi, Cagliari, Italy; Department of Electrical and Electronic Engineering, University of Cagliari, Piazza d'Armi, Cagliari, Italy; Department of Electrical and Electronic Engineering, University of Cagliari, Piazza d'Armi, Cagliari, Italy; Institute of System Security, Technische Universit√§t Braunschweig, Rebenring 56, Braunschweig, Germany; Institute of System Security, Technische Universit√§t Braunschweig, Rebenring 56, Braunschweig, Germany; Department of Electrical and Electronic Engineering, University of Cagliari, Piazza d'Armi, Cagliari, Italy; Department of Electrical and Electronic Engineering, University of Cagliari, Piazza d'Armi, Cagliari, Italy; Department of Electrical and Electronic Engineering, University of Cagliari, Piazza d'Armi, Cagliari, Italy",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "9-Jul-19",
      "Publication Year": 2019,
      "Volume": 16,
      "Issue": 4,
      "Start Page": 711,
      "End Page": 724,
      "Abstract": "To cope with the increasing variability and sophistication of modern attacks, machine learning has been widely adopted as a statistically-sound tool for malware detection. However, its security against well-crafted attacks has not only been recently questioned, but it has been shown that machine learning exhibits inherent vulnerabilities that can be exploited to evade detection at test time. In other words, machine learning itself can be the weakest link in a security system. In this paper, we rely upon a previously-proposed attack framework to categorize potential attack scenarios against learning-based malware detection tools, by modeling attackers with different skills and capabilities. We then define and implement a set of corresponding evasion attacks to thoroughly assess the security of Drebin, an Android malware detector. The main contribution of this work is the proposal of a simple and scalable secure-learning paradigm that mitigates the impact of evasion attacks, while only slightly worsening the detection rate in the absence of attack. We finally argue that our secure-learning approach can also be readily applied to other malware detection tasks.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2017.2700270",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7917369",
      "Author Keywords": "Android malware detection;static analysis;secure machine learning;computer security",
      "IEEE Terms": "Androids;Humanoid robots;Malware;Security;Feature extraction;Tools;Algorithm design and analysis",
      "Mesh_Terms": "",
      "Article Citation Count": 139,
      "Patent Citation Count": null,
      "Reference Count": 50,
      "License": "IEEE",
      "Online Date": "2-May-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Enhancing Vulnerability Prioritization: Data-Driven Exploit Predictions with Community-Driven Insights",
      "Authors": "J. Jacobs; S. Romanosky; O. Suciu; B. Edwards; A. Sarabi",
      "Author Affiliations": "Cyentia Institute; RAND Corporation; University of Maryland; Cyentia Institute; University of Michigan",
      "Publication Title": "2023 IEEE European Symposium on Security and Privacy Workshops (EuroS&PW)",
      "Date Added To Xplore": "31-Jul-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 194,
      "End Page": 206,
      "Abstract": "The number of disclosed vulnerabilities has been steadily increasing over the years. At the same time, organizations face significant challenges patching their systems, leading to a need to prioritize vulnerability remediation in order to reduce the risk of attacks. Unfortunately, existing vulnerability scoring systems are either vendor-specific, proprietary, or are only commercially available. Moreover, these and other prioritization strategies based on vulnerability severity are poor predictors of actual vulnerability exploitation because they do not incorporate new information that might impact the likelihood of exploitation. In this paper we present the efforts behind building a Special Interest Group (SIG) that seeks to develop a completely data-driven exploit scoring system that produces scores for all known vulnerabilities, that is freely available, and which adapts to new information. The Exploit Prediction Scoring System (EPSS) SIG consists of more than 170 experts from around the world and across all industries, providing crowd-sourced expertise and feedback. Based on these collective insights, we describe the design decisions and trade-offs that lead to the development of the next version of EPSS. This new machine learning model provides an 82% performance improvement over past models in distinguishing vulnerabilities that are exploited in the wild and thus may be prioritized for remediation.",
      "ISSN": "2768-0657",
      "ISBNs": "979-8-3503-2720-5",
      "DOI": "10.1109/EuroSPW59978.2023.00027",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10190703",
      "Author Keywords": "vulnerability prioritization;exploit prediction;vulnerabilities;exploits;machine learning",
      "IEEE Terms": "Industries;Soft sensors;Current measurement;Machine learning;Organizations;Predictive models;Size measurement",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 43,
      "License": "IEEE",
      "Online Date": "31-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Fault Injection Analytics: A Novel Approach to Discover Failure Modes in Cloud-Computing Systems",
      "Authors": "D. Cotroneo; L. De Simone; P. Liguori; R. Natella",
      "Author Affiliations": "Computer and System Engineering, University of Naples federico II, Naples, Italy; Information Technology and Electrical Engineering, University of Naples Federico II, Naples, Italy; University of Naples Federico II, Napoli, Italy; University of Naples Federico II, Napoli, Italy",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "12-May-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 3,
      "Start Page": 1476,
      "End Page": 1491,
      "Abstract": "Cloud computing systems fail in complex and unexpected ways due to unexpected combinations of events and interactions between hardware and software components. Fault injection is an effective means to bring out these failures in a controlled environment. However, fault injection experiments produce massive amounts of data, and manually analyzing these data is inefficient and error-prone, as the analyst can miss severe failure modes that are yet unknown. This article introduces a new paradigm (fault injection analytics) that applies unsupervised machine learning on execution traces of the injected system, to ease the discovery and interpretation of failure modes. We evaluated the proposed approach in the context of fault injection experiments on the OpenStack cloud computing platform, where we show that the approach can accurately identify failure modes with a low computational cost.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2020.3025289",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9201357",
      "Author Keywords": "Fault injection;failure mode analysis;cloud computing;openstack;unsupervised machine learning",
      "IEEE Terms": "Anomaly detection;Cloud computing;Machine learning;Instruments;Training;Hardware;Software",
      "Mesh_Terms": "",
      "Article Citation Count": 11,
      "Patent Citation Count": null,
      "Reference Count": 86,
      "License": "IEEE",
      "Online Date": "21-Sep-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Byzantine-Resilient Multi-Agent System",
      "Authors": "R. Guerraoui; A. Maurer",
      "Author Affiliations": "Computer Science, Swiss Federal Institute of Technology Lausanne, Lausanne, Switzerland; SCCS, UM6P, Ben Guerir, Morocco",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "10-Nov-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 6,
      "Start Page": 4032,
      "End Page": 4038,
      "Abstract": "We consider the problem of making a multi-agent system (MAS) resilient to Byzantine failures through replication. We consider a very general model of MAS, where randomness can be involved in the behavior of each agent. We propose the first universal scheme to make such a MAS Byzantine-resilient.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2021.3116488",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9552535",
      "Author Keywords": "Distributed systems;fault tolerance;reliability and robustness",
      "IEEE Terms": "Multi-agent systems;Machine learning;Clustering algorithms;Clocks;Probabilistic logic;Machine learning algorithms;Cryptography",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 34,
      "License": "IEEE",
      "Online Date": "29-Sep-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Vulnerability Detection on Mobile Applications Using State Machine Inference",
      "Authors": "W. van der Lee; S. Verwer",
      "Author Affiliations": "Department of Intelligent Systems, Delft University of Technology, The Netherlands; Department of Intelligent Systems, Delft University of Technology, The Netherlands",
      "Publication Title": "2018 IEEE European Symposium on Security and Privacy Workshops (EuroS&PW)",
      "Date Added To Xplore": "9-Jul-18",
      "Publication Year": 2018,
      "Volume": null,
      "Issue": null,
      "Start Page": 1,
      "End Page": 10,
      "Abstract": "Although the importance of mobile applications grows every day, recent vulnerability reports argue the application's deficiency to meet modern security standards. Testing strategies alleviate the problem by identifying security violations in software implementations. This paper proposes a novel testing methodology that applies state machine learning of mobile Android applications in combination with algorithms that discover attack paths in the learned state machine. The presence of an attack path evidences the existence of a vulnerability in the mobile application. We apply our methods to real-life apps and show that the novel methodology is capable of identifying vulnerabilities.",
      "ISSN": "",
      "ISBNs": "978-1-5386-5445-3",
      "DOI": "10.1109/EuroSPW.2018.00008",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8406555",
      "Author Keywords": "state machine learning;mobile application security;vulnerability detection;model inference",
      "IEEE Terms": "Testing;Mobile applications;Androids;Humanoid robots;Security;Inference algorithms;Machine learning",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 21,
      "License": "IEEE",
      "Online Date": "9-Jul-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Improving the Accuracy of IR-Level Fault Injection",
      "Authors": "L. Palazzi; G. Li; B. Fang; K. Pattabiraman",
      "Author Affiliations": "Electrical and Computer Engineering, The University of British Columbia, Vancouver, British Columbia, Canada; Electrical and Computer Engineering, The University of British Columbia, Vancouver, British Columbia, Canada; Electrical and Computer Engineering, The University of British Columbia, Vancouver, British Columbia, Canada; Electrical and Computer Engineering, The University of British Columbia, Vancouver, British Columbia, Canada",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "14-Jan-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 1,
      "Start Page": 243,
      "End Page": 258,
      "Abstract": "Fault injection (FI) is a commonly used experimental technique to evaluate the resilience of software techniques for tolerating hardware faults. Software-implemented FI can be performed at different levels of abstraction in the system stack; FI performed at the compiler‚Äôs intermediate representation (IR) level has the advantage that it is closer to the program being evaluated and is hence easier to derive insights from for the design of software fault-tolerance mechanisms. Unfortunately, it is not clear how accurate IR-level FI is vis-a-vis FI performed at the assembly code level, and prior work has presented contradictory findings. In this article, we perform a comprehensive evaluation of the accuracy of IR-level FI across a range of benchmark programs and compiler optimization levels. Our results show that IR-level FI is as accurate as assembly-level FI for silent data corruption (SDC) probability estimation across different benchmarks and optimization levels. Further, we present a machine-learning-based technique for improving the accuracy of <italic>crash</italic> probability measurements made by IR-level FI, which takes advantage of an observed correlation between program crash probabilities and instructions that operate on memory address values. We find that the machine learning technique provides comparable accuracy for IR-level FI as assembly code level FI for program crashes.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2020.2980273",
      "Funding Information": "Natural Sciences and Engineering Research Council of Canada; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9035448",
      "Author Keywords": "Resilience;fault injection;IR-level fault injection;intermediate representation;machine learning;LLVM;PIN",
      "IEEE Terms": "Computer crashes;Hardware;Optimization;Program processors;Registers;Tools",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 59,
      "License": "IEEE",
      "Online Date": "13-Mar-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Fault Injection for TensorFlow Applications",
      "Authors": "N. Narayanan; Z. Chen; B. Fang; G. Li; K. Pattabiraman; N. DeBardeleben",
      "Author Affiliations": "University of British Columbia, Vancouver, BC, Canada; University of British Columbia, Vancouver, BC, Canada; Pacific Northwest National Laboratory, Richland, WA, USA; University of Iowa, Iowa, IA, USA; University of British Columbia, Vancouver, BC, Canada; Los Alamos National Laboratory, New Mexico, USA",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "10-Jul-23",
      "Publication Year": 2023,
      "Volume": 20,
      "Issue": 4,
      "Start Page": 2677,
      "End Page": 2695,
      "Abstract": "As machine learning (ML) has seen increasing adoption in safety-critical domains (e.g., autonomous vehicles), the reliability of ML systems has also grown in importance. While prior studies have proposed techniques to enable efficient error-resilience (e.g., selective instruction duplication), a fundamental requirement for realizing these techniques is a detailed understanding of the application's resilience. In this work, we present TensorFI 1 and TensorFI 2, high-level fault injection (FI) frameworks for TensorFlow-based applications. TensorFI 1 and 2 are able to inject both hardware and software faults in any general TensorFlow 1 and 2 program respectively. Both are configurable FI tools that are flexible, easy to use, and portable. They can be integrated into existing TensorFlow programs to assess their resilience for different fault types (e.g., bit-flips in particular operations or layers). We use TensorFI 1 and TensorFI 2 to evaluate the resilience of 11 and 10 ML programs respectively, all written in TensorFlow, including DNNs used in the autonomous vehicle domain. The results give us insights into why some of the models are more resilient. We also measure the performance overheads of the two injectors, and present 4 case studies, two for each tool, to demonstrate their utility.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2022.3175930",
      "Funding Information": "Natural Sciences and Engineering Research Council of Canada; Huawei Corporation; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9831186",
      "Author Keywords": "Deep neural networks;error resilience;fault injection;machine learning;TensorFlow",
      "IEEE Terms": "Resilience;Software;Reliability;Hardware;Data models;Computational modeling;Safety",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 45,
      "License": "IEEE",
      "Online Date": "18-Jul-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "ATVSA: Vehicle Driver Profiling for Situational Awareness",
      "Authors": "R. Khan; N. Saxena; O. Rana; P. Gope",
      "Author Affiliations": "School of Computer Science and Informatics, Cardiff University, Cardiff, United Kingdom; School of Computer Science and Informatics, Cardiff University, Cardiff, United Kingdom; School of Computer Science and Informatics, Cardiff University, Cardiff, United Kingdom; Department of Computer Science, University of Sheffield, Sheffield, United Kingdom",
      "Publication Title": "2022 IEEE European Symposium on Security and Privacy Workshops (EuroS&PW)",
      "Date Added To Xplore": "27-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 348,
      "End Page": 357,
      "Abstract": "Increasing connectivity and automation in vehicles leads to a greater potential attack surface. Such vulnerabilities within vehicles can also be used for auto-theft, increasing the potential for attackers to disable anti-theft mechanisms implemented by vehicle manufacturers. We utilize patterns derived from Controller Area Network (CAN) bus traffic to verify driver ‚Äúbehavior‚Äù, as a basis to prevent vehicle theft. Our proposed model uses semi-supervised learning that continuously profiles a driver, using features extracted from CAN bus traffic. We have selected 15 key features and obtained an accuracy of 99% using a dataset comprising a total of 51 features across 10 different drivers. We use a number of data analysis algorithms, such as J48, Random Forest, JRip and clustering, using 94K records. Our results show that J48 is the best performing algorithm in terms of training and testing (1.95 seconds and 0.44 seconds recorded, respectively). We also analyze the effect of using a sliding window on algorithm performance, altering the size of the window to identify the impact on prediction accuracy.",
      "ISSN": "2768-0657",
      "ISBNs": "978-1-6654-9560-8",
      "DOI": "10.1109/EuroSPW55150.2022.00042",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9799292",
      "Author Keywords": "Anti-theft;driver profiling;situational awareness;security;vehicle",
      "IEEE Terms": "Training;Clustering algorithms;Semisupervised learning;Feature extraction;Prediction algorithms;Classification algorithms;Unsupervised learning",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 39,
      "License": "IEEE",
      "Online Date": "27-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "The Limitations of Deep Learning in Adversarial Settings",
      "Authors": "N. Papernot; P. McDaniel; S. Jha; M. Fredrikson; Z. B. Celik; A. Swami",
      "Author Affiliations": "Department of Computer Science and Engineering, Penn State University; Department of Computer Science and Engineering, Penn State University; Department of Computer Science and Engineering, Penn State University; Computer Sciences Department, University of Wisconsin-Madison; Department of Computer Science and Engineering, Penn State University; United States Army Research Laboratory, Adelphi, Maryland",
      "Publication Title": "2016 IEEE European Symposium on Security and Privacy (EuroS&P)",
      "Date Added To Xplore": "12-May-16",
      "Publication Year": 2016,
      "Volume": null,
      "Issue": null,
      "Start Page": 372,
      "End Page": 387,
      "Abstract": "Deep learning takes advantage of large datasets and computationally efficient training algorithms to outperform other approaches at various machine learning tasks. However, imperfections in the training phase of deep neural networks make them vulnerable to adversarial samples: inputs crafted by adversaries with the intent of causing deep neural networks to misclassify. In this work, we formalize the space of adversaries against deep neural networks (DNNs) and introduce a novel class of algorithms to craft adversarial samples based on a precise understanding of the mapping between inputs and outputs of DNNs. In an application to computer vision, we show that our algorithms can reliably produce samples correctly classified by human subjects but misclassified in specific targets by a DNN with a 97% adversarial success rate while only modifying on average 4.02% of the input features per sample. We then evaluate the vulnerability of different sample classes to adversarial perturbations by defining a hardness measure. Finally, we describe preliminary work outlining defenses against adversarial samples by defining a predictive measure of distance between a benign input and a target classification.",
      "ISSN": "",
      "ISBNs": "978-1-5090-1752-2",
      "DOI": "10.1109/EuroSP.2016.36",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7467366",
      "Author Keywords": "",
      "IEEE Terms": "Neurons;Training;Machine learning;Biological neural networks;Distortion;Force",
      "Mesh_Terms": "",
      "Article Citation Count": 1820,
      "Patent Citation Count": 7,
      "Reference Count": 37,
      "License": "IEEE",
      "Online Date": "12-May-16",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Web Application Vulnerability Prediction Using Hybrid Program Analysis and Machine Learning",
      "Authors": "L. K. Shar; L. C. Briand; H. B. K. Tan",
      "Author Affiliations": "Interdisciplinary Centre for ICT Security, Reliability and Trust, 4 rue Alphonse Weicker, Luxembourg; Interdisciplinary Centre for ICT Security, Reliability and Trust, 4 rue Alphonse Weicker, Luxembourg; Department of Information Engineering, Nanyang Avenue, Singapore",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "9-Nov-15",
      "Publication Year": 2015,
      "Volume": 12,
      "Issue": 6,
      "Start Page": 688,
      "End Page": 707,
      "Abstract": "Due to limited time and resources, web software engineers need support in identifying vulnerable code. A practical approach to predicting vulnerable code would enable them to prioritize security auditing efforts. In this paper, we propose using a set of hybrid (static+dynamic) code attributes that characterize input validation and input sanitization code patterns and are expected to be significant indicators of web application vulnerabilities. Because static and dynamic program analyses complement each other, both techniques are used to extract the proposed attributes in an accurate and scalable way. Current vulnerability prediction techniques rely on the availability of data labeled with vulnerability information for training. For many real world applications, past vulnerability data is often not available or at least not complete. Hence, to address both situations where labeled past data is fully available or not, we apply both supervised and semi-supervised learning when building vulnerability predictors based on hybrid code attributes. Given that semi-supervised learning is entirely unexplored in this domain, we describe how to use this learning scheme effectively for vulnerability prediction. We performed empirical case studies on seven open source projects where we built and evaluated supervised and semi-supervised models. When cross validated with fully available labeled data, the supervised models achieve an average of 77 percent recall and 5 percent probability of false alarm for predicting SQL injection, cross site scripting, remote code execution and file inclusion vulnerabilities. With a low amount of labeled data, when compared to the supervised model, the semi-supervised model showed an average improvement of 24 percent higher recall and 3 percent lower probability of false alarm, thus suggesting semi-supervised learning may be a preferable solution for many real world applications where vulnerability data is missing.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2014.2373377",
      "Funding Information": "National Research Fund, Luxembourg(grant numbers:FNR/P10/03); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6963442",
      "Author Keywords": "Vulnerability prediction;security measures;input validation and sanitization;program analysis;empirical study;Vulnerability prediction;security measures;input validation and sanitization;program analysis;empirical study",
      "IEEE Terms": "Computer security;Data models;Semisupervised learning;HTML;Servers;Software protection;Predictive models",
      "Mesh_Terms": "",
      "Article Citation Count": 88,
      "Patent Citation Count": 1,
      "Reference Count": 51,
      "License": "IEEE",
      "Online Date": "20-Nov-14",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Monitoring-Based Differential Privacy Mechanism Against Query Flooding-Based Model Extraction Attack",
      "Authors": "H. Yan; X. Li; H. Li; J. Li; W. Sun; F. Li",
      "Author Affiliations": "State Key Laboratory of Integrated Services Networks, School of Cyber Engineering, Xidian University, Xi'an, China; State Key Laboratory of Integrated Services Networks, School of Cyber Engineering, Xidian University, Xi'an, China; State Key Laboratory of Integrated Services Networks, School of Cyber Engineering, Xidian University, Xi'an, China; State Key Laboratory of Integrated Services Networks, School of Cyber Engineering, Xidian University, Xi'an, China; Department of Computer and Information Technology, Purdue University, West Lafayette, IN, USA; State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academic of Sciences, Beijing, China",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "8-Jul-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 4,
      "Start Page": 2680,
      "End Page": 2694,
      "Abstract": "Public intelligent services enabled by machine learning algorithms are vulnerable to model extraction attacks that can steal confidential information of the learning models through public queries. Though there are some protection options such as differential privacy (DP) and monitoring, which are considered promising techniques to mitigate this attack, we still find that the vulnerability persists. In this article, we propose an adaptive query-flooding parameter duplication (QPD) attack. The adversary can infer the model information with black-box access and no prior knowledge of any model parameters or training data via QPD. We also develop a defense strategy using DP called monitoring-based DP (MDP) against this new attack. In MDP, we first propose a novel real-time model extraction status assessment scheme called Monitor to evaluate the situation of the model. Then, we design a method to guide the differential privacy budget allocation called APBA adaptively. Finally, all DP-based defenses with MDP could dynamically adjust the amount of noise added in the model response according to the result from Monitor and effectively defends the QPD attack. Furthermore, we thoroughly evaluate and compare the QPD attack and MDP defense performance on real-world models with DP and monitoring protection.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2021.3069258",
      "Funding Information": "Fundamental Research Funds for the Central Universities; Innovation Fund of Xidian University(grant numbers:19151110473); Purdue University; China Scholarship Council(grant numbers:201906960075); National Natural Science Foundation of China(grant numbers:61932015); National Key R&D Project(grant numbers:2017YFB0802203); Shaanxi Innovation Team Project(grant numbers:2018TD-007); Higher Education Discipline Innovation Project(grant numbers:B16037); National Natural Science Foundation of China(grant numbers:U1836203); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9389670",
      "Author Keywords": "Machine learning;model extraction attack;extraction status assessment;differential privacy;privacy budget allocation",
      "IEEE Terms": "Adaptation models;Privacy;Monitoring;Data models;Mathematical model;Training;Differential privacy",
      "Mesh_Terms": "",
      "Article Citation Count": 15,
      "Patent Citation Count": null,
      "Reference Count": 45,
      "License": "IEEE",
      "Online Date": "29-Mar-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "FairTest: Discovering Unwarranted Associations in Data-Driven Applications",
      "Authors": "F. Tram√®r; V. Atlidakis; R. Geambasu; D. Hsu; J. -P. Hubaux; M. Humbert; A. Juels; H. Lin",
      "Author Affiliations": "Stanford; Columbia University; Columbia University; Columbia University; EPFL; Saarland University; Cornell Tech, Jacobs Institute; EPFL",
      "Publication Title": "2017 IEEE European Symposium on Security and Privacy (EuroS&P)",
      "Date Added To Xplore": "3-Jul-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 401,
      "End Page": 416,
      "Abstract": "In a world where traditional notions of privacy are increasingly challenged by the myriad companies that collect and analyze our data, it is important that decision-making entities are held accountable for unfair treatments arising from irresponsible data usage. Unfortunately, a lack of appropriate methodologies and tools means that even identifying unfair or discriminatory effects can be a challenge in practice. We introduce the unwarranted associations (UA) framework, a principled methodology for the discovery of unfair, discriminatory, or offensive user treatment in data-driven applications. The UA framework unifies and rationalizes a number of prior attempts at formalizing algorithmic fairness. It uniquely combines multiple investigative primitives and fairness metrics with broad applicability, granular exploration of unfair treatment in user subgroups, and incorporation of natural notions of utility that may account for observed disparities. We instantiate the UA framework in FairTest, the first comprehensive tool that helps developers check data-driven applications for unfair user treatment. It enables scalable and statistically rigorous investigation of associations between application outcomes (such as prices or premiums) and sensitive user attributes (such as race or gender). Furthermore, FairTest provides debugging capabilities that let programmers rule out potential confounders for observed unfair effects. We report on use of FairTest to investigate and in some cases address disparate impact, offensive labeling, and uneven rates of algorithmic error in four data-driven applications. As examples, our results reveal subtle biases against older populations in the distribution of error in a predictive health application and offensive racial labeling in an image tagger.",
      "ISSN": "",
      "ISBNs": "978-1-5090-5762-7",
      "DOI": "10.1109/EuroSP.2017.29",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7961993",
      "Author Keywords": "Algorithmic Fairness;Systems;Statistics",
      "IEEE Terms": "Computer bugs;Measurement;Tools;Testing;Medical services;Google;Machine learning algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": 67,
      "Patent Citation Count": 1,
      "Reference Count": 59,
      "License": "IEEE",
      "Online Date": "3-Jul-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Sais: Self-Adaptive Identification of Security Bug Reports",
      "Authors": "S. Mostafa; B. Findley; N. Meng; X. Wang",
      "Author Affiliations": "Department of Computer Science, University of Texas at San Antonio, San Antonio, TX, USA; Department of Computer Science, University of Texas at San Antonio, San Antonio, TX, USA; Virginia Tech, Blacksburg, VA, USA; Department of Computer Science, University of Texas at San Antonio, San Antonio, TX, USA",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "8-Jul-21",
      "Publication Year": 2021,
      "Volume": 18,
      "Issue": 4,
      "Start Page": 1779,
      "End Page": 1792,
      "Abstract": "Among various bug reports (BRs), security bug reports (SBRs) are unique because they require immediate concealment and fixes. When SBRs are not identified in time, attackers can exploit the vulnerabilities. Prior work identifies SBRs via text mining, which requires a predefined keyword list and trains a classifier with known SBRs and non-security bug reports (NSBRs). The former approach is not reliable, because (1) as the contexts of security vulnerabilities and terminology of SBRs change over time, the predefined list will become out-dated; and (2) users may have insufficient SBRs for training. We introduce a semi-supervised learning-based approach, Sais, to adaptively and reliably identify SBRs. Given a project's BRs containing some labeled SBRs, many more NSBRs, and unlabeled BRs, Sais iteratively mines keywords, trains a classifier based on the keywords from the labeled data, classifies unlabeled BRs, and augments its training data with the newly labeled BRs. Our evaluation shows that Sais is useful for identifying SBRs.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2019.2939132",
      "Funding Information": "National Science Foundation(grant numbers:CNS-1748109,CCF-1846467); HRD(grant numbers:C-SPECC 1736209,DHS-14-ST-062-001); ONR(grant numbers:N00014-17-1-2498); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8823031",
      "Author Keywords": "Security bug reports;self learning;bug triaging",
      "IEEE Terms": "Computer bugs;Security;Training;Data models;Databases;Semisupervised learning;Software",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 58,
      "License": "IEEE",
      "Online Date": "3-Sep-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Real-Time Error Detection in Nonlinear Control Systems Using Machine Learning Assisted State-Space Encoding",
      "Authors": "S. Banerjee; B. Samynathan; J. A. Abraham; A. Chatterjee",
      "Author Affiliations": "Intel Labs, Santa Clara, CA, USA; Department of Electrical and Computer Engineering, University of Texas at Austin, Austin, TX, USA; Department of Electrical and Computer Engineering, University of Texas at Austin, Austin, TX, USA; School of Electrical and Computer Engineering, Georgia Institute of Technology, Atlanta, GA, USA",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "9-Mar-21",
      "Publication Year": 2021,
      "Volume": 18,
      "Issue": 2,
      "Start Page": 576,
      "End Page": 592,
      "Abstract": "Successful deployment of autonomous systems in a wide range of societal applications depends on error-free operation of the underlying signal processing and control functions. Real-time error detection in nonlinear systems has mostly relied on redundancy at the component or algorithmic level causing expensive area and power overheads. This paper describes a real-time error detection methodology for nonlinear control systems for detecting sensor and actuator degradations as well as malfunctions due to soft errors in the execution of the control algorithm on a digital processor. Our approach is based on creation of a redundant check state in such a way that its value can be computed from the current states of the system as well as from a history of prior observable state values and inputs (via machine learning algorithms). By checking for consistency between the two, errors are detected with low latency. The method is demonstrated on two test case simulations - an inverted pendulum balancing problem and a sliding mode controller driven brake-by-wire (BBW) system. In addition, hardware results from error injection experiments in an ARM core representation on an FPGA and artificial sensor degradations on a self-balancing robot prove the practical feasibility of implementation.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2019.2903049",
      "Funding Information": "National Science Foundation(grant numbers:CCF:1421353); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8658148",
      "Author Keywords": "Nonlinear Systems;Nonlinear Control;Real-time Systems;State-space Checksum;Fault Detection",
      "IEEE Terms": "Nonlinear systems;Hardware;Real-time systems;Nonlinear control systems;Actuators;Degradation",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 50,
      "License": "IEEE",
      "Online Date": "4-Mar-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Machine Learning-Based Intrusion Detection System for Securing Remote Desktop Connections to Electronic Flight Bag Servers",
      "Authors": "R. Bitton; A. Shabtai",
      "Author Affiliations": "Department of Software and Information Systems Engineering, Ben-Gurion University of the Negev, Beer-Sheva, Israel; Department of Software and Information Systems Engineering, Ben-Gurion University of the Negev, Beer-Sheva, Israel",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "13-May-21",
      "Publication Year": 2021,
      "Volume": 18,
      "Issue": 3,
      "Start Page": 1164,
      "End Page": 1181,
      "Abstract": "Remote desktop protocols (RDP) are commonly used for connecting and interacting with computers remotely. In this case, a server component runs on the remote computer and shares its desktop (i.e., screen) with the client component which runs on an end user device. In recent years, a number of vulnerabilities have been identified in two widely used remote desktop implementations, Microsoft Remote Desktop and RealVNC. These vulnerabilities may expose the remote server to a new attack vector. This concern is increased when it comes to a cyber-physical system (CPS) in which a client device with a low trust level connects to the critical system via the remote desktop server. In order to mitigate this risk, in this paper we propose a network based intrusion detection system (NIDS) specifically designed for securing the remote desktop connections. The propose method utilizes an innovative anomaly detection technique based on machine learning for detecting malicious TCP packets, which can carry exploits aimed at the RDP server. An empirical evaluation conducted on an avionic system setup consisting of a commercial tablet (Samsung Galaxy Tab) connected through a Virtual Network Computing (VNC) remote desktop implementation to a real electronic flight bag (EFB) server shows that the proposed method can detect malicious packets carrying real exploits (reported in recent years) with a true positive rate of 0.863 and a false positive rate of 0.0001.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2019.2914035",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8703153",
      "Author Keywords": "Anomaly detection;Network-based intrusion detection system (NIDS);machine learning;Remote desktop;Electronic flight bag",
      "IEEE Terms": "Servers;Protocols;Aerospace electronics;Anomaly detection;Authentication;Intrusion detection",
      "Mesh_Terms": "",
      "Article Citation Count": 24,
      "Patent Citation Count": null,
      "Reference Count": 37,
      "License": "IEEE",
      "Online Date": "30-Apr-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Evaluating Explanation Methods for Deep Learning in Security",
      "Authors": "A. Warnecke; D. Arp; C. Wressnegger; K. Rieck",
      "Author Affiliations": "Technische Universit√§t Braunschweig, Germany; Technische Universit√§t Braunschweig, Germany; Karlsruhe Institute of Technology, Germany; Technische Universit√§t Braunschweig, Germany",
      "Publication Title": "2020 IEEE European Symposium on Security and Privacy (EuroS&P)",
      "Date Added To Xplore": "2-Nov-20",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 158,
      "End Page": 174,
      "Abstract": "Deep learning is increasingly used as a building block of security systems. Unfortunately, neural networks are hard to interpret and typically opaque to the practitioner. The machine learning community has started to address this problem by developing methods for explaining the predictions of neural networks. While several of these approaches have been successfully applied in the area of computer vision, their application in security has received little attention so far. It is an open question which explanation methods are appropriate for computer security and what requirements they need to satisfy. In this paper, we introduce criteria for comparing and evaluating explanation methods in the context of computer security. These cover general properties, such as the accuracy of explanations, as well as security-focused aspects, such as the completeness, efficiency, and robustness. Based on our criteria, we investigate six popular explanation methods and assess their utility in security systems for malware detection and vulnerability discovery. We observe significant differences between the methods and build on these to derive general recommendations for selecting and applying explanation methods in computer security.",
      "ISSN": "",
      "ISBNs": "978-1-7281-5087-1",
      "DOI": "10.1109/EuroSP48549.2020.00018",
      "Funding Information": "German Federal Ministry of Education and Research (BMBF)(grant numbers:FKZ 16KIS0534); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9230374",
      "Author Keywords": "AI based security or privacy enhancing tools;Security of AI",
      "IEEE Terms": "Deep learning;Computer vision;Neural networks;Training data;Robustness;Malware;Computer security",
      "Mesh_Terms": "",
      "Article Citation Count": 42,
      "Patent Citation Count": null,
      "Reference Count": 57,
      "License": "IEEE",
      "Online Date": "2-Nov-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Explainable Security",
      "Authors": "L. Vigan√≤; D. Magazzeni",
      "Author Affiliations": "Department of Informatics, King‚Äôs College London, London, UK; Department of Informatics, King‚Äôs College London, London, UK",
      "Publication Title": "2020 IEEE European Symposium on Security and Privacy Workshops (EuroS&PW)",
      "Date Added To Xplore": "22-Oct-20",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 293,
      "End Page": 300,
      "Abstract": "In 2017, the Defense Advanced Research Projects Agency (DARPA) launched the Explainable Artificial Intelligence (XAI) program that aims to create a suite of new AI techniques that enable end users to understand, appropriately trust, and effectively manage the emerging generation of AI systems. In this paper, inspired by DARPA's XAI program, we propose a new paradigm in security research: Explainable Security (XSec). We discuss the \"Six Ws\" of XSec (Who? What? Where? When? Why? and How?) and argue that XSec has unique and complex characteristics: XSec involves several different stakeholders (i.e., the system's developers, analysts, users and attackers) and is multi-faceted by nature (as it requires reasoning about system model, threat model and properties of security, privacy and trust as well as concrete attacks, vulnerabilities and countermeasures). We define a roadmap for XSec that identifies several possible research directions.",
      "ISSN": "",
      "ISBNs": "978-1-7281-8597-2",
      "DOI": "10.1109/EuroSPW51379.2020.00045",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9229719",
      "Author Keywords": "Security paradigm;Security model;Threat model;Security properties;Privacy;Trust;Usable security;Security economics;Gamification",
      "IEEE Terms": "Security;Authentication;Artificial intelligence;Stakeholders;Privacy;Password;Face recognition",
      "Mesh_Terms": "",
      "Article Citation Count": 31,
      "Patent Citation Count": null,
      "Reference Count": 49,
      "License": "IEEE",
      "Online Date": "22-Oct-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Inferring OpenVPN State Machines Using Protocol State Fuzzing",
      "Authors": "L. -A. Daniel; E. Poll; J. de Ruiter",
      "Author Affiliations": "University of Rennes, Rennes; Radboud University; Radboud University",
      "Publication Title": "2018 IEEE European Symposium on Security and Privacy Workshops (EuroS&PW)",
      "Date Added To Xplore": "9-Jul-18",
      "Publication Year": 2018,
      "Volume": null,
      "Issue": null,
      "Start Page": 11,
      "End Page": 19,
      "Abstract": "The reliability of a security protocol is of the utmost importance but can easily be compromised by a vulnerability in the implementation. A crucial aspect of an implementation is the protocol's state machine. The state machine of an implementation can be inferred by black box testing using regular inference. These inferred state machines provide a good insight into implementations and can be used to detect any spurious behavior. We apply this technique to different implementations of OpenVPN: the standard OpenVPN and the OpenVPN-NL implementations. Although OpenVPN is a widely used TLS-based VPN solution, there is no official specification of the protocol, which makes it a particularly interesting target to analyze. We infer state machines of the server-side implementation and focus on particular phases of the protocol. Finally we analyze those state machines, show that they can reveal a lot of information about the implementation which is missing from the documentation, and discuss the possibility to include state machines in a formal specification.",
      "ISSN": "",
      "ISBNs": "978-1-5386-5445-3",
      "DOI": "10.1109/EuroSPW.2018.00009",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8406556",
      "Author Keywords": "OpenVPN;Protocol state fuzzing;LearnLib;Regular inference",
      "IEEE Terms": "Protocols;Servers;Security;Reliability;Tunneling;Fuzzing;Virtual private networks",
      "Mesh_Terms": "",
      "Article Citation Count": 11,
      "Patent Citation Count": null,
      "Reference Count": 30,
      "License": "IEEE",
      "Online Date": "9-Jul-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Defensive Programming for Smart Home Cybersecurity",
      "Authors": "M. T. Rossi; R. Greca; L. Iovino; G. Giacinto; A. Bertoli",
      "Author Affiliations": "Gran Sasso Science Institute, L‚ÄôAquila, Italy; Gran Sasso Science Institute, L‚ÄôAquila, Italy; Gran Sasso Science Institute, L‚ÄôAquila, Italy; University of Cagliari, Cagliari, Italy; ISTI - CNR, Pisa, Italy",
      "Publication Title": "2020 IEEE European Symposium on Security and Privacy Workshops (EuroS&PW)",
      "Date Added To Xplore": "22-Oct-20",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 600,
      "End Page": 605,
      "Abstract": "Cybersecurity has become a real issue in the development of smart services in the smart home domain, which is formed by a System of Systems where several smart objects are connected to each other and to the Internet. However, these connections expose the devices to possible attackers inside or outside the network, who may exploit software or hardware vulnerabilities to achieve malicious goals. To alleviate this issue, the use of defensive programming assertions can allow the behaviour of smart objects to be monitored and checked for correctness. Furthermore, open source intelligence tools, such as the Shodan search engine, provide features that could be leveraged to detect potential vulnerabilities. In this paper, we propose an approach for the monitoring of Systems of Systems in the smart home domain exploiting the defensive programming paradigm in combination with Shodan APIs.",
      "ISSN": "",
      "ISBNs": "978-1-7281-8597-2",
      "DOI": "10.1109/EuroSPW51379.2020.00087",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9229690",
      "Author Keywords": "Cybersecurity;Smart home;SoS;Shodan;Defensive Programming",
      "IEEE Terms": "Smart homes;Smart meters;Programming;Monitoring;Production;IP networks;Hardware",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 26,
      "License": "IEEE",
      "Online Date": "22-Oct-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Image Transformation-Based Defense Against Adversarial Perturbation on Deep Learning Models",
      "Authors": "A. Agarwal; R. Singh; M. Vatsa; N. Ratha",
      "Author Affiliations": "Department of Computer Science and Engineering, IIIT-Delhi, New Delhi, Delhi, India; Department of Computer Science and Engineering, IIT Jodhpur, Karwar, Rajasthan, India; Department of Computer Science and Engineering, IIT Jodhpur, Karwar, Rajasthan, India; SUNY-Buffalo, Buffalo, NY, USA",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "27-Aug-21",
      "Publication Year": 2021,
      "Volume": 18,
      "Issue": 5,
      "Start Page": 2106,
      "End Page": 2121,
      "Abstract": "Deep learning algorithms provide state-of-the-art results on a multitude of applications. However, it is also well established that they are highly vulnerable to adversarial perturbations. It is often believed that the solution to this vulnerability of deep learning systems must come from deep networks only. Contrary to this common understanding, in this article, we propose a non-deep learning approach that searches over a set of well-known image transforms such as Discrete Wavelet Transform and Discrete Sine Transform, and classifying the features with a support vector machine-based classifier. Existing deep networks-based defense have been proven ineffective against sophisticated adversaries, whereas image transformation-based solution makes a strong defense because of the non-differential nature, multiscale, and orientation filtering. The proposed approach, which combines the outputs of two transforms, efficiently generalizes across databases as well as different unseen attacks and combinations of both (i.e., cross-database and unseen noise generation CNN model). The proposed algorithm is evaluated on large scale databases, including object database (validation set of ImageNet) and face recognition (MBGC) database. The proposed detection algorithm yields at-least 84.2% and 80.1% detection accuracy under seen and unseen database test settings, respectively. Besides, we also show how the impact of the adversarial perturbation can be neutralized using a wavelet decomposition-based filtering method of denoising. The mitigation results with different perturbation methods on several image databases demonstrate the effectiveness of the proposed method.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2020.3027183",
      "Funding Information": "Department of Science and Technology Ministry of Science and Technology(grant numbers:Swarnajayanti Fellowship); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9207872",
      "Author Keywords": "Adversarial attack;detection;mitigation;image transformations;deep learning",
      "IEEE Terms": "Perturbation methods;Databases;Machine learning;Transforms;Detection algorithms;Integrated circuits;Machine learning algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": 23,
      "Patent Citation Count": null,
      "Reference Count": 107,
      "License": "IEEE",
      "Online Date": "28-Sep-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Towards Optimal Triage and Mitigation of Context-Sensitive Cyber Vulnerabilities",
      "Authors": "S. Hore; F. Moomtaheen; A. Shah; X. Ou",
      "Author Affiliations": "University of South Florida, Tampa, FL, USA; University of South Florida, Tampa, FL, USA; University of South Florida, Tampa, FL, USA; University of South Florida, Tampa, FL, USA",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "13-Mar-23",
      "Publication Year": 2023,
      "Volume": 20,
      "Issue": 2,
      "Start Page": 1270,
      "End Page": 1285,
      "Abstract": "Cyber vulnerabilities are security deficiencies in computer and network systems of organizations, which can be exploited by an adversary to cause significant damage. The technology and security personnel resources currently available in organizations to mitigate the vulnerabilities are highly inadequate. As a result, systems routinely remain unpatched, thus making them vulnerable to security breaches from the adversaries. The potential consequences of an exploited vulnerability depend upon the context as well as the severity of the vulnerability, which may differ among networks and organizations. Furthermore, security personnel tend to have varying levels of expertise and technical proficiencies associated with different computer and network devices. There exists a critical need to develop a resource-constrained approach for effectively identifying and mitigating important context-sensitive cyber vulnerabilities. In this article, we develop an advanced analytics and optimization framework to address this need and compare our approach with rule-based methods employed in real-world cybersecurity operations centers, as well as a vulnerability prioritization method from recent literature. First, we propose a machine learning-based vulnerability priority scoring system (VPSS) to calculate the priority scores for each of the vulnerabilities found in an organization‚Äôs network and quantify organizational context-based vulnerability exposure. Next, we propose a decision-support system, which consists of a two-step sequential optimization approach. The first model selects the high priority vulnerability instances from the dense report subject to resource constraints, and the second model then optimally allocates them to the security personnel with matching skill types for mitigation. Experiment results conducted using a real-world vulnerability data set show that our approach 1) outperforms both the rule-based methods and the vulnerability prioritization method from literature in prioritizing context-sensitive vulnerabilities, which are found across highly susceptible organizationally relevant host machines, and 2) maximizes the pairs of vulnerability instance type and the respective security analyst skill type for optimal mitigation.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2022.3152164",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9718144",
      "Author Keywords": "Context-sensitive vulnerability triage and mitigation;cyber vulnerability management;machine learning;mixed integer programming;sequential optimization;vulnerability priority scoring system",
      "IEEE Terms": "Security;Organizations;Measurement;Personnel;Optimization;Software;Resource management",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 27,
      "License": "IEEE",
      "Online Date": "22-Feb-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Cleaning the NVD: Comprehensive Quality Assessment, Improvements, and Analyses",
      "Authors": "A. Anwar; A. Abusnaina; S. Chen; F. Li; D. Mohaisen",
      "Author Affiliations": "Northeastern University, Boston, MA, USA; Department of Computer Science, University of Central Florida (UCF), Orlando, FL, USA; Department of Computer Science, George Mason University, Fairfax, VA, USA; School of Electrical & Computer Engineering (ECE), Georgia Institute of Technology, Atlanta, GA, USA; Department of Computer Science, University of Central Florida (UCF), Orlando, FL, USA",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "10-Nov-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 6,
      "Start Page": 4255,
      "End Page": 4269,
      "Abstract": "Vulnerability databases are vital sources of information on emergent software security concerns. Security professionals, from system administrators to developers to researchers, heavily depend on these databases to track vulnerabilities and analyze security trends. However, are these databases reliable and accurate? In this article, we explore this question with the National Vulnerability Database (NVD), the U.S. government's repository of vulnerability information that arguably serves as the industry standard. Through a systematic investigation, we uncover inconsistent or incomplete data in the NVD that can impact its practical uses, affecting information such as the vulnerability publication dates, applications affected by the vulnerability, their severity scores, and their high level type categorization. We explore the extent of these discrepancies and identify methods for their automated corrections. Finally, we demonstrate the impact that these data issues can pose by comparing analyses using the original and our rectified versions of the NVD. Ultimately, our investigation of the NVD not only produces an improved source of vulnerability information, but also provides important insights and guidance for the security community on the curation and use of such data sources.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2021.3125270",
      "Funding Information": "Global Research Lab.; National Research Foundation; Information and Communication Technologies and Future Planning(grant numbers:NRF-2016K1A1A2912757); National Science Foundation(grant numbers:CNS-2007153); Commonwealth Cyber Initiative; UCF; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9601266",
      "Author Keywords": "Vulnerability analysis;CVSS;NVD",
      "IEEE Terms": "Security;Databases;Standards;Reliability;Market research;Tools;Systematics",
      "Mesh_Terms": "",
      "Article Citation Count": 8,
      "Patent Citation Count": null,
      "Reference Count": 52,
      "License": "IEEE",
      "Online Date": "4-Nov-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Defeating Misclassification Attacks Against Transfer Learning",
      "Authors": "B. Wu; S. Wang; X. Yuan; C. Wang; C. Rudolph; X. Yang",
      "Author Affiliations": "Department of Information Technology, Monash University, Clayton, VIC, Australia; CSIRO Data61, Clayton, VIC, Australia; Department of Information Technology, Monash University, Clayton, VIC, Australia; Department of Computer Science, City University of Hong Kong, Hong Kong, China; Department of Information Technology, Monash University, Clayton, VIC, Australia; Department of Information Technology, Monash University, Clayton, VIC, Australia",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "13-Mar-23",
      "Publication Year": 2023,
      "Volume": 20,
      "Issue": 2,
      "Start Page": 886,
      "End Page": 901,
      "Abstract": "Transfer learning is prevalent as a technique to efficiently generate new models (Student models) based on the knowledge transferred from a pre-trained model (Teacher model). However, Teacher models are often publicly available for sharing and reuse, which inevitably introduces vulnerability to trigger severe attacks against transfer learning systems. In this article, we take a first step towards mitigating one of the most advanced misclassification attacks in transfer learning. We design a distilled differentiator via activation-based network pruning to enervate the attack transferability while retaining accuracy. We adopt an ensemble structure from variant differentiators to improve the defence robustness. To avoid the bloated ensemble size during inference, we propose a two-phase defence, in which inference from the Student model is first performed to narrow down the candidate differentiators to be assembled, and later only a small, fixed number of them can be chosen to validate clean or reject adversarial inputs effectively. Our comprehensive evaluations on both large and small image recognition tasks confirm that the Student models with our defence of only 5 differentiators are immune to over 90% of the adversarial inputs with an accuracy loss of less than 10%. Our comparison also demonstrates that our design outperforms prior problematic defences.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2022.3144988",
      "Funding Information": "Monash-Data61 collaborative research project(grant numbers:Data61 CRP43); Research Grants Council of Hong Kong(grant numbers:CityU 11217819,N_CityU139/21,R6021-20F); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9693248",
      "Author Keywords": "Deep neural network;defence against adversarial examples;transfer learning;pre-trained model",
      "IEEE Terms": "Transfer learning;Task analysis;Mathematical models;Training;Computational modeling;Data models;Perturbation methods",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 46,
      "License": "IEEE",
      "Online Date": "25-Jan-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Orchestration or Automation: Authentication Flaw Detection in Android Apps",
      "Authors": "S. Ma; J. Li; S. Nepal; D. Ostry; D. Lo; S. K. Jha; R. H. Deng; E. Bertino",
      "Author Affiliations": "Data61, CSIRO, University of Queensland, Eveleigh, NSW, Australia; Shanghai Jiaotong University, Shanghai, China; Data61, CSIRO, University of Queensland, Eveleigh, NSW, Australia; Data61, CSIRO, University of Queensland, Eveleigh, NSW, Australia; Singapore Management University, Singapore; University of New South Wales Sydney, Sydney, NSW, Australia; Singapore Management University, Singapore; Purdue University, West Lafayette, IN, USA",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "8-Jul-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 4,
      "Start Page": 2165,
      "End Page": 2178,
      "Abstract": "Passwords are pervasively used to authenticate users‚Äô identities in mobile apps. To secure passwords against attacks, protection is applied to the password authentication protocol (PAP). The implementation of the protection scheme becomes an important factor in protecting PAP against attacks. We focus on two basic protection in Android, i.e., SSL/TLS-based PAP and timestamp-based PAP. Previously, we proposed an automated tool, GLACIATE, to detect authentication flaws. We were curious whether orchestration (i.e., involving manual-effort) works better than automation. To answer this question, we propose an orchestrated approach, AuthExploit and compare its effectiveness GLACIATE. We study requirements for correct implementation of PAP and then apply GLACIATE to identify protection enhancements automatically. Through dependency analysis, GLACIATE matches the implementations against the abstracted flaws to recognise defective apps. To evaluate AuthExploit, we collected 1,200 Android apps from Google Play. We compared AuthExploit with the automation tool, GLACIATE, and two other orchestration tools, ${\\sf MalloDroid}$MalloDroid and ${\\sf SMV-Hunter}$SMV-Hunter. The results demonstrated that orchestration tools detect flaws more precisely although the F1 score of GLACIATE is higher than AuthExploit. Further analysis of the results reveals that highly popular apps and e-commerce apps are not more secure than other apps.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2021.3050188",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:62002222); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9317767",
      "Author Keywords": "Vulnerability detection;password authentication;mobile security",
      "IEEE Terms": "Password;Authentication;Protocols;Servers;Tools;Automation;Mobile applications",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 51,
      "License": "IEEE",
      "Online Date": "8-Jan-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Design, Analysis and Application of Embedded Resistive RAM Based Strong Arbiter PUF",
      "Authors": "R. Govindaraj; S. Ghosh; S. Katkoori",
      "Author Affiliations": "Computer Science and Engineering, University of South Florida, Tampa, FL, USA; Computer Science and Engineering, Pennsylvania State University, Pennsylvania, USA; Computer Science and Engineering, University of South Florida, Tampa, FL, USA",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "6-Nov-20",
      "Publication Year": 2020,
      "Volume": 17,
      "Issue": 6,
      "Start Page": 1232,
      "End Page": 1242,
      "Abstract": "Resistive Random Access Memory (RRAM) based Physical Unclonable Function (PUF) designs exploit either the probabilistic switching or the resistance variability during forming, SET and RESET processes of RRAM. Memory PUFs using RRAM are typically weak PUFs due to fewer number of challenge response pairs. We propose a strong arbiter PUF based on 1T-1R bit cell which is designed from conventional RRAM memory array with minimally invasive changes. Conventional voltage sense amplifier is repurposed to act like an arbiter and generate the response. Similarly, address and data lines are repurposed to act as challenge and response bits respectively. The PUF is simulated using 65 nm predictive technology models for CMOS and Verilog-A model for a hafnium oxide based RRAM. The proposed PUF architecture is evaluated for uniqueness, uniformity and reliability for various number of stages. It demonstrates mean intra-die Hamming Distance (HD) of 0.135 percent and inter-die HD of 51.4 percent, and passes the NIST tests. We study the vulnerability of proposed PUF to machine learning attacks. We also present an application of proposed PUF for data attestation in the internet of things. Proposed PUF-based data attestation consumes 9.88pJ of total energy per data block of 64-bits and offers a speed of 120.7 kbps.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2018.2866425",
      "Funding Information": "Semiconductor Research Corporation(grant numbers:#2442.001); National Science Foundation(grant numbers:CNS-1722557,CNS-1814710,CCF-1718474,DGE-1723687); Defense Advanced Research Projects Agency(grant numbers:#D15AP00089); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8443101",
      "Author Keywords": "Physical unclonable function;resistive RAM;hardware security;non-volatile memory;arbiter PUF;ML attacks;data attestation",
      "IEEE Terms": "Resistance;Mathematical model;Computer architecture;Random access memory;Security;Hardware",
      "Mesh_Terms": "",
      "Article Citation Count": 18,
      "Patent Citation Count": null,
      "Reference Count": 44,
      "License": "IEEE",
      "Online Date": "21-Aug-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "CD-VulD: Cross-Domain Vulnerability Discovery Based on Deep Domain Adaptation",
      "Authors": "S. Liu; G. Lin; L. Qu; J. Zhang; O. De Vel; P. Montague; Y. Xiang",
      "Author Affiliations": "School of Software and Electrical Engineering, Swinburne University of Technology, Hawthorn, VIC, Australia; School of Software and Electrical Engineering, Swinburne University of Technology, Hawthorn, VIC, Australia; Data61, Docklands, VIC, Australia; School of Software and Electrical Engineering, Swinburne University of Technology, Hawthorn, VIC, Australia; Defence Science &amp; Technology Group, Edinburgh, SA, Australia; Defence Science &amp; Technology Group, Edinburgh, SA, Australia; School of Software and Electrical Engineering, Swinburne University of Technology, Hawthorn, VIC, Australia",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "14-Jan-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 1,
      "Start Page": 438,
      "End Page": 451,
      "Abstract": "A major cause of security incidents such as cyber attacks is rooted in software vulnerabilities. These vulnerabilities should ideally be found and fixed before the code gets deployed. Machine learning-based approaches achieve state-of-the-art performance in capturing vulnerabilities. These methods are predominantly supervised. Their prediction models are trained on a set of ground truth data where the training data and test data are assumed to be drawn from the same probability distribution. However, in practice, the test data often differs from the training data in terms of distribution because they are from different projects or they differ in the types of vulnerability. In this article, we present a new system for <underline>C</underline>ross <underline>D</underline>omain Software <underline>Vul</underline>nerability <underline>D</underline>iscovery (<italic>CD-VulD</italic>) using deep learning (DL) and domain adaptation (DA). We employ DL because it has the capacity of automatically constructing high-level abstract feature representations of programs, which are likely of more cross-domain useful than the handcrafted features driven by domain knowledge. The divergence between distributions is reduced by learning cross-domain representations. First, given software program representations, CD-VulD converts them into token sequences and learns the token embeddings for generalization across tokens. Next, CD-VulD employs a deep feature model to build abstract high-level presentations based on those sequences. Then, the metric transfer learning framework (MTLF) technique is employed to learn cross-domain representations by minimizing the distribution divergence between the source domain and the target domain. Finally, the cross-domain representations are used to build a classifier for vulnerability detection. Experimental results show that CD-VulD outperforms the state-of-the-art vulnerability detection approaches by a wide margin. We make the new datasets publicly available so that our work is replicable and can be further improved.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2020.2984505",
      "Funding Information": "Defence Science and Technology Group&#x2018;s Next Generation Technologies Program(grant numbers:DP200100886); Linkage(grant numbers:LP180100170); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054952",
      "Author Keywords": "Cross-domain;vulnerability detection/discovery;deep learning;machine learning;domain adaptation",
      "IEEE Terms": "Software;Deep learning;Training data;Training;Predictive models;Security;Data models",
      "Mesh_Terms": "",
      "Article Citation Count": 31,
      "Patent Citation Count": null,
      "Reference Count": 44,
      "License": "IEEE",
      "Online Date": "2-Apr-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "How About Bug-Triggering Paths? - Understanding and Characterizing Learning-Based Vulnerability Detectors",
      "Authors": "X. Cheng; X. Nie; N. Li; H. Wang; Z. Zheng; Y. Sui",
      "Author Affiliations": "University of Technology Sydney, Ultimo, NSW, Australia; Beijing University of Posts and Telecommunications, Beijing, China; Huazhong University of Science and Technology, Wuhan, Hubei, China; Huazhong University of Science and Technology, Wuhan, Hubei, China; Beihang University, Beijing, China; University of Technology Sydney, Ultimo, NSW, Australia",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "13-Mar-24",
      "Publication Year": 2024,
      "Volume": 21,
      "Issue": 2,
      "Start Page": 542,
      "End Page": 558,
      "Abstract": "Machine learning and its promising branch deep learning have proven to be effective in a wide range of application domains. Recently, several efforts have shown success in applying deep learning techniques for automatic vulnerability discovery, as alternatives to traditional static bug detection. In principle, these learning-based approaches are built on top of classification models using supervised learning. Depending on the different granularities to detect vulnerabilities, these approaches rely on learning models which are typically trained with well-labeled source code to predict whether a program method, a program slice, or a particular code line contains a vulnerability or not. The effectiveness of these models is normally evaluated against conventional metrics including precision, recall and F1 score. In this paper, we show that despite yielding promising numbers, the above evaluation strategy can be insufficient and even misleading when evaluating the effectiveness of current learning-based approaches. This is because the underlying learning models only produce the classification results or report individual/isolated program statements, but are unable to pinpoint bug-triggering paths, which is an effective way for bug fixing and the main aim of static bug detection. Our key insight is that a program method or statement can only be stated as vulnerable in the context of a bug-triggering path. In this work, we systematically study the gap between recent learning-based approaches and conventional static bug detectors in terms of fine-grained metrics called BTP metrics using bug-triggering paths. We then characterize and compare the quality of the prediction results of existing learning-based detectors under different granularities. Finally, our comprehensive empirical study reveals several key issues and challenges in developing classification models to pinpoint bug-triggering paths and calls for more advanced learning-based bug detection techniques.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2022.3192419",
      "Funding Information": "Australian Research(grant numbers:DP200101328,DP210101348); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9833339",
      "Author Keywords": "Software vulnerabilities;machine learning;bug-triggering paths;empirical study",
      "IEEE Terms": "Computer bugs;Codes;Measurement;Feature extraction;Detectors;Training;Predictive models",
      "Mesh_Terms": "",
      "Article Citation Count": 13,
      "Patent Citation Count": null,
      "Reference Count": 71,
      "License": "IEEE",
      "Online Date": "19-Jul-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "LARGen: Automatic Signature Generation for Malwares Using Latent Dirichlet Allocation",
      "Authors": "S. Lee; S. Kim; S. Lee; J. Choi; H. Yoon; D. Lee; J. -R. Lee",
      "Author Affiliations": "Korea National University of Transportation, Uiwang-si, Korea; National Security Research Institute, Daejeon, Korea; National Security Research Institute, Daejeon, Korea; Gachon University, Seongnam-si, Korea; National Security Research Institute, Daejeon, Korea; National Security Research Institute, Daejeon, Korea; Kangwon National University, Samcheok-si, Korea",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "30-Aug-18",
      "Publication Year": 2018,
      "Volume": 15,
      "Issue": 5,
      "Start Page": 771,
      "End Page": 783,
      "Abstract": "As the quantity and complexity of network threats grow, Intrusion Detection Systems (IDSs) have become critical for securing networks. Achieving computer network intrusion detection with these IDSs requires high-level information technology and security expertise because malicious traffic has to be rigorously analyzed and the appropriate IDS rules written to effectively detect vulnerabilities that may potentially be exploited. However, incorrect IDS rules may produce numerous false positives, thereby degrading the performance of the IDS, and even worse, paralyzing the network. In this paper, we present a novel approach that exploits the Latent Dirichle Allocation (LDA) algorithm to generate IDS rules. Our proposed method, called LDA-based Automatic Rule Generation (LARGen), automatically performs an analysis of the malicious traffic and extracts the appropriate attack signatures that will be used for IDS rules. LARGen first extracts multiple signature strings embedded in network flows. Then, the flows are classified based on the extracted signature strings, and key content strings for malicious traffic are identified through the LDA inferential topic model. Those key content strings are the core of an IDS rule that can detect malicious traffic. We study the effectiveness of LDA in the context of network attack signature generation via extensive experiments with real network trace data, consisting of both benign and malicious traffic. Experimental results confirm that threat rules generated from LARGen accurately detect every cyber attack with high accuracy.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2016.2609907",
      "Funding Information": "Korea National University of Transportation; Basic Science Research Program of the National Research Foundation of Korea (NRF)(grant numbers:NRF-2014R1A1A2053456); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7569096",
      "Author Keywords": "Intrusion detection system;automated threat rule generation;latent Dirichlet allocation;system design and implementation",
      "IEEE Terms": "Malware;Security;Resource management;Context;Internet;Protocols;Semantics",
      "Mesh_Terms": "",
      "Article Citation Count": 22,
      "Patent Citation Count": null,
      "Reference Count": 56,
      "License": "IEEE",
      "Online Date": "15-Sep-16",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Accurate Detection of IoT Sensor Behaviors in Legitimate, Faulty and Compromised Scenarios",
      "Authors": "K. Sood; M. R. Nosouhi; N. Kumar; A. Gaddam; B. Feng; S. Yu",
      "Author Affiliations": "Deakin University, Geelong, VIC, Australia; Deakin University, Geelong, VIC, Australia; Thapar University, Patiala, Punjab, India; Deakin University, Geelong, VIC, Australia; Beijing Jiaotong University, Beijing, China; University of Technology Sydney, Ultimo, NSW, Australia",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "13-Jan-23",
      "Publication Year": 2023,
      "Volume": 20,
      "Issue": 1,
      "Start Page": 288,
      "End Page": 300,
      "Abstract": "In smart farming sector, Internet of Things (IoT) based smart sensing systems are vulnerable to failure, malfunction, and malicious attacks. Also, sensors are deployed often in an alien and harsh environment. Here, the conditions are not well supportive which either causes the sensor to fail prematurely or gives unusual and erroneous readings, known as outliers. This effects the smart network's performance and decision-making ability in many ways. Therefore, it is important to accurately detect the IoT sensor behaviour in legitimate, faulty, and compromised or attack scenarios. To distinguish the sensor behaviour in different scenarios we have proposed a feasible approach using spatial correlation theory which is validated using Moran's I index tool. We have used Classification and Regression Trees (CART), Random Forest (RF), and Support Vector Machine (SVM) models to test our approach. For real-time anomaly detection we have used an edge computing technology. We have compared the proposed approach, using Forest Fire real dataset, with the three existing recent works. Our results are promising in terms of accurate detection of IoT sensor behaviours in real-time. This will assist the precision farming industry in making better decisions to securely manage IoT field network, increase productivity, and improves operational efficiency.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2021.3131991",
      "Funding Information": "ARC(grant numbers:200101374); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9632348",
      "Author Keywords": "Internet of Things;IoT behaviour;outlier detection;security;precision farming",
      "IEEE Terms": "Internet of Things;Wireless sensor networks;Sensors;Real-time systems;Digital agriculture;Monitoring;Anomaly detection",
      "Mesh_Terms": "",
      "Article Citation Count": 9,
      "Patent Citation Count": null,
      "Reference Count": 57,
      "License": "IEEE",
      "Online Date": "1-Dec-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Fine-Grained Approach for Anomaly Detection in File System Accesses With Enhanced Temporal User Profiles",
      "Authors": "S. Mehnaz; E. Bertino",
      "Author Affiliations": "Department of Computer Science, Purdue University, West Lafayette, IN, USA; Department of Computer Science, Cyber Center, Purdue University, West Lafayette, IN, USA",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "10-Nov-21",
      "Publication Year": 2021,
      "Volume": 18,
      "Issue": 6,
      "Start Page": 2535,
      "End Page": 2550,
      "Abstract": "Protecting sensitive data from theft, exfiltration, and other kinds of abuses by malicious insiders is a challenging problem. While access control mechanisms cannot always prevent the insiders from misusing sensitive data (since, in most of the cases, authorized users within organizations are granted access permissions), malicious outsiders also pose severe threats due to different security vulnerabilities in the systems, e.g., phishing attacks, memory corruptions, etc., which enable them to steal the credentials of the authorized users who have access to the data. To protect sensitive data from such attackers, anomaly detection techniques are often combined with other existing security measures, e.g., access control and encryption. An anomaly detection technique for identifying anomalies in file system accesses is based on the key idea that there should be significant differences between the file access behaviors of a benign user and an attacker. In this article, we propose an approach to create fine-grained profiles of the users‚Äô regular file access activities while extensively analyzing the timestamp information of the file accesses. According to our observation, even if a user‚Äôs access to a file seems benign, only a fine-grained analysis of the access (such as the size of access, the timestamp of access) can determine the original intention of the user. We exploit the users‚Äô file access information at the block level to model their regular file access behaviors (user profiles) which are then securely stored and used for identifying anomalous file system accesses in the detection phase. We are also able to automatically profile new files and new users added to the system dynamically. Finally, our performance evaluations demonstrate that our proposed approach has an accuracy of 98.7 percent in detecting anomalies while incurring an overhead of only 2 percent.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2019.2954507",
      "Funding Information": "Schlumberger Foundation; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8907413",
      "Author Keywords": "Insider attacks;anomaly detection;file system access",
      "IEEE Terms": "Cyberattack;Anomaly detection;Access control;Data protection;File systems;Feature extraction",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 60,
      "License": "IEEE",
      "Online Date": "20-Nov-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Real-Time Multistep Attack Prediction Based on Hidden Markov Models",
      "Authors": "P. Holgado; V. A. Villagr√°; L. V√°zquez",
      "Author Affiliations": "Departamento de Ingenier√≠a y Sistemas Telem√°ticos, Universidad Polit√©cnica de Madrid Avenida Complutense, 30, Madrid, Spain; Departamento de Ingenier√≠a y Sistemas Telem√°ticos, Universidad Polit√©cnica de Madrid, Madrid, Spain; Departamento de Ingenier√≠a y Sistemas Telem√°ticos, Universidad Polit√©cnica de Madrid, Madrid, Spain",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "15-Jan-20",
      "Publication Year": 2020,
      "Volume": 17,
      "Issue": 1,
      "Start Page": 134,
      "End Page": 147,
      "Abstract": "A novel method based on the Hidden Markov Model is proposed to predict multistep attacks using IDS alerts. We consider the hidden states as similar phases of a particular type of attack. As a result, it can be easily adapted to multistep attacks and foresee the next steps of an attacker. To achieve this goal, a preliminary off-line training phase based on observations will be required. These observations are obtained by matching the IDS alert information with a database previously built for this purpose using a clusterization method from the CVE global database to avoid overfitting. The training model is performed using both unsupervised and supervised algorithms. Once the training is completed and probability matrices are computed, the prediction module compute the best state sequence based on the state probability for each step of the multistep attack in progress using the Viterbi and forward-backward algorithms. The training model includes the mean number of alerts and the number of alerts in progress to assist in obtaining the final attack probability. The model is analyzed for DDoS phases because it is a great problem in all Internet services. The proposed method is validated into a virtual DDoS scenario using current vulnerabilities. The results proving the system's ability to perform real-time prediction.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2017.2751478",
      "Funding Information": "Spanish MINECO(grant numbers:TIN2014-59023-C2-2-R); European Commission; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8031986",
      "Author Keywords": "Multistep attack prediction;hidden Markov model;distributed denial of service;proactive response;machine learning",
      "IEEE Terms": "Hidden Markov models;Training;Computer crime;Proposals;Predictive models;Mathematical model;Prediction algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": 72,
      "Patent Citation Count": null,
      "Reference Count": 36,
      "License": "IEEE",
      "Online Date": "12-Sep-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Alert-Driven Attack Graph Generation Using S-PDFA",
      "Authors": "A. Nadeem; S. Verwer; S. Moskal; S. J. Yang",
      "Author Affiliations": "Department of Intelligent Systems, Delft University of Technology, Delft, The Netherlands; Department of Intelligent Systems, Delft University of Technology, Delft, The Netherlands; Department of Computer Engineering, Rochester Institute of Technology, Rochester, NY, USA; Department of Computer Engineering, Rochester Institute of Technology, Rochester, NY, USA",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "11-Mar-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 2,
      "Start Page": 731,
      "End Page": 746,
      "Abstract": "Ideal cyber threat intelligence (CTI) includes insights into attacker strategies that are specific to a network under observation. Such CTI currently requires extensive expert input for obtaining, assessing, and correlating system vulnerabilities into a graphical representation, often referred to as an attack graph (AG). Instead of deriving AGs based on system vulnerabilities, this work advocates the direct use of intrusion alerts. We propose SAGE, an explainable sequence learning pipeline that automatically constructs AGs from intrusion alerts without a priori expert knowledge. SAGE exploits the temporal and probabilistic dependence between alerts in a suffix-based probabilistic deterministic finite automaton (S-PDFA) ‚Äî a model that brings infrequent severe alerts into the spotlight and summarizes paths leading to them. Attack graphs are extracted from the model on a per-victim, per-objective basis. SAGE is thoroughly evaluated on three open-source intrusion alert datasets collected through security testing competitions in order to analyze distributed multi-stage attacks. SAGE compresses over 330k alerts into 93 AGs that show how specific attacks transpired. The AGs are succinct, interpretable, and provide directly relevant insights into strategic differences and fingerprintable paths. They even show that attackers tend to follow shorter paths after they have discovered a longer one in 84.5% of the cases.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2021.3117348",
      "Funding Information": "National Science Foundation(grant numbers:1742789); RIT Global Cybersecurity Institute; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9557854",
      "Author Keywords": "Alert-driven attack graphs;explainable machine learning;suffix automaton model;attacker strategy;intrusion alerts",
      "IEEE Terms": "Security;Pipelines;Probabilistic logic;Learning automata;Testing;Special issues and sections;Markov processes",
      "Mesh_Terms": "",
      "Article Citation Count": 10,
      "Patent Citation Count": null,
      "Reference Count": 68,
      "License": "IEEE",
      "Online Date": "4-Oct-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Privacy Leakage in Wireless Charging",
      "Authors": "J. Liu; X. Zou; L. Zhao; Y. Tao; S. Hu; J. Han; K. Ren",
      "Author Affiliations": "Zhejiang University and Key Laboratory of Blockchain and Cyberspace Governance of Zhejiang Province, Hangzhou, China; Xi'an Jiaotong University, Xi'an, China; Zhejiang University, Hangzhou, China; Zhejiang University, Hangzhou, China; Zhejiang University, Hangzhou, China; Zhejiang University and Key Laboratory of Blockchain and Cyberspace Governance of Zhejiang Province, Hangzhou, China; Zhejiang University, Key Laboratory of Blockchain and Cyberspace Governance of Zhejiang Province, Hangzhou, China",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "13-Mar-24",
      "Publication Year": 2024,
      "Volume": 21,
      "Issue": 2,
      "Start Page": 501,
      "End Page": 514,
      "Abstract": "Wireless charging is becoming an essential power supply pattern for electronic devices. Currently, mainstream smartphones are almost compatible with wireless charging. However, when the charging efficiency is continuously improved, its security challenge still remains open yet overlooked. In this paper, we reveal that severe security flaws exist in the wireless charging procedure of off-the-shelf commodity smartphones. Specifically, we find that an attacker can utilize the electromagnetic induction effect between the wireless charger and the smartphone to detect the activities and operations performed on the smartphone. We term such attack as EM-Surfing side-channel attack and build a theoretical model to show its feasibility. To explore the hazard of EM-Surfing, we propose a three-module attack method, with which we conduct real-world experiments over three mainstream models of smartphones. The results show that the attacker can achieve over 99%, 96%, 94%, and 97% accuracy when inferring the passcode, keystroke, App information, and speech content, respectively. We also design an App named SecCharging to prevent smartphones from EM-Surfing attacks. The defense experiment results demonstrate that SecCharging can mitigate the threats posed by EM-Surfing effectively.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2022.3173063",
      "Funding Information": "National Key R&D Program of China(grant numbers:2021QY0703); National Natural Science Foundation of China(grant numbers:U21A20462,61872285,52177199,62032021,61772236,61972348); Research Institute of Cyberspace Governance in Zhejiang University; Leading Innovative and Entrepreneur Team Introduction Program of Zhejiang(grant numbers:2018R01005); Ant Group Funding(grant numbers:Z51202000234); Alibaba-Zhejiang University Joint Institute of Frontier Technologies; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9770365",
      "Author Keywords": "Side-channel;wireless charging;machine learning",
      "IEEE Terms": "Smart phones;Privacy;Wireless communication;Communication system security;Inductive charging;Wireless sensor networks;Voltage",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 50,
      "License": "IEEE",
      "Online Date": "6-May-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Software Vulnerability Discovery via Learning Multi-Domain Knowledge Bases",
      "Authors": "G. Lin; J. Zhang; W. Luo; L. Pan; O. De Vel; P. Montague; Y. Xiang",
      "Author Affiliations": "School of Software and Electrical Engineering, Swinburne University of Technology, Melbourne, VIC, Australia; School of Software and Electrical Engineering, Swinburne University of Technology, Melbourne, VIC, Australia; School of Information Technology, Deakin University, Geelong, VIC, Australia; School of Information Technology, Deakin University, Geelong, VIC, Australia; Department of Defence, Defence Science and Technology Group (DSTG), Canberra, ACT, Australia; Department of Defence, Defence Science and Technology Group (DSTG), Canberra, ACT, Australia; School of Software and Electrical Engineering, Swinburne University of Technology, Melbourne, VIC, Australia",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "27-Aug-21",
      "Publication Year": 2021,
      "Volume": 18,
      "Issue": 5,
      "Start Page": 2469,
      "End Page": 2485,
      "Abstract": "Machine learning (ML) has great potential in automated code vulnerability discovery. However, automated discovery application driven by off-the-shelf machine learning tools often performs poorly due to the shortage of high-quality training data. The scarceness of vulnerability data is almost always a problem for any developing software project during its early stages, which is referred to as the cold-start problem. This article proposes a framework that utilizes transferable knowledge from pre-existing data sources. In order to improve the detection performance, multiple vulnerability-relevant data sources were selected to form a broader base for learning transferable knowledge. The selected vulnerability-relevant data sources are cross-domain, including historical vulnerability data from different software projects and data from the Software Assurance Reference Database (SARD) consisting of synthetic vulnerability examples and proof-of-concept test cases. To extract the information applicable in vulnerability detection from the cross-domain data sets, we designed a deep-learning-based framework with Long-short Term Memory (LSTM) cells. Our framework combines the heterogeneous data sources to learn unified representations of the patterns of the vulnerable source codes. Empirical studies showed that the unified representations generated by the proposed deep learning networks are feasible and effective, and are transferable for real-world vulnerability detection. Our experiments demonstrated that by leveraging two heterogeneous data sources, the performance of our vulnerability detection outperformed the static vulnerability discovery tool Flawfinder. The findings of this article may stimulate further research in ML-based vulnerability detection using heterogeneous data sources.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2019.2954088",
      "Funding Information": "NVIDIA Corporation; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8906156",
      "Author Keywords": "Vulnerability discovery;representation learning;deep learning",
      "IEEE Terms": "Software;Feature extraction;Deep learning;Feeds;Task analysis;Neural networks;Data mining",
      "Mesh_Terms": "",
      "Article Citation Count": 53,
      "Patent Citation Count": null,
      "Reference Count": 53,
      "License": "IEEE",
      "Online Date": "19-Nov-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "SySeVR: A Framework for Using Deep Learning to Detect Software Vulnerabilities",
      "Authors": "Z. Li; D. Zou; S. Xu; H. Jin; Y. Zhu; Z. Chen",
      "Author Affiliations": "National Engineering Research Center for Big Data Technology and System, Services Computing Technology and System Lab, Cluster and Grid Computing Lab, Big Data Security Engineering Research Center, School of Cyber Science and Engineering, Huazhong University of Science and Technology, Wuhan, China; National Engineering Research Center for Big Data Technology and System, Services Computing Technology and System Lab, Cluster and Grid Computing Lab, Big Data Security Engineering Research Center, School of Cyber Science and Engineering, Huazhong University of Science and Technology, Wuhan, China; Department of Computer Science, University of Colorado Colorado Springs, Colorado Springs, CO, USA; National Engineering Research Center for Big Data Technology and System, Services Computing Technology and System Lab, Cluster and Grid Computing Lab, Big Data Security Engineering Research Center, School of Computer Science and Technology, Huazhong University of Science and Technology, Wuhan, China; National Engineering Research Center for Big Data Technology and System, Services Computing Technology and System Lab, Cluster and Grid Computing Lab, Big Data Security Engineering Research Center, School of Computer Science and Technology, Huazhong University of Science and Technology, Wuhan, China; National Engineering Research Center for Big Data Technology and System, Services Computing Technology and System Lab, Cluster and Grid Computing Lab, Big Data Security Engineering Research Center, School of Computer Science and Technology, Huazhong University of Science and Technology, Wuhan, China",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "8-Jul-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 4,
      "Start Page": 2244,
      "End Page": 2258,
      "Abstract": "The detection of software vulnerabilities (or vulnerabilities for short) is an important problem that has yet to be tackled, as manifested by the many vulnerabilities reported on a daily basis. This calls for machine learning methods for vulnerability detection. Deep learning is attractive for this purpose because it alleviates the requirement to manually define features. Despite the tremendous success of deep learning in other application domains, its applicability to vulnerability detection is not systematically understood. In order to fill this void, we propose the first systematic framework for using deep learning to detect vulnerabilities in C/C++ programs with source code. The framework, dubbed Syntax-based, Semantics-based, and Vector Representations (SySeVR), focuses on obtaining program representations that can accommodate syntax and semantic information pertinent to vulnerabilities. Our experiments with four software products demonstrate the usefulness of the framework: we detect 15 vulnerabilities that are not reported in the National Vulnerability Database. Among these 15 vulnerabilities, seven are unknown and have been reported to the vendors, and the other eight have been ‚Äúsilently‚Äù patched by the vendors when releasing newer versions of the pertinent software products.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2021.3051525",
      "Funding Information": "Huazhong University of Science and Technology; Hebei University; National Natural Science Foundation of China(grant numbers:U1936211,61802106); Natural Science Foundation of Hebei Province(grant numbers:F2020201016); ARO(grant numbers:W911NF-17-1-0566); National Science Foundation(grant numbers:1814825,1736209); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9321538",
      "Author Keywords": "Vulnerability detection;security;deep learning;program analysis;program representation",
      "IEEE Terms": "Deep learning;Syntactics;Software;Semantics;Proposals;Image processing;Big Data",
      "Mesh_Terms": "",
      "Article Citation Count": 177,
      "Patent Citation Count": null,
      "Reference Count": 52,
      "License": "IEEE",
      "Online Date": "13-Jan-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Comparative Analysis of Software Aging in Image Classifiers on Cloud and Edge",
      "Authors": "E. Andrade; R. Pietrantuono; F. Machida; D. Cotroneo",
      "Author Affiliations": "Department of Computing, Federal Rural University of Pernambuco, Recife, Brazil; University of Naples Federico II, Naples, Italy; Department of Computer Science, University of Tsukuba, Ibaraki, Japan; University of Naples Federico II, Naples, Italy",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "13-Jan-23",
      "Publication Year": 2023,
      "Volume": 20,
      "Issue": 1,
      "Start Page": 563,
      "End Page": 573,
      "Abstract": "Image classifiers for recognizing real-world objects are widely used in the Internet of Things (IoT) and Cyber-Physical Systems(CPSs). A classifier is trained offline by machine learning algorithms with training data sets, and then it is deployed on a cloud or an edge computing system for online label predictions. As the classifier's performance depends on the underlying software infrastructure, it may degrade over time due to software faults causing software aging. In this paper, we address this issue and experimentally investigate software aging observed in an image classification system that continuously runs on cloud and edge computing environments. We apply several statistical techniques to analyze degradation trends in the systems under stress tests. Our statistical trend analysis confirms the degradation trends in the throughput as well as the available memory resources both in the cloud and the edge environments. Contrary to our expectation, the edge computing environment under test had much less impact on the performance degradation than our cloud environment when the workload is high, although the latter one has four times larger allocated memory resources. We also show that the observed performance degradation trends are associated with the memory usage of specific processes by performing correlation analysis.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2021.3139201",
      "Funding Information": "CNPq - Brazil(grant numbers:406263/2018-3); University of Tsukuba Basic Research Support Program Type S; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9665276",
      "Author Keywords": "Cloud computing;Edge computing;image classifiers;performance analysis;software aging",
      "IEEE Terms": "Aging;Software;Cloud computing;Degradation;Market research;Image edge detection;Edge computing",
      "Mesh_Terms": "",
      "Article Citation Count": 8,
      "Patent Citation Count": null,
      "Reference Count": 48,
      "License": "IEEE",
      "Online Date": "29-Dec-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Adaptive Secure Nearest Neighbor Query Processing Over Encrypted Data",
      "Authors": "R. Li; A. X. Liu; H. Xu; Y. Liu; H. Yuan",
      "Author Affiliations": "College of Cyberspace Security, Dongguan University of Technology, Dongguan, Guangdong, China; College of Cyberspace Security, Dongguan University of Technology, Dongguan, Guangdong, China; College of Cyberspace Security, Dongguan University of Technology, Dongguan, Guangdong, China; College of Cyberspace Security, Dongguan University of Technology, Dongguan, Guangdong, China; College of Cyberspace Security, Dongguan University of Technology, Dongguan, Guangdong, China",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "14-Jan-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 1,
      "Start Page": 91,
      "End Page": 106,
      "Abstract": "Nearest neighbor query processing is a fundamental problem that arises in many fields such as spatial databases and machine learning. This article aims to address the Secure Nearest Neighbor (SNN) problem in cloud computing. Prior SNN schemes are both insecure and inefficient. In this article, we formally prove and experimentally demonstrate that the SNN scheme ASPE is actually insecure against even ciphertext only attacks. Although prior work proved that it is impossible to construct an SNN scheme even in much relaxed standard security models, we point out the flaws of the hardness proof. We propose an SNN scheme and prove that it is secure against adaptive chosen keyword attacks. Our scheme is efficient as its query processing complexity is logarithmic. To evaluate the efficiency of our SNN scheme, we implemented our scheme in C++ and compared its performance with a plain text scheme, binary scheme, and a PIR scheme on a large set of over 10 million real-world data points. Experimental results show that our scheme is fast (0.124 millisecond per query when data set size is 10 million) and scalable in terms of the number of data points.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2020.2998039",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:61972089,61672156,61872082,61802060,61972090); Dongguan University of Technology(grant numbers:KCYKYQD2017009,KCYKYQD2017002); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9103106",
      "Author Keywords": "Cloud computing;secure nearest neighbor queries;adaptive IND-CKA security",
      "IEEE Terms": "Cloud computing;Indexes;Adaptation models;Encryption;Data models",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 43,
      "License": "IEEE",
      "Online Date": "28-May-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Pervasive Micro Information Flow Tracking",
      "Authors": "S. Mallissery; K. -Y. Chiang; C. -A. Bau; Y. -S. Wu",
      "Author Affiliations": "Department of Computer Science, National Yang Ming Chiao Tung University (NYCU), Hsinchu, Taiwan; Department of Computer Science, National Yang Ming Chiao Tung University (NYCU), Hsinchu, Taiwan; Department of Computer Science, National Yang Ming Chiao Tung University (NYCU), Hsinchu, Taiwan; Department of Computer Science, National Yang Ming Chiao Tung University (NYCU), Hsinchu, Taiwan",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "10-Nov-23",
      "Publication Year": 2023,
      "Volume": 20,
      "Issue": 6,
      "Start Page": 4957,
      "End Page": 4975,
      "Abstract": "Detection of advanced security attacks that exploit zero-day vulnerabilities or application-specific logic loopholes has been challenging due to the lack of attack signatures or substantial deviations in the overall system behavior. One has to zoom in to the affected code regions and look for local anomalies distinguishable from the benign workload to detect such attacks. We propose pervasive micro information flow tracking (PerMIT) that realizes variable-level online dynamic information flow tracking (DIFT) as a means to detect the attacks. The system uses hardware virtualization extension to monitor access to taint source variables and performs asynchronous code emulation to infer the local information flow. We demonstrate that the pervasive micro information flow can sufficiently capture the attacks and incurs only a small overhead. Given the program source code, the system can further enrich the semantics of micro information flow by embedding the variable names. We have integrated the system with machine learning algorithms to demonstrate the effectiveness of anomaly detection for zero-day attacks with pervasive micro information flow.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2023.3238547",
      "Funding Information": "National Science and Technology Council of the Republic of China(grant numbers:111-2628-E-A49-007-MY2,111-2218-E-A49-013-MBK); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10023951",
      "Author Keywords": "Anomaly detection;dynamic information flow tracking;online taint analysis;production system;zero-day attacks",
      "IEEE Terms": "Target tracking;Security;Codes;Malware;Source coding;Emulation;Anomaly detection",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 51,
      "License": "IEEE",
      "Online Date": "20-Jan-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Optimizing the Numbers of Queries and Replies in Convex Federated Learning With Differential Privacy",
      "Authors": "Y. Zhou; X. Liu; Y. Fu; D. Wu; J. H. Wang; S. Yu",
      "Author Affiliations": "Department of Computing, Faculty of Science and Engineering, Macquarie University, Sydney, NSW, Australia; School of Computer Science and Engineering, Sun Yat-sen University, Guangzhou, China; School of Computer Science and Engineering, Sun Yat-sen University, Guangzhou, China; School of Computer Science and Engineering, Sun Yat-sen University, Guangzhou, China; Institute for Network Sciences and Cyberspace, Tsinghua University, Beijing, China; School of Computer Science, University of Technology Sydney, Sydney, NSW, Australia",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "10-Nov-23",
      "Publication Year": 2023,
      "Volume": 20,
      "Issue": 6,
      "Start Page": 4823,
      "End Page": 4837,
      "Abstract": "Federated learning (FL) empowers distributed clients to collaboratively train a shared machine learning model through exchanging parameter information. Despite the fact that FL can protect clients‚Äô raw data, malicious users can still crack original data with disclosed parameters. To amend this flaw, differential privacy (DP) is incorporated into FL clients to disturb original parameters, which however can significantly impair the accuracy of the trained model. In this work, we study an imperative question which has been vastly overlooked by existing works: what are the optimal numbers of queries and replies in FL with DP so that the final model accuracy is maximized. In FL, the parameter server (PS) needs to query participating clients for multiple global iterations to complete training. Each client responds a query from the PS by conducting a local iteration. We consider FL that will uniformly and randomly select participating clients to conduct local iterations with the FedSGD algorithm. Our work investigates how many times the PS should query clients and how many times each client should reply the PS by incorporating two most extensively used DP mechanisms (i.e., the Laplace mechanism and Gaussian mechanisms). Through conducting convergence rate analysis, we can determine the optimal numbers of queries and replies in FL with DP so that the final model accuracy can be maximized. Finally, extensive experiments are conducted with publicly available datasets: MNIST and FEMNIST, to verify our analysis and the results demonstrate that properly setting the numbers of queries and replies can significantly improve the final model accuracy in FL with DP.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2023.3234599",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:U1911201,U2001209,62072269); Science and Technology Planning Project of Guangdong Province(grant numbers:2021A0505110008); Shenzhen Fundamental Research Program(grant numbers:20200814105901001); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10008087",
      "Author Keywords": "Federated learning;query and reply;differential privacy;convergence rate",
      "IEEE Terms": "Convergence;Differential privacy;Computational modeling;Privacy;Servers;Data models;Training",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 45,
      "License": "IEEE",
      "Online Date": "6-Jan-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Understanding Security Risks of Embedded Devices Through Fine-Grained Firmware Fingerprinting",
      "Authors": "Q. Li; D. Tan; X. Ge; H. Wang; Z. Li; J. Liu",
      "Author Affiliations": "School of Computer and Information Technology, Beijing Jiaotong University, Beijing, China; School of Computer and Information Technology, Beijing Jiaotong University, Beijing, China; School of Computer and Information Technology, Beijing Jiaotong University, Beijing, China; Department of Electrical and Computer Engineering, Virginia Tech, Blacksburg, VA, USA; Institute of Information Engineering, Chinese Academy of Sciences (CAS), Beijing, China; School of Computer and Information Technology, Beijing Jiaotong University, Beijing, China",
      "Publication Title": "IEEE Transactions on Dependable and Secure Computing",
      "Date Added To Xplore": "10-Nov-22",
      "Publication Year": 2022,
      "Volume": 19,
      "Issue": 6,
      "Start Page": 4099,
      "End Page": 4112,
      "Abstract": "An increasing number of embedded devices are connecting to the Internet, ranging from cameras, routers to printers, while an adversary can exploit security flaws already known to compromise those devices. Security patches are usually associated with the device firmware, which relies on the device vendors and products. Due to compatibility and release-time issues, many embedded devices are still using outdated firmware with known vulnerabilities or flaws. In this article, we conduct a systematic study on device vulnerabilities by leveraging firmware fingerprints. Specifically, we use a web crawler to gather 9,716 firmware images from official websites of device vendors, and 347,685 security reports scattered across data archives, blogs, and forums. We propose to generate fine-grained fingerprints based on the subtle differences between the filesystems of various firmware images. Furthermore, machine learning algorithms and regex are used to identify device vulnerabilities and corresponding device firmware fingerprints. We perform real-world experiments to validate the performance of the firmware fingerprint, which yields high accuracy of 91% precision and 90% recall. We reveal that 6,898 reports have the firmware and related vulnerability information, and there are more than 10% of firmware vulnerabilities without any patches or solutions for mitigating underlying security risks.",
      "ISSN": "1941-0018",
      "ISBNs": "",
      "DOI": "10.1109/TDSC.2021.3119970",
      "Funding Information": "National Key R&D Program of China(grant numbers:2018YFB0803402); National Natural Science Foundation of China(grant numbers:61972024); National Key R&D Program of China(grant numbers:2020YFB2103802); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9573428",
      "Author Keywords": "Firmware;fingerprinting;embedded device;vulnerability",
      "IEEE Terms": "Security;Internet;Microprogramming;Blogs;Performance evaluation;Fingerprint recognition;Software",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 38,
      "License": "CCBY",
      "Online Date": "14-Oct-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Defuse: A Data Annotator and Model Builder for Software Defect Prediction",
      "Authors": "S. D. Palma; D. Di Nucci; D. Tamburri",
      "Author Affiliations": "Tilburg University/JADS; University of Salerno; Eindhoven University/JADS",
      "Publication Title": "2022 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "19-Dec-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 479,
      "End Page": 483,
      "Abstract": "We propose a language-agnostic tool for software defect prediction, called DEFUSE. The tool automatically collects and classifies failure data, enables the correction of those classifications, and builds machine learning models to detect defects based on those data. We instantiated the tool in the scope of Infrastructure-as-Code, the DevOps practice enabling management and provisioning of infrastructure through the definition of machine-readable files. We present its architecture and provide examples of its application.Demo video: https://youtu.be/37mmLdCX3jU.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-7956-1",
      "DOI": "10.1109/ICSME55016.2022.00063",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9978237",
      "Author Keywords": "defect prediction;machine learning;mining software repositories",
      "IEEE Terms": "Software maintenance;Costs;Instruments;Machine learning;Computer architecture;Predictive models;Maintenance engineering",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 19,
      "License": "IEEE",
      "Online Date": "19-Dec-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Ticket Tagger: Machine Learning Driven Issue Classification",
      "Authors": "R. Kallis; A. Di Sorbo; G. Canfora; S. Panichella",
      "Author Affiliations": "Department of Informatics, University of Zurich, Zurich, Switzerland; Department of Engineering, University of Sannio, Benevento, Italy; Department of Engineering, University of Sannio, Benevento, Italy; School of Engineering, Zurich University of Applied Sciences, Zurich, Switzerland",
      "Publication Title": "2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "5-Dec-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 406,
      "End Page": 409,
      "Abstract": "Software maintenance is crucial for software projects evolution and success: code should be kept up-to-date and error-free, this with little effort and continuous updates for the end-users. In this context, issue trackers are essential tools for creating, managing and addressing the several (often hundreds of) issues that occur in software systems. A critical aspect for handling and prioritizing issues involves the assignment of labels to them (e.g., for projects hosted on GitHub), in order to determine the type (e.g., bug report, feature request and so on) of each specific issue. Although this labeling process has a positive impact on the effectiveness of issue processing, the current labeling mechanism is scarcely used on GitHub. In this demo, we introduce a tool, called Ticket Tagger, which leverages machine learning strategies on issue titles and descriptions for automatically labeling GitHub issues. Ticket Tagger automatically predicts the labels to assign to issues, with the aim of stimulating the use of labeling mechanisms in software projects, this to facilitate the issue management and prioritization processes. Along with the presentation of the tool's architecture and usage, we also evaluate its effectiveness in performing the issue labeling/classification process, which is critical to help maintainers to keep control of their workloads by focusing on the most critical issue tickets.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-7281-3094-1",
      "DOI": "10.1109/ICSME.2019.00070",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8918993",
      "Author Keywords": "Software maintenance and evolution;Issue Processing;Unstructured Data Labeling",
      "IEEE Terms": "Computer bugs;Labeling;Software maintenance;Pattern classification;Software systems",
      "Mesh_Terms": "",
      "Article Citation Count": 52,
      "Patent Citation Count": null,
      "Reference Count": 14,
      "License": "IEEE",
      "Online Date": "5-Dec-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Why Don‚Äôt XAI Techniques Agree? Characterizing the Disagreements Between Post-hoc Explanations of Defect Predictions",
      "Authors": "S. Roy; G. Laberge; B. Roy; F. Khomh; A. Nikanjam; S. Mondal",
      "Author Affiliations": "University of Saskatchewan, Canada; Polytechnique Montr√©al, Canada; University of Saskatchewan, Canada; University of Saskatchewan, Canada; University of Saskatchewan, Canada; University of Saskatchewan, Canada",
      "Publication Title": "2022 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "19-Dec-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 444,
      "End Page": 448,
      "Abstract": "Machine Learning (ML) based defect prediction models can be used to improve the reliability and overall quality of software systems. However, such defect predictors might not be deployed in real applications due to the lack of transparency. Thus, recently, application of several post-hoc explanation methods (e.g., LIME and SHAP) have gained popularity. These explanation methods can offer insight by ranking features based on their importance in black box decisions. The explainability of ML techniques is reasonably novel in the Software Engineering community. However, it is still unclear whether such explainability methods genuinely help practitioners make better decisions regarding software maintenance. Recent user studies show that data scientists usually utilize multiple post-hoc explainers to understand a single model decision because of the lack of ground truth. Such a scenario causes disagreement between explainability methods and impedes drawing a conclusion. Therefore, our study first investigates three disagreement metrics between LIME and SHAP explanations of 10 defect-predictors, and exposes that disagreements regarding the rankings of feature importance are most frequent. Our findings lead us to propose a method of aggregating LIME and SHAP explanations that puts less emphasis on these disagreements while highlighting the aspect on which explanations agree.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-7956-1",
      "DOI": "10.1109/ICSME55016.2022.00056",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9978217",
      "Author Keywords": "Empirical;Defect Prediction;eXplainable AI;LIME;SHAP;Software Maintenance",
      "IEEE Terms": "Measurement;Software maintenance;Closed box;Machine learning;Predictive models;Maintenance engineering;Software systems",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 23,
      "License": "IEEE",
      "Online Date": "19-Dec-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "On the Impact of Multi-language Development in Machine Learning Frameworks",
      "Authors": "M. Grichi; E. E. Eghan; B. Adams",
      "Author Affiliations": "GIGL department, Polytechnique Montreal, Quebec, Canada; GIGL department, Polytechnique Montreal, Quebec, Canada; GIGL department, Polytechnique Montreal, Quebec, Canada",
      "Publication Title": "2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "2-Nov-20",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 546,
      "End Page": 556,
      "Abstract": "The role of machine learning frameworks in software applications has exploded in recent years. Similar to non-machine learning frameworks, those frameworks need to evolve to incorporate new features, optimizations, etc., yet their evolution is impacted by the interdisciplinary development teams needed to develop them: scientists and developers. One concrete way in which this shows is through the use of multiple programming languages in their code base, enabling the scientists to write optimized low-level code while developers can integrate the latter into a robust framework. Since multi-language code bases have been shown to impact the development process, this paper empirically compares ten large open-source multi-language machine learning frameworks and ten large open-source multi-language traditional systems in terms of the volume of pull requests, their acceptance ratio i.e., the percentage of accepted pull requests among all the received pull requests, review process duration i.e., period taken to accept or reject a pull request, and bug-proneness. We find that multi-language pull request contributions present a challenge for both machine learning and traditional systems. Our main findings show that in both machine learning and traditional systems, multi-language pull requests are likely to be less accepted than mono-language pull requests; it also takes longer for both multi- and mono-language pull requests to be rejected than accepted. Machine learning frameworks take longer to accept/reject a multi-language pull request than traditional systems. Finally, we find that mono-language pull requests in machine learning frameworks are more bug-prone than traditional systems.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-7281-5619-4",
      "DOI": "10.1109/ICSME46990.2020.00058",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9240642",
      "Author Keywords": "Machine learning;Framework;Open Source;Software engineering;Multi-language;Traditional systems",
      "IEEE Terms": "Software maintenance;Computer languages;Conferences;Machine learning;Open source software;Optimization",
      "Mesh_Terms": "",
      "Article Citation Count": 6,
      "Patent Citation Count": null,
      "Reference Count": 36,
      "License": "IEEE",
      "Online Date": "2-Nov-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Sine-Cosine Algorithm for Software Fault Prediction",
      "Authors": "T. Sharma; O. P. Sangwan",
      "Author Affiliations": "Deptt. of Computer Science and Engineering, G J University of Science and Technology, Hisar, India; Deptt. of Computer Science and Engineering, G J University of Science and Technology, Hisar, India",
      "Publication Title": "2021 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "24-Nov-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 701,
      "End Page": 706,
      "Abstract": "For developing an efficient and quality Software Fault Prediction (SFP) model, redundant and irrelevant features need to be removed. This task can be achieved, to a significant extent, with Feature Selection (FS) methods. Many empirical studies have been proposed on FS methods (Filter and Wrapper-based) and have shown effective results in reducing the problem of high dimensionality in metrics-based SFP models. This study evaluates the performance of novel wrapper-based Sine Cosine Algorithm (SCA) on five datasets of the AEEEM repository and compares the results with two metaheuristic techniques Genetic Algorithm (GA) and Cuckoo Search algorithm (CSA) on four different Machine Learning (ML) classifiers - Random Forest (RF), Support Vector Machine (SVM), Na√Øve Bayes (NB), and K-Nearest Neighbor (KNN). We found that the application of FS methods (SCA, GA & CSA) has improved the classifier performance. SCA has proved to be more efficient than GA and CSA in terms of lesser convergence time with the smallest subset of selected features and equivalent performance.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-2882-8",
      "DOI": "10.1109/ICSME52107.2021.00084",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9609148",
      "Author Keywords": "software fault prediction;feature selection;sine cosine algorithm;metaheuristic techniques",
      "IEEE Terms": "Support vector machines;Software maintenance;Machine learning algorithms;Software algorithms;Stochastic processes;Predictive models;Prediction algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 32,
      "License": "IEEE",
      "Online Date": "24-Nov-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "A Practical Approach to the Automatic Classification of Security-Relevant Commits",
      "Authors": "A. Sabetta; M. Bezzi",
      "Author Affiliations": "SAP Security Research; SAP Security Research",
      "Publication Title": "2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "11-Nov-18",
      "Publication Year": 2018,
      "Volume": null,
      "Issue": null,
      "Start Page": 579,
      "End Page": 582,
      "Abstract": "The lack of reliable sources of detailed information on the vulnerabilities of open-source software (OSS) components is a major obstacle to maintaining a secure software supply chain and an effective vulnerability management process. Standard sources of advisories and vulnerability data, such as the National Vulnerability Database (NVD), are known to suffer from poor coverage and inconsistent quality. To reduce our dependency on these sources, we propose an approach that uses machine-learning to analyze source code repositories and to automatically identify commits that are security-relevant (i.e., that are likely to fix a vulnerability). We treat the source code changes introduced by commits as documents written in natural language, classifying them using standard document classification methods. Combining independent classifiers that use information from different facets of commits, our method can yield high precision (80%) while ensuring acceptable recall (43%). In particular, the use of information extracted from the source code changes yields a substantial improvement over the best known approach in state of the art, while requiring a significantly smaller amount of training data and employing a simpler architecture.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-5386-7870-1",
      "DOI": "10.1109/ICSME.2018.00058",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8530068",
      "Author Keywords": "machine learning;open source software;vulnerabilities;NVD;CVE;commit classification;source code repositories;code change classification",
      "IEEE Terms": "Security;Standards;Open source software;Databases;Predictive models;Machine learning",
      "Mesh_Terms": "",
      "Article Citation Count": 36,
      "Patent Citation Count": null,
      "Reference Count": 8,
      "License": "IEEE",
      "Online Date": "11-Nov-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "A Conceptual Antifragile Microservice Framework for Reshaping Critical Infrastructures",
      "Authors": "H. Bangui; B. Rossi; B. Buhnova",
      "Author Affiliations": "Faculty of Informatics, Masaryk University, Brno, Czech Republic; Faculty of Informatics, Masaryk University, Brno, Czech Republic; Faculty of Informatics, Masaryk University, Brno, Czech Republic",
      "Publication Title": "2022 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "19-Dec-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 364,
      "End Page": 368,
      "Abstract": "Recently, microservices have been examined as a solution for reshaping and improving the flexibility, scalability, and maintainability of critical infrastructure systems. However, microservice systems are also suffering from the presence of a substantial number of potentially vulnerable components that may threaten the protection of critical infrastructures. To address the problem, this paper proposes to leverage the concept of antifragility built in a framework for building self-learning microservice systems that could be strengthened by faults and threats instead of being deteriorated by them. To illustrate the approach, we instantiate the proposed approach of autonomous machine learning through an experimental evaluation on a benchmarking dataset of microservice faults.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-7956-1",
      "DOI": "10.1109/ICSME55016.2022.00040",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9977445",
      "Author Keywords": "Critical Infrastructures;Microservices;Antifragility;Machine Learning;Generative Adversarial Network",
      "IEEE Terms": "Software maintenance;Autonomous systems;Scalability;Microservice architectures;Termination of employment;Elasticity;Generative adversarial networks",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 17,
      "License": "IEEE",
      "Online Date": "19-Dec-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Improving Software Maintenance Using Process Mining and Predictive Analytics",
      "Authors": "M. Gupta; A. Serebrenik; P. Jalote",
      "Author Affiliations": "IIIT Delhi, India; Eindhoven University of Technology, The Netherlands; IIIT Delhi, India",
      "Publication Title": "2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "7-Nov-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 681,
      "End Page": 686,
      "Abstract": "This research focuses on analyzing and improving maintenance process by exploring novel applications of process mining and predictive analytics. We analyze the software maintenance process by applying process mining on software repositories, and address the identified inefficiencies using predictive analytics. To drive our research, we engage with practitioners from large, global IT companies and emphasize on the practical usability of the proposed solution approaches, which are evaluated by conducting a series of case studies on open source and commercial projects.",
      "ISSN": "",
      "ISBNs": "978-1-5386-0992-7",
      "DOI": "10.1109/ICSME.2017.39",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8094481",
      "Author Keywords": "Process Mining;Qualitative Study;Machine Learning;IT Support Process;Bug Detection",
      "IEEE Terms": "Data mining;Software maintenance;Companies;Maintenance engineering;Object recognition;Clocks",
      "Mesh_Terms": "",
      "Article Citation Count": 7,
      "Patent Citation Count": null,
      "Reference Count": 25,
      "License": "IEEE",
      "Online Date": "7-Nov-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Cost Reduction on Testing Evolving Cancer Registry System",
      "Authors": "E. Isaku; H. Sartaj; C. Laaber; T. Yue; S. Ali; T. Schwitalla; J. F. Nyg√•rd",
      "Author Affiliations": "Simula Research Laboratory, Oslo, Norway; Simula Research Laboratory, Oslo, Norway; Simula Research Laboratory, Oslo, Norway; Simula Research Laboratory, Oslo, Norway; Simula Research Laboratory, Oslo, Norway; Cancer Registry of Norway, Oslo, Norway; Cancer Registry of Norway, Oslo, Norway",
      "Publication Title": "2023 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "11-Dec-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 508,
      "End Page": 518,
      "Abstract": "The Cancer Registration Support System (CaReSS), built by the Cancer Registry of Norway (CRN), is a complex real-world socio-technical software system that undergoes continuous evolution in its implementation. Consequently, continuous testing of CaReSS with automated testing tools is needed such that its dependability is always ensured. Towards automated testing of a key software subsystem of CaReSS, i.e., GURI, we present a real-world application of an extension to the open-source tool EvoMaster, which automatically generates test cases with evolutionary algorithms. We named the extension EvoClass, which enhances EvoMaster with a machine learning classifier to reduce the overall testing cost. This is imperative since testing with EvoMaster involves sending many requests to GURI deployed in different environments, including the production environment, whose performance and functionality could potentially be affected by many requests. The machine learning classifier of EvoClass can predict whether a request generated by EvoMaster will be executed successfully or not; if not, the classifier filters out such requests, consequently reducing the number of requests to be executed on GURI. We evaluated EvoClass on ten GURI versions over four years in three environments: development, testing, and production. Results showed that EvoClass can significantly reduce the testing cost of evolving GURI without reducing testing effectiveness (measured as rule coverage) across all three environments, as compared to the default EvoMaster. Overall, EvoClass achieved ‚âà31% of overall cost reduction. Finally, we report our experiences and lessons learned that are equally valuable for researchers and practitioners.",
      "ISSN": "2576-3148",
      "ISBNs": "979-8-3503-2783-0",
      "DOI": "10.1109/ICSME58846.2023.00065",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10336343",
      "Author Keywords": "Software Evolution;Testing;Machine Learning",
      "IEEE Terms": "Software maintenance;Costs;Machine learning;Production;Evolutionary computation;Software systems;Test pattern generators",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 35,
      "License": "IEEE",
      "Online Date": "11-Dec-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "What do Developers Know About Machine Learning: A Study of ML Discussions on StackOverflow",
      "Authors": "A. A. Bangash; H. Sahar; S. Chowdhury; A. W. Wong; A. Hindle; K. Ali",
      "Author Affiliations": "Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Computing Science, University of Alberta, Edmonton, AB, Canada",
      "Publication Title": "2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "29-Aug-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 260,
      "End Page": 264,
      "Abstract": "Machine learning, a branch of Artificial Intelligence, is now popular in software engineering community and is successfully used for problems like bug prediction, and software development effort estimation. Developers' understanding of machine learning, however, is not clear, and we require investigation to understand what educators should focus on, and how different online programming discussion communities can be more helpful. We conduct a study on Stack Overflow (SO) machine learning related posts using the SOTorrent dataset. We found that some machine learning topics are significantly more discussed than others, and others need more attention. We also found that topic generation with Latent Dirichlet Allocation (LDA) can suggest more appropriate tags that can make a machine learning post more visible and thus can help in receiving immediate feedback from sites like SO.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-3412-3",
      "DOI": "10.1109/MSR.2019.00052",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816808",
      "Author Keywords": "stackoverflow, machine learning, topic modeling",
      "IEEE Terms": "Machine learning;Machine learning algorithms;Software;Classification algorithms;Training;Programming;Tagging",
      "Mesh_Terms": "",
      "Article Citation Count": 24,
      "Patent Citation Count": null,
      "Reference Count": 10,
      "License": "IEEE",
      "Online Date": "29-Aug-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "RMove: Recommending Move Method Refactoring Opportunities using Structural and Semantic Representations of Code",
      "Authors": "D. Cui; S. Wang; Y. Luo; X. Li; J. Dai; L. Wang; Q. Li",
      "Author Affiliations": "School of Computer Science and Technology, Xidian University, Xi‚Äôan, China; School of Computer Science and Technology, Xidian University, Xi‚Äôan, China; School of Computer Science and Technology, Xidian University, Xi‚Äôan, China; School of Computer Science and Technology, Xidian University, Xi‚Äôan, China; School of Computer Science and Technology, Xidian University, Xi‚Äôan, China; School of Computer Science and Technology, Xidian University, Xi‚Äôan, China; School of Computer Science and Technology, Xidian University, Xi‚Äôan, China",
      "Publication Title": "2022 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "19-Dec-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 281,
      "End Page": 292,
      "Abstract": "Incorrect placement of methods within classes is a typical code smell called Feature Envy, which causes additional maintenance and cost during evolution. To remove this design flaw, several Move Method refactoring tools have been proposed. To the best of our knowledge, state-of-the-art related techniques can be broadly divided into two categories: the first line is non-machine-learning-based approaches built on software measurement, while the selection and thresholds of software metrics heavily rely on expert knowledge. The second line is machine learning-based approaches, which suggest Move Method refactoring by learning to extract features from code information. However, most approaches in this line treat different forms of code information identically, disregarding their significant variation on data analysis. In this paper, we propose an approach to recommend Move Method refactoring named RMove by automatically learning structural and semantic representation from code fragment respectively. We concatenate these representations together and further train the machine learning classifiers to guide the movement of method to suitable classes. We evaluate our approach on two publicly available datasets. The results show that our approach outperforms three state-of-the-art refactoring tools including PathMove, JDeodorant, and JMove in effectiveness and usefulness. The results also unveil useful findings and provide new insights that benefit other types of feature envy refactoring techniques.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-7956-1",
      "DOI": "10.1109/ICSME55016.2022.00033",
      "Funding Information": "Research and Development; Fundamental Research Funds for the Central Universities; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9978256",
      "Author Keywords": "",
      "IEEE Terms": "Software maintenance;Codes;Data analysis;Costs;Software metrics;Semantics;Machine learning",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 65,
      "License": "IEEE",
      "Online Date": "19-Dec-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Losing Confidence in Quality: Unspoken Evolution of Computer Vision Services",
      "Authors": "A. Cummaudo; R. Vasa; J. Grundy; M. Abdelrazek; A. Cain",
      "Author Affiliations": "Applied Artificial Intelligence Institute, Deakin University, Geelong, Australia; Applied Artificial Intelligence Institute, Deakin University, Geelong, Australia; Faculty of Information Technology, Monash University, Clayton, Australia; School of Information Technology, Deakin University, Geelong, Australia; School of Information Technology, Deakin University, Geelong, Australia",
      "Publication Title": "2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "5-Dec-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 333,
      "End Page": 342,
      "Abstract": "The following topics are dealt with: software maintenance; public domain software; program testing; source code (software); program debugging; software quality; program diagnostics; learning (artificial intelligence); mobile computing; data mining.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-7281-3094-1",
      "DOI": "10.1109/ICSME.2019.00051",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8919078",
      "Author Keywords": "machine learning;intelligent service;computer vision;quality assurance;evolution risk;documentation",
      "IEEE Terms": "Computer vision;Dogs;Testing;Cloud computing;Documentation;Software quality",
      "Mesh_Terms": "",
      "Article Citation Count": 14,
      "Patent Citation Count": null,
      "Reference Count": 63,
      "License": "Crown",
      "Online Date": "5-Dec-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Improving Bug Triaging with High Confidence Predictions at Ericsson",
      "Authors": "A. Sarkar; P. C. Rigby; B. Bartalos",
      "Author Affiliations": "Department of Computer Science and Software Engineering, Concordia University, Montreal, QC, Canada; Department of Computer Science and Software Engineering, Concordia University, Montreal, QC, Canada; Ericsson, Budapest, Hungary",
      "Publication Title": "2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "5-Dec-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 81,
      "End Page": 91,
      "Abstract": "Correctly assigning bugs to the right developer or team, i.e. bug triaging, is a costly activity. A concerted effort at Ericsson has been done to adopt automated bug triaging to reduce development costs. In this work, we replicate the research approaches that have been widely used in the literature. We apply them on over 10k bug reports for 9 large products at Ericsson. We find that a logistic regression classifier including the simple textual and categorical attributes of the bug reports has the highest precision and recall of 78.09% and 79.00%, respectively. Ericsson's bug reports often contain logs that have crash dumps and alarms. We add this information to the bug triage models. We find that this information does not improve the precision and recall of bug triaging in Ericsson's context. Although our models perform as well as the best ones reported in the literature, a criticism of bug triaging at Ericsson is that the accuracy is not sufficient for regular use. We develop a novel approach where we only triage bugs when the model has high confidence in the triage prediction. We find that we improve the accuracy to 90%, but we can make predictions for 62% of the bug reports.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-7281-3094-1",
      "DOI": "10.1109/ICSME.2019.00018",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8919115",
      "Author Keywords": "Bug Triaging;Machine Learning;Log Analysis;Incremental Learning",
      "IEEE Terms": "Computer bugs;Support vector machines;Machine learning;Software;Manuals;Social network services",
      "Mesh_Terms": "",
      "Article Citation Count": 19,
      "Patent Citation Count": null,
      "Reference Count": 31,
      "License": "IEEE",
      "Online Date": "5-Dec-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "A Simple NLP-Based Approach to Support Onboarding and Retention in Open Source Communities",
      "Authors": "C. Stanik; L. Montgomery; D. Martens; D. Fucci; W. Maalej",
      "Author Affiliations": "University of Hamburg, Germany; University of Hamburg, Germany; University of Hamburg, Germany; University of Hamburg, Germany; University of Hamburg, Germany",
      "Publication Title": "2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "11-Nov-18",
      "Publication Year": 2018,
      "Volume": null,
      "Issue": null,
      "Start Page": 172,
      "End Page": 182,
      "Abstract": "Successful open source communities are constantly looking for new members and helping them become active developers. A common approach for developer onboarding in open source projects is to let newcomers focus on relevant yet easy-to-solve issues to familiarize themselves with the code and the community. The goal of this research is twofold. First, we aim at automatically identifying issues that newcomers can resolve by analyzing the history of resolved issues by simply using the title and description of issues. Second, we aim at automatically identifying issues, that can be resolved by newcomers who later become active developers. We mined the issue trackers of three large open source projects and extracted natural language features from the title and description of resolved issues. In a series of experiments, we optimized and compared the accuracy of four supervised classifiers to address our research goals. Random Forest, achieved up to 91% precision (F1-score 72%) towards the first goal while for the second goal, Decision Tree achieved a precision of 92% (F1-score 91%). A qualitative evaluation gave insights on what information in the issue description is helpful for newcomers. Our approach can be used to automatically identify, label, and recommend issues for newcomers in open source software projects based only on the text of the issues.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-5386-7870-1",
      "DOI": "10.1109/ICSME.2018.00027",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8530027",
      "Author Keywords": "open source software;onboarding;task selection;newcomers;machine learning;natural language processing",
      "IEEE Terms": "Feature extraction;Machine learning;Computer bugs;Open source software;Natural language processing;History;Forestry",
      "Mesh_Terms": "",
      "Article Citation Count": 17,
      "Patent Citation Count": null,
      "Reference Count": 41,
      "License": "IEEE",
      "Online Date": "11-Nov-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Towards Accurate Duplicate Bug Retrieval Using Deep Learning Techniques",
      "Authors": "J. Deshmukh; K. M. Annervaz; S. Podder; S. Sengupta; N. Dubash",
      "Author Affiliations": "Accenture Technology Labs; Accenture Technology Labs; Accenture Technology Labs; Accenture Technology Labs; Accenture Technology Labs",
      "Publication Title": "2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "7-Nov-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 115,
      "End Page": 124,
      "Abstract": "Duplicate Bug Detection is the problem of identifying whether a newly reported bug is a duplicate of an existing bug in the system and retrieving the original or similar bugs from the past. This is required to avoid costly rediscovery and redundant work. In typical software projects, the number of duplicate bugs reported may run into the order of thousands, making it expensive in terms of cost and time for manual intervention. This makes the problem of duplicate or similar bug detection an important one in Software Engineering domain. However, an automated solution for the same is not quite accurate yet in practice, in spite of many reported approaches using various machine learning techniques. In this work, we propose a retrieval and classification model using Siamese Convolutional Neural Networks (CNN) and Long Short Term Memory (LSTM) for accurate detection and retrieval of duplicate and similar bugs. We report an accuracy close to 90% and recall rate close to 80%, which makes possible the practical use of such a system. We describe our model in detail along with related discussions from the Deep Learning domain. By presenting the detailed experimental results, we illustrate the effectiveness of the model in practical systems, including for repositories for which supervised training data is not available.",
      "ISSN": "",
      "ISBNs": "978-1-5386-0992-7",
      "DOI": "10.1109/ICSME.2017.69",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8094414",
      "Author Keywords": "Information Retrieval;Duplicate Bug Detection;Deep Learning;Natural Language Processing;Word Embeddings;Siamese Networks;Convolutional Neural Networks;Long Short Term Memory",
      "IEEE Terms": "Computer bugs;Machine learning;Neural networks;Training;Computational modeling;Sun",
      "Mesh_Terms": "",
      "Article Citation Count": 55,
      "Patent Citation Count": null,
      "Reference Count": 40,
      "License": "IEEE",
      "Online Date": "7-Nov-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "DeepOrder: Deep Learning for Test Case Prioritization in Continuous Integration Testing",
      "Authors": "A. Sharif; D. Marijan; M. Liaaen",
      "Author Affiliations": "Simula Research Laboratory, Norway; Simula Research Laboratory, Norway; Cisco Systems Norway",
      "Publication Title": "2021 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "24-Nov-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 525,
      "End Page": 534,
      "Abstract": "Continuous integration testing is an important step in the modern software engineering life cycle. Test prioritization is a method that can improve the efficiency of continuous integration testing by selecting test cases that can detect faults in the early stage of each cycle. As continuous integration testing produces voluminous test execution data, test history is a commonly used artifact in test prioritization. However, existing test prioritization techniques for continuous integration either cannot handle large test history or are optimized for using a limited number of historical test cycles. We show that such a limitation can decrease fault detection effectiveness of prioritized test suites. This work introduces DeepOrder, a deep learning-based model that works on the basis of regression machine learning. DeepOrder ranks test cases based on the historical record of test executions from any number of previous test cycles. DeepOrder learns failed test cases based on multiple factors including the duration and execution status of test cases. We experimentally show that deep neural networks, as a simple regression model, can be efficiently used for test case prioritization in continuous integration testing. DeepOrder is evaluated with respect to time-effectiveness and fault detection effectiveness in comparison with an industry practice and the state of the art approaches. The results show that DeepOrder outperforms the industry practice and state-of-the-art test prioritization approaches in terms of these two metrics.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-2882-8",
      "DOI": "10.1109/ICSME52107.2021.00053",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9609187",
      "Author Keywords": "Regression testing;Test case prioritization;Test case selection;Deep Learning;Machine Learning;Continuous Integration",
      "IEEE Terms": "Industries;Deep learning;Measurement;Software maintenance;Fault detection;Conferences;History",
      "Mesh_Terms": "",
      "Article Citation Count": 12,
      "Patent Citation Count": null,
      "Reference Count": 38,
      "License": "IEEE",
      "Online Date": "24-Nov-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Repairing Intricate Faults in Code Using Machine Learning and Path Exploration",
      "Authors": "D. Gopinath; K. Wang; J. Hua; S. Khurshid",
      "Author Affiliations": "The University of Texas, Austin; The University of Texas, Austin; The University of Texas, Austin; The University of Texas, Austin",
      "Publication Title": "2016 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "16-Jan-17",
      "Publication Year": 2016,
      "Volume": null,
      "Issue": null,
      "Start Page": 453,
      "End Page": 457,
      "Abstract": "Debugging remains costly and tedious, especially for code that performs intricate operations that are conceptually complex to reason about. We present MLR, a novel approach for repairing faults in such operations, specifically in the context of complex data structures. Our focus is on faults in conditional statements. Our insight is that an integrated approach based on machine learning and systematic path exploration can provide effective repairs. MLR mines the data-spectra of the passing and failing executions of conditional branches to prune the search space for repair and generate patches that are likely valid beyond the existing test-suite. We apply MLR to repair faults in small but complex data structure subjects to demonstrate its efficacy. Experimental results show that MLR has the potential to repair this fault class more effectively than state-of-the-art repair tools.",
      "ISSN": "",
      "ISBNs": "978-1-5090-3806-0",
      "DOI": "10.1109/ICSME.2016.75",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7816493",
      "Author Keywords": "program repair;semi-supervised learning;decisiontree learning;JPF;data-structures;condition faults",
      "IEEE Terms": "Maintenance engineering;Support vector machines;Data structures;Systematics;Semisupervised learning;Debugging;Space exploration",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 21,
      "License": "IEEE",
      "Online Date": "16-Jan-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Boa Meets Python: A Boa Dataset of Data Science Software in Python Language",
      "Authors": "S. Biswas; M. J. Islam; Y. Huang; H. Rajan",
      "Author Affiliations": "Department of Computer Science, Iowa State University, Ames, IA, USA; Department of Computer Science, Iowa State University, Ames, IA, USA; Department of Computer Science, Iowa State University, Ames, IA, USA; Department of Computer Science, Iowa State University, Ames, IA, USA",
      "Publication Title": "2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "29-Aug-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 577,
      "End Page": 581,
      "Abstract": "The popularity of Python programming language has surged in recent years due to its increasing usage in Data Science. The availability of Python repositories in Github presents an opportunity for mining software repository research, e.g., suggesting the best practices in developing Data Science applications, identifying bug-patterns, recommending code enhancements, etc. To enable this research, we have created a new dataset that includes 1,558 mature Github projects that develop Python software for Data Science tasks. By analyzing the metadata and code, we have included the projects in our dataset which use a diverse set of machine learning libraries and managed by a variety of users and organizations. The dataset is made publicly available through Boa infrastructure both as a collection of raw projects as well as in a processed form that could be used for performing large scale analysis using Boa language. We also present two initial applications to demonstrate the potential of the dataset that could be leveraged by the community.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-3412-3",
      "DOI": "10.1109/MSR.2019.00086",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816757",
      "Author Keywords": "MSR;Boa;AST;machine learning;data science;open source repositories;program analysis",
      "IEEE Terms": "Python;Data science;Libraries;Metadata;Machine learning;Data mining",
      "Mesh_Terms": "",
      "Article Citation Count": 15,
      "Patent Citation Count": null,
      "Reference Count": 18,
      "License": "IEEE",
      "Online Date": "29-Aug-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "How can i improve my app? Classifying user reviews for software maintenance and evolution",
      "Authors": "S. Panichella; A. Di Sorbo; E. Guzman; C. A. Visaggio; G. Canfora; H. C. Gall",
      "Author Affiliations": "University of Zurich, Switzerland; Universita degli Studi del Sannio, Benevento, Campania, IT; +Technische Universitat Munchen, Garchinz, Germanv; Universita degli Studi del Sannio, Benevento, Campania, IT; Tuniversity of Sannio, Benevento, Italy; Tuniversity of Sannio, Benevento, Italy",
      "Publication Title": "2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "23-Nov-15",
      "Publication Year": 2015,
      "Volume": null,
      "Issue": null,
      "Start Page": 281,
      "End Page": 290,
      "Abstract": "App Stores, such as Google Play or the Apple Store, allow users to provide feedback on apps by posting review comments and giving star ratings. These platforms constitute a useful electronic mean in which application developers and users can productively exchange information about apps. Previous research showed that users feedback contains usage scenarios, bug reports and feature requests, that can help app developers to accomplish software maintenance and evolution tasks. However, in the case of the most popular apps, the large amount of received feedback, its unstructured nature and varying quality can make the identification of useful user feedback a very challenging task. In this paper we present a taxonomy to classify app reviews into categories relevant to software maintenance and evolution, as well as an approach that merges three techniques: (1) Natural Language Processing, (2) Text Analysis and (3) Sentiment Analysis to automatically classify app reviews into the proposed categories. We show that the combined use of these techniques allows to achieve better results (a precision of 75% and a recall of 74%) than results obtained using each technique individually (precision of 70% and a recall of 67%).",
      "ISSN": "",
      "ISBNs": "978-1-4673-7532-0",
      "DOI": "10.1109/ICSM.2015.7332474",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7332474",
      "Author Keywords": "User Reviews;Mobile Applications;Natural Language Processing;Sentiment Analysis;Text classification",
      "IEEE Terms": "Taxonomy;Software maintenance;Feature extraction;Natural language processing;Mobile communication;Maintenance engineering;Text analysis",
      "Mesh_Terms": "",
      "Article Citation Count": 288,
      "Patent Citation Count": 2,
      "Reference Count": 39,
      "License": "IEEE",
      "Online Date": "23-Nov-15",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "METHODS2TEST: A dataset of focal methods mapped to test cases",
      "Authors": "M. Tufano; S. K. Deng; N. Sundaresan; A. Svyatkovskiy",
      "Author Affiliations": "Microsoft, Redmond, WA, USA; Microsoft, Redmond, WA, USA; Microsoft, Redmond, WA, USA; Microsoft, Redmond, WA, USA",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 299,
      "End Page": 303,
      "Abstract": "Unit testing is an essential part of the software development process, which helps to identify issues with source code in early stages of development and prevent regressions. Machine learning has emerged as viable approach to help software developers generate automated unit tests. However, generating reliable unit test cases that are semantically correct and capable of catching software bugs or unintended behavior via machine learning requires large, metadata-rich, datasets. In this paper we present Methods2Test: a large, supervised dataset of test cases mapped to corresponding methods under test (i.e., focal methods). This dataset contains 780,944 pairs of JUnit tests and focal methods, extracted from a total of 91,385 Java open source projects hosted on GitHub with licenses permitting re-distribution. The main challenge behind the creation of the Methods2Test was to establish a reliable mapping between a test case and the relevant focal method. To this aim, we designed a set of heuristics, based on developers' best practices in software testing, which identify the likely focal method for a given test case. To facilitate further analysis, we store a rich set of metadata for each method-test pair in JSON-formatted files. Additionally, we extract textual corpus from the dataset at different context levels, which we provide both in raw and tokenized forms, in order to enable researchers to train and evaluate machine learning models for Automated Test Generation. Methods2Test is publicly available at: https://github.com/microsoft/methods2test",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3528009",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796371",
      "Author Keywords": "datasets;software testing",
      "IEEE Terms": "Software testing;Java;Machine learning;Metadata;Software reliability",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 28,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Regression Testing of Massively Multiplayer Online Role-Playing Games",
      "Authors": "Y. Wu; Y. Chen; X. Xie; B. Yu; C. Fan; L. Ma",
      "Author Affiliations": "Fuxi AI Lab, Netease, Inc.; Fuxi AI Lab, Netease, Inc.; Nanyang Technological University; Kyushu University; Fuxi AI Lab, Netease, Inc.; Kyushu University",
      "Publication Title": "2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "2-Nov-20",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 692,
      "End Page": 696,
      "Abstract": "Regression testing aims to check the functionality consistency during software evolution. Although general regression testing has been extensively studied, regression testing in the context of video games, especially Massively Multiplayer Online Role-Playing Games (MMORPGs), is largely untouched so far. One big challenge is that game testing requires a certain level of intelligence in generating suitable action sequences among the huge search space, to accomplish complex tasks in the MMORPG. Existing game testing mainly relies on either the manual playing or manual scripting, which are labor-intensive and time-consuming. Even worse, it is often unable to satisfy the frequent industrial game evolution. The recent process in machine learning brings new opportunities for automatic game playing and testing. In this paper, we propose a reinforcement learning-based regression testing technique that explores differential behaviors between multiple versions of an MMORPGs such that the potential regression bugs could be detected. The preliminary evaluation on real industrial MMORPGs demonstrates the promising of our technique.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-7281-5619-4",
      "DOI": "10.1109/ICSME46990.2020.00074",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9240641",
      "Author Keywords": "Game Testing, Reinforcement Learning",
      "IEEE Terms": "Software maintenance;Computer bugs;Games;Manuals;Machine learning;Task analysis;Testing",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 29,
      "License": "IEEE",
      "Online Date": "2-Nov-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Capturing Contextual Relationships of Buggy Classes for Detecting Quality-Related Bugs",
      "Authors": "R. Krasniqi; H. Do",
      "Author Affiliations": "Dept. of Computer Science and Eng., University of North Texas, Denton, TX, USA; Dept. of Computer Science and Eng., University of North Texas, Denton, TX, USA",
      "Publication Title": "2023 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "11-Dec-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 375,
      "End Page": 379,
      "Abstract": "Quality concerns are critical for addressing system-wide issues related to reliability, security, and performance, among others. However, these concerns often become scattered across the codebase, making it challenging for software developers to effectively address quality bugs. In this paper, we propose a holistic approach to detecting and clustering quality-related content hidden within the codebase. By leveraging the Hierarchical Dirichlet Process (HDP) and complementary techniques such as information retrieval and machine learning, including structural and textual analysis, we create a meaningful hierarchy that detects classes containing relevant information for addressing quality bugs. This approach allows us to uncover rich synergies between complex structured artifacts and infer bug-fixing classes for repairing quality bugs. The reported results show that our approach improves over the state-of-the-art achieving a high precision of 83%, recall of 82%, and F1 score of 83%.",
      "ISSN": "2576-3148",
      "ISBNs": "979-8-3503-2783-0",
      "DOI": "10.1109/ICSME58846.2023.00048",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10336297",
      "Author Keywords": "Quality Bugs;Hierarchical Topic Modeling;Vector Space Model;Contextual Relationships",
      "IEEE Terms": "Software maintenance;Computer bugs;Machine learning;Information retrieval;Software reliability;Security;Context modeling",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 34,
      "License": "IEEE",
      "Online Date": "11-Dec-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Linking Source Code to Untangled Change Intents",
      "Authors": "X. Liu; L. Huang; C. Li; V. Ng",
      "Author Affiliations": "Department of Computer Science and Engineering, Southern Methodist University, Dallas, TX, USA; Department of Computer Science and Engineering, Southern Methodist University, Dallas, TX, USA; Nanjing University, Nanjing, Jiangsu, CN; Human Language Technology Research Institute, University of Texas, Dallas, TX, USA",
      "Publication Title": "2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "11-Nov-18",
      "Publication Year": 2018,
      "Volume": null,
      "Issue": null,
      "Start Page": 393,
      "End Page": 403,
      "Abstract": "Previous work [13] suggests that tangled changes (i.e., different change intents aggregated in one single commit message) could complicate tracing to different change tasks when developers manage software changes. Identifying links from changed source code to untangled change intents could help developers solve this problem. Manually identifying such links requires lots of experience and review efforts, however. Unfortunately, there is no automatic method that provides this capability. In this paper, we propose AutoCILink, which automatically identifies code to untangled change intent links with a pattern-based link identification system (AutoCILink-P) and a supervised learning-based link classification system (AutoCILink-ML). Evaluation results demonstrate the effectiveness of both systems: the pattern-based AutoCILink-P and the supervised learning-based AutoCILink-ML achieve average accuracy of 74.6% and 81.2%, respectively.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-5386-7870-1",
      "DOI": "10.1109/ICSME.2018.00047",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8530046",
      "Author Keywords": "Commit, Code change, Machine learning",
      "IEEE Terms": "Software;Task analysis;Computer bugs;Machine learning;Cognition;Gold;Additives",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 42,
      "License": "IEEE",
      "Online Date": "11-Nov-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Identifying Compiler and Optimization Options from Binary Code using Deep Learning Approaches",
      "Authors": "D. Pizzolotto; K. Inoue",
      "Author Affiliations": "Osaka University, Osaka, Japan; Osaka University, Osaka, Japan",
      "Publication Title": "2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "2-Nov-20",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 232,
      "End Page": 242,
      "Abstract": "When compiling a source file, several flags can be passed to the compiler. These flags, however, can vary between debug and release compilation. In the release compilation, in fact, smaller or faster executables are usually preferred, whereas for a debug one, ease-of-debug is preferred over speed and no optimization is involved. After the compilation, however, most of the flags used cannot be inferred from the compiled file. These flags could be useful in case we want to classify if an older build was made for release or debug purposes, or to check if the file was compiled with flags that could expose vulnerabilities. In this paper we present a deep learning network capable of automatically detecting, with function granularity, the compiler used and the presence of optimization with 99% accuracy. We also analyze the change in accuracy when submitting increasingly shorter amounts of data, from 2048 up to a single byte, obtaining competitive results with less than 100 bytes. We also present our process in the huge dataset creation and manipulation, along with a comparison with other less successful networks using functions of varying size.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-7281-5619-4",
      "DOI": "10.1109/ICSME46990.2020.00031",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9240714",
      "Author Keywords": "Static Analysis;Binary Analysis;Deep Learning;Compilers",
      "IEEE Terms": "Deep learning;Software maintenance;Conferences;Binary codes;Convolutional neural networks;Optimization",
      "Mesh_Terms": "",
      "Article Citation Count": 8,
      "Patent Citation Count": null,
      "Reference Count": 28,
      "License": "IEEE",
      "Online Date": "2-Nov-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Automated Characterization of Software Vulnerabilities",
      "Authors": "D. Gonzalez; H. Hastings; M. Mirakhorli",
      "Author Affiliations": "Rochester Institute of Technology, Rochester, NY, USA; Rochester Institute of Technology, Rochester, NY, USA; Rochester Institute of Technology, Rochester, NY, USA",
      "Publication Title": "2019 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "5-Dec-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 135,
      "End Page": 139,
      "Abstract": "Preventing vulnerability exploits is a critical software maintenance task, and software engineers often rely on Common Vulnerability and Exposure (CVEs) reports for information about vulnerable systems and libraries. These reports include descriptions, disclosure sources, and manually-populated vulnerability characteristics such as root cause from the NIST Vulnerability Description Ontology (VDO). This information needs to be complete and accurate so stakeholders of affected products can prevent and react to exploits of the reported vulnerabilities. In this study, we demonstrate that VDO characteristics can be automatically detected from the textual descriptions included in CVE reports. We evaluated the performance of 6 classification algorithms with a dataset of 365 vulnerability descriptions, each mapped to 1 of 19 characteristics from the VDO. This work demonstrates that it is feasible to train classification techniques to accurately characterize vulnerabilities from their descriptions. All 6 classifiers evaluated produced accurate results, and the Support Vector Machine classifier was the best-performing individual classifier. Automating the vulnerability characterization process is a step towards ensuring stakeholders have the necessary data to effectively maintain their systems.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-7281-3094-1",
      "DOI": "10.1109/ICSME.2019.00023",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8918946",
      "Author Keywords": "software maintainence;vulnerability characterization;text classification;CVE;VDO",
      "IEEE Terms": "Support vector machines;Software;Task analysis;Measurement;NIST;Ontologies;Stakeholders",
      "Mesh_Terms": "",
      "Article Citation Count": 6,
      "Patent Citation Count": null,
      "Reference Count": 17,
      "License": "IEEE",
      "Online Date": "5-Dec-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Peeler: Learning to Effectively Predict Flakiness without Running Tests",
      "Authors": "Y. Qin; S. Wang; K. Liu; B. Lin; H. Wu; L. Li; X. Mao; T. F. Bissyand√©",
      "Author Affiliations": "National University of Defense Technology, China; National University of Defense Technology, China; Huawei Software Engineering Application Technology Lab, China; National University of Defense Technology, China; National University of Defense Technology, China; Monash University, Australia; National University of Defense Technology, China; University of Luxembourg, Luxembourg",
      "Publication Title": "2022 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "19-Dec-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 257,
      "End Page": 268,
      "Abstract": "Regression testing is a widely adopted approach to expose change-induced bugs as well as to verify the correctness/robustness of code in modern software development settings. Unfortunately, the occurrence of flaky tests leads to a significant increase in the cost of regression testing and eventually reduces the productivity of developers (i.e., their ability to find and fix real problems). State-of-the-art approaches leverage dynamic test information obtained through expensive re-execution of test cases to effectively identify flaky tests. Towards accounting for scalability constraints, some recent approaches have built on static test case features, but fall short on effectiveness. In this paper, we introduce Peeler, a new fully static approach for predicting flaky tests through exploring a representation of test cases based on the data dependency relations. The predictor is then trained as a neural network based model, which achieves at the same time scalability (because it does not require any test execution), effectiveness (because it exploits relevant test dependency features), and practicality (because it can be applied in the wild to find new flaky tests). Experimental validation on 17,532 test cases from 21 Java projects shows that Peeler outperforms the state-of-the-art FlakeFlagger by around 20 percentage points: we catch 22% more flaky tests while yielding 51% less false positives. Finally, in a live study with projects in-the-wild, we reported to developers 21 flakiness cases, among which 12 have already been confirmed by developers as being indeed flaky.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-7956-1",
      "DOI": "10.1109/ICSME55016.2022.00031",
      "Funding Information": "National Natural Science Foundation of China; Natural Science Foundation of Jiangsu Province; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9978221",
      "Author Keywords": "Flaky tests;Deep learning;Program dependency",
      "IEEE Terms": "Productivity;Software maintenance;Java;Costs;Scalability;Neural networks;Computer bugs",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 44,
      "License": "IEEE",
      "Online Date": "19-Dec-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "An Empirical Study on Bugs Inside PyTorch: A Replication Study",
      "Authors": "S. C. Yin Ho; V. Majdinasab; M. Islam; D. E. Costa; E. Shihab; F. Khomh; S. Nadi; M. Raza",
      "Author Affiliations": "Concordia University; Polytechnique Montr√©al; University of Alberta; Universit√© du Qu√©bec √† Montr√©al; Concordia University; Polytechnique Montr√©al; University of Alberta; Queen‚Äôs University",
      "Publication Title": "2023 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "11-Dec-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 220,
      "End Page": 231,
      "Abstract": "Software systems are increasingly relying on deep learning components, due to their remarkable capability of identifying complex data patterns and powering intelligent behaviour. A core enabler of this change in software development is the availability of easy-to-use deep learning libraries. Libraries like PyTorch and TensorFlow empower a large variety of intelligent systems, offering a multitude of algorithms and configuration options, applicable to numerous domains of systems. However, bugs in those popular deep learning libraries also may have dire consequences for the quality of systems they enable; thus, it is important to understand how bugs are identified and fixed in those libraries.Inspired by a study of Jia et al., which investigates the bug identification and fixing process at TensorFlow, we characterize bugs in the PyTorch library, a very popular deep learning framework. We investigate the causes and symptoms of bugs identified during PyTorch‚Äôs development, and assess their locality within the project, and extract patterns of bug fixes. Our results highlight that PyTorch bugs are more like traditional software projects bugs, than related to deep learning characteristics. Finally, we also compare our results with the study on TensorFlow, highlighting similarities and differences across the bug identification and fixing process.",
      "ISSN": "2576-3148",
      "ISBNs": "979-8-3503-2783-0",
      "DOI": "10.1109/ICSME58846.2023.00031",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10336350",
      "Author Keywords": "Deep Learning;Bug Analysis;Software Library Defect;PyTorch;Empirical Study",
      "IEEE Terms": "Deep learning;Software maintenance;Computer bugs;Software algorithms;Software systems;Libraries;Intelligent systems",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 57,
      "License": "IEEE",
      "Online Date": "11-Dec-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Automatically Tagging the ‚ÄúAAA‚Äù Pattern in Unit Test Cases Using Machine Learning Models",
      "Authors": "C. Wei; L. Xiao; T. Yu; X. Chen; X. Wang; S. Wong; A. Clune",
      "Author Affiliations": "School of Systems and Enterprises, Stevens Institute of Technology, Hoboken, NJ, USA; School of Systems and Enterprises, Stevens Institute of Technology, Hoboken, NJ, USA; Department of EECS, University of Cincinnati, Cincinnati, OH, USA; HSBC Software Development (Guangdong) Limited, Guangzhou, Guangdong Province, China; School of Systems and Enterprises, Stevens Institute of Technology, Hoboken, NJ, USA; Envestnet, Inc., Berwyn, PA, USA; AGI, Ansys Company, Exton, PA, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "15-May-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 5,
      "Start Page": 3305,
      "End Page": 3324,
      "Abstract": "The AAA pattern (i.e., Arrange-Act-Assert) is a common and natural layout to create a test case. Following this pattern in test cases may benefit comprehension, debugging, and maintenance. The AAA structure of real-life test cases, however, may not be clear due to their high complexity. Manually labeling AAA statements in test cases is tedious. Thus, we envision that an automated approach for labeling AAA statements in existing test cases could benefit new developers and projects that practice collective code ownership and test-driven development. This paper contributes an automatic approach based on machine learning models. The ‚Äúsecret sauce‚Äù of this approach is a set of three learning features that are based on the semantic, syntax, and context information in test cases, derived from the manual tagging process. Thus, our approach mimics how developers may manually tag the AAA pattern of a test case. We assess the precision, recall, and F-1 score of our approach based on 449 test cases, containing about 16,612 statements, across 4 Apache open source projects. To achieve the best performance in our approach, we explore the usage of six machine learning models; the contribution of the SMOTE data balancing technique; the comparison of the three learning features; and the comparison of five different methods for calculating the semantic feature. The results show our approach is able to identify Arrangement, Action, and Assertion statements with a precision upwards of 92%, and recall up to 74%. We also summarize some experience based on our experiments‚Äîregarding the choice of machine learning models, data balancing algorithm, and feature engineering methods‚Äîwhich could potentially provide some reference to related future research.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3252442",
      "Funding Information": "National Science Foundation(grant numbers:CCF-1909085,CCF-1909763); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10058578",
      "Author Keywords": "AAA pattern;feature engineering;machine learning;natural language processing;software testing;unit testing",
      "IEEE Terms": "Codes;Machine learning;Tagging;Debugging;Production;Maintenance engineering;Computer bugs",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 81,
      "License": "IEEE",
      "Online Date": "3-Mar-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Test Input Prioritization for Machine Learning Classifiers",
      "Authors": "X. Dang; Y. Li; M. Papadakis; J. Klein; T. F. Bissyand√©; Y. L. Traon",
      "Author Affiliations": "University of Luxembourg, Kirchberg, Luxembourg; University of Luxembourg, Kirchberg, Luxembourg; University of Luxembourg, Kirchberg, Luxembourg; University of Luxembourg, Kirchberg, Luxembourg; University of Luxembourg, Kirchberg, Luxembourg; University of Luxembourg, Kirchberg, Luxembourg",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "18-Mar-24",
      "Publication Year": 2024,
      "Volume": 50,
      "Issue": 3,
      "Start Page": 413,
      "End Page": 442,
      "Abstract": "Machine learning has achieved remarkable success across diverse domains. Nevertheless, concerns about interpretability in black-box models, especially within Deep Neural Networks (DNNs), have become pronounced in safety-critical fields like healthcare and finance. Classical machine learning (ML) classifiers, known for their higher interpretability, are preferred in these domains. Similar to DNNs, classical ML classifiers can exhibit bugs that could lead to severe consequences in practice. Test input prioritization has emerged as a promising approach to ensure the quality of an ML system, which prioritizes potentially misclassified tests so that such tests can be identified earlier with limited manual labeling costs. However, when applying to classical ML classifiers, existing DNN test prioritization methods are constrained from three perspectives: 1) Coverage-based methods are inefficient and time-consuming; 2) Mutation-based methods cannot be adapted to classical ML models due to mismatched model mutation rules; 3) Confidence-based methods are restricted to a single dimension when applying to binary ML classifiers, solely depending on the model's prediction probability for one class. To overcome the challenges, we propose MLPrior, a test prioritization approach specifically tailored for classical ML models. MLPrior leverages the characteristics of classical ML classifiers (i.e., interpretable models and carefully engineered attribute features) to prioritize test inputs. The foundational principles are: 1) tests more sensitive to mutations are more likely to be misclassified, and 2) tests closer to the model's decision boundary are more likely to be misclassified. Building on the first concept, we design mutation rules to generate two types of mutation features (i.e., model mutation features and input mutation features) for each test. Drawing from the second notion, MLPrior generates attribute features of each test based on its attribute values, which can indirectly reveal the proximity between the test and the decision boundary. For each test, MLPrior combines all three types of features of it into a final vector. Subsequently, MLPrior employs a pre-trained ranking model to predict the misclassification probability of each test based on its final vector and ranks tests accordingly. We conducted an extensive study to evaluate MLPrior based on 185 subjects, encompassing natural datasets, mixed noisy datasets, and fairness datasets. The results demonstrate that MLPrior outperforms all the compared test prioritization approaches, with an average improvement of 14.74%$\\sim$‚àº66.93% on natural datasets, 18.55%$\\sim$‚àº67.73% on mixed noisy datasets, and 15.34%$\\sim$‚àº62.72% on fairness datasets.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2024.3350019",
      "Funding Information": "Luxembourg National Research Fund AFR PhD(grant numbers:17036341); European Research Council (ERC)(grant numbers:949014); Luxembourg National Research Funds (FNR)(grant numbers:C20/IS/14761415/TestFlakes); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10382258",
      "Author Keywords": "Test input prioritization;machine learning;mutation analysis;learning to rank;labelling",
      "IEEE Terms": "Predictive models;Adaptation models;Labeling;Machine learning;Testing;Noise measurement;Manuals",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 120,
      "License": "CCBY",
      "Online Date": "5-Jan-24",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Comments on ‚ÄúResearcher Bias: The Use of Machine Learning in Software Defect Prediction‚Äù",
      "Authors": "C. Tantithamthavorn; S. McIntosh; A. E. Hassan; K. Matsumoto",
      "Author Affiliations": "Graduate School of Information Science, Nara Institute of Science and Technology, Nara, Japan; Department of Electrical and Computer Engineering, McGill University, Montreal, QC, Canada; School of Computing, Queen's University, Kingston, ON, Canada; Graduate School of Information Science, Nara Institute of Science and Technology, Nara, Japan",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "10-Nov-16",
      "Publication Year": 2016,
      "Volume": 42,
      "Issue": 11,
      "Start Page": 1092,
      "End Page": 1094,
      "Abstract": "Shepperd et al. find that the reported performance of a defect prediction model shares a strong relationship with the group of researchers who construct the models. In this paper, we perform an alternative investigation of Shepperd et al.'s data. We observe that (a) research group shares a strong association with other explanatory variables (i.e., the dataset and metric families that are used to build a model); (b) the strong association among these explanatory variables makes it difficult to discern the impact of the research group on model performance; and (c) after mitigating the impact of this strong association, we find that the research group has a smaller impact than the metric family. These observations lead us to conclude that the relationship between the research group and the performance of a defect prediction model are more likely due to the tendency of researchers to reuse experimental components (e.g., datasets and metrics). We recommend that researchers experiment with a broader selection of datasets and metrics to combat any potential bias in their results.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2016.2553030",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7450669",
      "Author Keywords": "Software quality assurance;defect prediction;researcher bias",
      "IEEE Terms": "Measurement;Interference;Analysis of variance;Predictive models;Analytical models;NASA;Data models",
      "Mesh_Terms": "",
      "Article Citation Count": 60,
      "Patent Citation Count": null,
      "Reference Count": 18,
      "License": "IEEE",
      "Online Date": "11-Apr-16",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Authors‚Äô Reply to ‚ÄúComments on ‚ÄòResearcher Bias: The Use of Machine Learning in Software Defect Prediction‚Äô‚Äù",
      "Authors": "M. Shepperd; T. Hall; D. Bowes",
      "Author Affiliations": "Department of Computer Science, Brunel University London, Uxbridge, United Kingdom; Department of Computer Science, Brunel University London, Uxbridge, United Kingdom; University of Hertfordshire, Hatfield, United Kingdom",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "11-Nov-18",
      "Publication Year": 2018,
      "Volume": 44,
      "Issue": 11,
      "Start Page": 1129,
      "End Page": 1131,
      "Abstract": "In 2014 we published a meta-analysis of software defect prediction studies [1] . This suggested that the most important factor in determining results was Research Group, i.e., who conducts the experiment is more important than the classifier algorithms being investigated. A recent re-analysis [2] sought to argue that the effect is less strong than originally claimed since there is a relationship between Research Group and Dataset. In this response we show (i) the re-analysis is based on a small (21 percent) subset of our original data, (ii) using the same re-analysis approach with a larger subset shows that Research Group is more important than type of Classifier and (iii) however the data are analysed there is compelling evidence that who conducts the research has an effect on the results. This means that the problem of researcher bias remains. Addressing it should be seen as a matter of priority amongst those of us who conduct and publish experiments comparing the performance of competing software defect prediction systems.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2017.2731308",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7990255",
      "Author Keywords": "Software quality assurance;defect prediction;researcher bias",
      "IEEE Terms": "Software;NASA;Measurement;Analysis of variance;Data models;Predictive models;Analytical models",
      "Mesh_Terms": "",
      "Article Citation Count": 8,
      "Patent Citation Count": null,
      "Reference Count": 5,
      "License": "IEEE",
      "Online Date": "24-Jul-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "You Are the Only Possible Oracle: Effective Test Selection for End Users of Interactive Machine Learning Systems",
      "Authors": "A. Groce; T. Kulesza; C. Zhang; S. Shamasunder; M. Burnett; W. -K. Wong; S. Stumpf; S. Das; A. Shinsel; F. Bice; K. McIntosh",
      "Author Affiliations": "School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, Oregon; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, Oregon; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, Oregon; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, Oregon; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, Oregon; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, Oregon; Centre for HCI Design, School of Informatics, City University London, London, United Kingdom; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, Oregon; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, Oregon; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, Oregon; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, Oregon",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "31-Mar-14",
      "Publication Year": 2014,
      "Volume": 40,
      "Issue": 3,
      "Start Page": 307,
      "End Page": 323,
      "Abstract": "How do you test a program when only a single user, with no expertise in software testing, is able to determine if the program is performing correctly? Such programs are common today in the form of machine-learned classifiers. We consider the problem of testing this common kind of machine-generated program when the only oracle is an end user: e.g., only you can determine if your email is properly filed. We present test selection methods that provide very good failure rates even for small test suites, and show that these methods work in both large-scale random experiments using a ‚Äúgold standard‚Äù and in studies with real users. Our methods are inexpensive and largely algorithm-independent. Key to our methods is an exploitation of properties of classifiers that is not possible in traditional software testing. Our results suggest that it is plausible for time-pressured end users to interactively detect failures-even very hard-to-find failures-without wading through a large number of successful (and thus less useful) tests. We additionally show that some methods are able to find the arguably most difficult-to-detect faults of classifiers: cases where machine learning algorithms have high confidence in an incorrect result.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2013.59",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6682887",
      "Author Keywords": "Machine learning;end-user testing;test suite size",
      "IEEE Terms": "Testing;Software;Training;Training data;Electronic mail;Software algorithms;Machine learning algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": 42,
      "Patent Citation Count": null,
      "Reference Count": 63,
      "License": "IEEE",
      "Online Date": "12-Dec-13",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Characterizing and Understanding Software Security Vulnerabilities in Machine Learning Libraries",
      "Authors": "N. S. Harzevili; J. Shin; J. Wang; S. Wang; N. Nagappan",
      "Author Affiliations": "Lassonde School of Engineering, York University, Toronto, Canada; Lassonde School of Engineering, York University, Toronto, Canada; Institute of Software Chinese Academy of Sciences, Beijing, China; Lassonde School of Engineering, York University, Toronto, Canada; IIIT Delhi, New Delhi, India",
      "Publication Title": "2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "12-Jul-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 27,
      "End Page": 38,
      "Abstract": "The application of machine learning (ML) libraries has tremendously increased in many domains, including autonomous driving systems, medical, and critical industries. Vulnerabilities of such libraries could result in irreparable consequences. However, the characteristics of software security vulnerabilities have not been well studied. In this paper, to bridge this gap, we take the first step toward characterizing and understanding the security vulnerabilities of seven well-known ML libraries, including TensorFlow, PyTorch, Scikit-learn, Mlpack, Pandas, Numpy, and Scipy. To do so, we collected 683 security vulnerabilities to explore four major factors: 1) vulnerability types, 2) root causes, 3) symptoms, and 4) fixing patterns of security vulnerabilities in the studied ML libraries. The findings of this study can help developers and researchers understand the characteristics of security vulnerabilities across the studied ML libraries.",
      "ISSN": "2574-3864",
      "ISBNs": "979-8-3503-1184-6",
      "DOI": "10.1109/MSR59073.2023.00018",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173858",
      "Author Keywords": "Security vulnerability;machine learning libraries;empirical study",
      "IEEE Terms": "Industries;Machine learning;Debugging;Reliability engineering;Libraries;Software;Software reliability",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 52,
      "License": "IEEE",
      "Online Date": "12-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "How (Not) to Find Bugs: The Interplay Between Merge Conflicts, Co-Changes, and Bugs",
      "Authors": "L. Amaral; M. C. Oliveira; W. Luz; J. Fortes; R. Bonif√°cio; D. Alencar; E. Monteiro; G. Pinto; D. Lo",
      "Author Affiliations": "University of Bras√≠lia, Bras√≠lia, Brazil; Brazilian Ministry of Economy, Bras√≠lia, Brazil; University of Bras√≠lia, Bras√≠lia, Brazil; University of Bras√≠lia, Bras√≠lia, Brazil; University of Bras√≠lia, Bras√≠lia, Brazil; Brazilian Ministry of Economy, Bras√≠lia, Brazil; University of Bras√≠lia, Bras√≠lia, Brazil; Federal University of Par√°, Bel√©m, Brazil; Singapore Management University, Singapore",
      "Publication Title": "2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "2-Nov-20",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 441,
      "End Page": 452,
      "Abstract": "Context: In a seminal work, Ball et al. [1] investigate if the information available in version control systems could be used to predict defect density, arguing that practitioners and researchers could better understand errors \"if [our] version control system could talk\". In the meanwhile, several research works have reported that conflict merge resolution is a time consuming and error-prone task, while other contributions diverge about the correlation between co-change dependencies and defect density. Problem: The correlation between conflicting merge scenarios and bugs has not been addressed before, whilst the correlation between co-change dependencies and bug density has been only investigated using a small number of case studies-which can compromise the generalization of the results. Goal: To address this gap in the literature, this paper presents the results of a comprehensive study whose goal is to understand whether or not (a) conflicting merge scenarios and (b) co-change dependencies are good predictors for bug density. Method: We first build a curated dataset comprising the source code history of 29 popular Java Apache projects and leverage the SZZ algorithm to collect the sets of bug-fixing and bug-introducing commits. We then combine the SZZ results with the set of past conflicting merge scenarios and co-change dependencies of the projects. Finally, we use exploratory data analysis and machine learning models to understand the strength of the correlation between conflict resolution and co-change dependencies with defect density. Findings: (a) conflicting merge scenarios are not more prone to introduce bugs than regular commits, (b) there is a negligible to a small correlation between co-change dependencies and defect density-contradicting previous studies in the literature.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-7281-5619-4",
      "DOI": "10.1109/ICSME46990.2020.00049",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9240688",
      "Author Keywords": "software defects;software integration;merge conflicts;co-change dependencies",
      "IEEE Terms": "Software maintenance;Correlation;Machine learning algorithms;Computer bugs;Control systems;Prediction algorithms;Task analysis",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 52,
      "License": "IEEE",
      "Online Date": "2-Nov-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Deep Green: Modelling Time-Series of Software Energy Consumption",
      "Authors": "S. Romansky; N. C. Borle; S. Chowdhury; A. Hindle; R. Greiner",
      "Author Affiliations": "Department of Computing Science, University of Alberta Edmonton, Canada; Department of Computing Science, University of Alberta Edmonton, Canada; Department of Computing Science, University of Alberta Edmonton, Canada; Department of Computing Science, University of Alberta Edmonton, Canada; Department of Computing Science, University of Alberta Edmonton, Canada",
      "Publication Title": "2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "7-Nov-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 273,
      "End Page": 283,
      "Abstract": "Inefficient mobile software kills battery life. Yet, developers lack the tools necessary to detect and solve energy bugs in software. In addition, developers are usually tasked with the creation of software features and triaging existing bugs. This means that most developers do not have the time or resources to research, build, or employ energy debugging tools. We present a new method for predicting software energy consumption to help debug software energy issues. Our approach enables developers to align traces of software behavior with traces of software energy consumption. This allows developers to match run-time energy hot spots to the corresponding execution. We accomplish this by applying recent neural network models to predict time series of energy consumption given a software's behavior. We compare our time series models to prior state-of-the-art models that only predict total software energy consumption. We found that machine learning based time series based models, and LSTM based time series based models, can often be more accurate at predicting instantaneous power use and total energy consumption.",
      "ISSN": "",
      "ISBNs": "978-1-5386-0992-7",
      "DOI": "10.1109/ICSME.2017.79",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8094428",
      "Author Keywords": "energy;software engineering;online model;profiling;green mining;modelling",
      "IEEE Terms": "Software;Energy consumption;Predictive models;Tools;Time series analysis;Energy measurement;Hardware",
      "Mesh_Terms": "",
      "Article Citation Count": 14,
      "Patent Citation Count": null,
      "Reference Count": 36,
      "License": "IEEE",
      "Online Date": "7-Nov-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "CounterFault: Value-Based Fault Localization by Modeling and Predicting Counterfactual Outcomes",
      "Authors": "A. Podgurski; Y. K√º√ß√ºk",
      "Author Affiliations": "Department of Computer and Data Sciences, Case Western Reserve University, Cleveland, OH, USA; Department of Computer and Data Sciences, Case Western Reserve University, Cleveland, OH, USA",
      "Publication Title": "2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "2-Nov-20",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 382,
      "End Page": 393,
      "Abstract": "This paper presents a new, flexible approach to automatically localizing faults in software, named CounterFault. It uses a form of causal inference called counterfactual prediction to predict the effect, on the success or failure of an execution Ex, of intervening at a statement s to set an assignment target A to a value a that is not actually assigned to A in Ex but that could be if s or Ex was modified. CounterFault generates this prediction without actually modifying s or Ex, by employing a very flexible non-parametric statistical or machine learning model (e.g., a random forest). CounterFault applies this basic idea to estimate, with minimal confounding bias, the average causal effects on program failures of different changes in the values assigned to program variables, and these estimates are then employed to derive suspiciousness scores, which are used to assist developers in localizing faults. This paper also reports on an empirical evaluation of CounterFault involving the widely used Defects4J evaluation framework, which contains real software faults, as well as several other Java numerical programs. CounterFault is compared empirically with two other value-based fault localization techniques and four of the best performing coverage-based techniques. The results indicate that CounterFault is more effective than the competing techniques.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-7281-5619-4",
      "DOI": "10.1109/ICSME46990.2020.00044",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9240635",
      "Author Keywords": "fault localization, causal inference, counterfactual outcome, causal effect, confounding bias, software engineering, statistical fault localization, causal inference methodology",
      "IEEE Terms": "Software maintenance;Java;Conferences;Predictive models;Numerical models;Random forests",
      "Mesh_Terms": "",
      "Article Citation Count": 6,
      "Patent Citation Count": null,
      "Reference Count": 51,
      "License": "IEEE",
      "Online Date": "2-Nov-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "On the Security of Python Virtual Machines: An Empirical Study",
      "Authors": "X. Lin; B. Hua; Q. Fan",
      "Author Affiliations": "School of Software Engineering, University of Science and Technology of China, China; School of Software Engineering, University of Science and Technology of China, China; School of Software Engineering, University of Science and Technology of China, China",
      "Publication Title": "2022 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "19-Dec-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 223,
      "End Page": 234,
      "Abstract": "Python continues to be one of the most popular programming languages and has been used in many safety-critical fields such as medical treatment, autonomous driving systems, and data science. These fields put forward higher security requirements to Python ecosystems. However, existing studies on machine learning systems in Python concentrate on data security, model security and model privacy, and just assume the underlying Python virtual machines (PVMs) are secure and trustworthy. Unfortunately, whether such an assumption really holds is still unknown.This paper presents, to the best of our knowledge, the first and most comprehensive empirical study on the security of CPython, the official and most deployed Python virtual machine. To this end, we first designed and implemented a software prototype dubbed PVMSCAN, then use it to scan the source code of the latest CPython (version 3.10) and other 10 versions (3.0 to 3.9), which consists of 3,838,606 lines of source code. Empirical results give relevant findings and insights towards the security of Python virtual machines, such as: 1) CPython virtual machines are still vulnerable, for example, PVMSCAN detected 239 vulnerabilities in version 3.10, including 55 null dereferences, 86 uninitialized variables and 98 dead stores; Python/C API-related vulnerabilities are very common and have become one of the most severe threats to the security of PVMs: for example, 70 Python/C API-related vulnerabilities are identified in CPython 3.10; 3) the overall quality of the code remained stable during the evolution of Python VMs with vulnerabilities per thousand line (VPTL) to be 0.50; and 4) automatic vulnerability rectification is effective: 166 out of 239 (69.46%) vulnerabilities can be rectified by a simple yet effective syntax-directed heuristics.We have reported our empirical results to the developers of CPython, and they have acknowledged us and already confirmed and fixed 2 bugs (as of this writing) while others are still being analyzed. This study not only demonstrates the effectiveness of our approach, but also highlights the need to improve the reliability of infrastructures like Python virtual machines by leveraging state-of-the-art security techniques and tools.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-7956-1",
      "DOI": "10.1109/ICSME55016.2022.00028",
      "Funding Information": "University of Science and Technology of China; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9978245",
      "Author Keywords": "Empirical;Python virtual machines;Security",
      "IEEE Terms": "Software maintenance;Source coding;Prototypes;Data science;Writing;Virtual machining;Data models",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 110,
      "License": "IEEE",
      "Online Date": "19-Dec-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Efficient Bug Triage For Industrial Environments",
      "Authors": "W. Zhang",
      "Author Affiliations": "Adobe Inc., Mclean, VA, USA",
      "Publication Title": "2020 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "2-Nov-20",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 727,
      "End Page": 735,
      "Abstract": "Bug triage is an important task for software maintenance, especially in the industrial environment, where timely bug fixing is critical for customer experience. This process is usually done manually and often takes significant time. In this paper, we propose a machine-learning-based solution to address the problem efficiently. We argue that in the industrial environment, it is more suitable to assign bugs to software components (then to responsible developers) than to developers directly. Because developers can change their roles in industry, they may not oversee the same software module as before. We also demonstrate experimentally that assigning bugs to components rather than developers leads to much higher accuracy. Our solution is based on text-projection features extracted from bug descriptions. We use a Deep Neural Network to train the classification model. The proposed solution achieves state-of-the-art performance based on extensive experiments using multiple data sets. Moreover, our solution is computationally efficient and runs in near real-time.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-7281-5619-4",
      "DOI": "10.1109/ICSME46990.2020.00082",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9240673",
      "Author Keywords": "Automatic bug triage;machine learning;text classification",
      "IEEE Terms": "Industries;Software maintenance;Computer bugs;Neural networks;Feature extraction;Real-time systems;Task analysis",
      "Mesh_Terms": "",
      "Article Citation Count": 11,
      "Patent Citation Count": null,
      "Reference Count": 26,
      "License": "IEEE",
      "Online Date": "2-Nov-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "An Empirical Study on Performance Bugs in Deep Learning Frameworks",
      "Authors": "T. Makkouk; D. J. Kim; T. -H. P. Chen",
      "Author Affiliations": "Software PEformance, Analysis and Reliability (SPEAR) Lab, Concordia University, Montreal, Canada; Software PEformance, Analysis and Reliability (SPEAR) Lab, Concordia University, Montreal, Canada; Software PEformance, Analysis and Reliability (SPEAR) Lab, Concordia University, Montreal, Canada",
      "Publication Title": "2022 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "19-Dec-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 35,
      "End Page": 46,
      "Abstract": "Machine Learning (ML) and Deep Learning (DL) applications are becoming more popular due to the availability of DL frameworks such as TensorFlow and PyTorch. Therefore, the quality of DL frameworks is essential to ensure DL/ML application quality. Given the computationally expensive nature of DL tasks (e.g., training), performance is a critical aspect of DL frameworks. However, optimizing DL frameworks may have its own unique challenges due to the peculiarities of DL (e.g., hardware integration and the nature of the computation). In this paper, we conduct an empirical study on the performance bugs in DL frameworks. We conduct our study on TensorFlow and PyTorch by identifying the performance and non-performance bugs by mining the GitHub repositories. We find that 1) the proportion of newly reported performance bugs increases faster than fixed performance bugs, and the ratio of performance bugs among all bugs increases over time; 2) performance bugs take more time to fix, have larger fix sizes, and more community engagement (e.g., discussion) compared to non-performance bugs; and 3) we manually derived a taxonomy of 12 categories and 19 sub-categories of the root causes of performance bugs by studying all performance bug fixes. Finally, we present some actionable implications for researchers and developers.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-7956-1",
      "DOI": "10.1109/ICSME55016.2022.00012",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9978257",
      "Author Keywords": "empirical;software engineering;machine learning;deep learning;performance bugs",
      "IEEE Terms": "Deep learning;Training;Software maintenance;Computer bugs;Taxonomy;Hardware;Data mining",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 81,
      "License": "IEEE",
      "Online Date": "19-Dec-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "CCLearner: A Deep Learning-Based Clone Detection Approach",
      "Authors": "L. Li; H. Feng; W. Zhuang; N. Meng; B. Ryder",
      "Author Affiliations": "Department of Computer Science, Virginia Tech, Blacksburg, VA, USA; Department of Computer Science, Virginia Tech, Blacksburg, VA, USA; Department of Computer Science, Virginia Tech, Blacksburg, VA, USA; Department of Computer Science, Virginia Tech, Blacksburg, VA, USA; Department of Computer Science, Virginia Tech, Blacksburg, VA, USA",
      "Publication Title": "2017 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "7-Nov-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 249,
      "End Page": 260,
      "Abstract": "Programmers produce code clones when developing software. By copying and pasting code with or without modification, developers reuse existing code to improve programming productivity. However, code clones present challenges to software maintenance: they may require consistent application of the same or similar bug fixes or program changes to multiple code locations. To simplify the maintenance process, various tools have been proposed to automatically detect clones [1], [2], [3], [4], [5], [6]. Some tools tokenize source code, and then compare the sequence or frequency of tokens to reveal clones [1], [3], [4], [5]. Some other tools detect clones using tree-matching algorithms to compare the Abstract Syntax Trees (ASTs) of source code [2], [6]. In this paper, we present CCLEARNER, the first solely token-based clone detection approach leveraging deep learning. CCLEARNER extracts tokens from known method-level code clones and nonclones to train a classifier, and then uses the classifier to detect clones in a given codebase. To evaluate CCLEARNER, we reused BigCloneBench [7], an existing large benchmark of real clones. We used part of the benchmark for training and the other part for testing, and observed that CCLEARNER effectively detected clones. With the same data set, we conducted the first systematic comparison experiment between CCLEARNER and three popular clone detection tools. Compared with the approaches not using deep learning, CCLEARNER achieved competitive clone detection effectiveness with low time cost.",
      "ISSN": "",
      "ISBNs": "978-1-5386-0992-7",
      "DOI": "10.1109/ICSME.2017.46",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8094426",
      "Author Keywords": "deep learning;clone detection;empirical",
      "IEEE Terms": "Cloning;Feature extraction;Machine learning;Neural networks;Tools;Training;Testing",
      "Mesh_Terms": "",
      "Article Citation Count": 108,
      "Patent Citation Count": null,
      "Reference Count": 46,
      "License": "IEEE",
      "Online Date": "7-Nov-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Constrained feature selection for localizing faults",
      "Authors": "T. -D. B. Le; D. Lo; M. Li",
      "Author Affiliations": "School of Information Systems, Singapore Management University, Singapore; School of Information Systems, Singapore Management University, Singapore; Collaborative Innovation Center of Novel Software Technology and Industrialization, Nanjing University",
      "Publication Title": "2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "23-Nov-15",
      "Publication Year": 2015,
      "Volume": null,
      "Issue": null,
      "Start Page": 501,
      "End Page": 505,
      "Abstract": "Developers often take much time and effort to find buggy program elements. To help developers debug, many past studies have proposed spectrum-based fault localization techniques. These techniques compare and contrast correct and faulty execution traces and highlight suspicious program elements. In this work, we propose constrained feature selection algorithms that we use to localize faults. Feature selection algorithms are commonly used to identify important features that are helpful for a classification task. By mapping an execution trace to a classification instance and a program element to a feature, we can transform fault localization to the feature selection problem. Unfortunately, existing feature selection algorithms do not perform too well, and we extend its performance by adding a constraint to the feature selection formulation based on a specific characteristic of the fault localization problem. We have performed experiments on a popular benchmark containing 154 faulty versions from 8 programs and demonstrate that several variants of our approach can outperform many fault localization techniques proposed in the literature. Using Wilcoxon rank-sum test and Cliff's d effect size, we also show that the improvements are both statistically significant and substantial.",
      "ISSN": "",
      "ISBNs": "978-1-4673-7532-0",
      "DOI": "10.1109/ICSM.2015.7332502",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7332502",
      "Author Keywords": "",
      "IEEE Terms": "Standards;Feature extraction;Software;Machine learning algorithms;Benchmark testing;Computer bugs;Information systems",
      "Mesh_Terms": "",
      "Article Citation Count": 10,
      "Patent Citation Count": null,
      "Reference Count": 14,
      "License": "IEEE",
      "Online Date": "23-Nov-15",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "You Look so Different: Finding Structural Clones and Subclones in Java Source Code",
      "Authors": "W. Amme; T. S. Heinze; A. Sch√§fer",
      "Author Affiliations": "Institute of Computer Science Friedrich Schiller University Jena, Jena, Germany; Institute of Data Science German Aerospace Center (DLR), Jena, Germany; Institute of Computer Science Friedrich Schiller University Jena, Jena, Germany",
      "Publication Title": "2021 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "24-Nov-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 70,
      "End Page": 80,
      "Abstract": "Code reuse and copying is a widespread practice in software development. Detecting code clones, i.e., identical or similar fragments of code, is thus an important task with many applications, ranging from code search to bug finding and malware detection. In this paper, we propose a new approach to detect code clones in source code. Instead of analyzing the code tokens or syntax, our technique is based upon control flow analysis and dominator trees. In this way, the technique not only detects exact and syntactically similar near-miss code clones but also two new types of clones, which we characterize as structural code clones and subclones. For implementation and evaluation, we have developed the tool StoneDetector, which finds code clones in Java source code. StoneDetector performs competitive with the state of the art as measured on the BigCloneBench benchmark and finds more structural clones and subclones.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-2882-8",
      "DOI": "10.1109/ICSME52107.2021.00013",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9609181",
      "Author Keywords": "code clone;clone detection;subclone;structural clone;code duplication",
      "IEEE Terms": "Java;Software maintenance;Codes;Cloning;Machine learning;Tools;Syntactics",
      "Mesh_Terms": "",
      "Article Citation Count": 9,
      "Patent Citation Count": null,
      "Reference Count": 52,
      "License": "IEEE",
      "Online Date": "24-Nov-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Identifying Defect-Inducing Changes in Visual Code",
      "Authors": "K. Eng; A. Hindle; A. Senchenko",
      "Author Affiliations": "Quality, Verification & Standards, Electronic Arts, Edmonton, Canada; Department of Computing Science, University of Alberta, Edmonton, Canada; Quality, Verification & Standards, Electronic Arts, Vancouver, Canada",
      "Publication Title": "2023 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "11-Dec-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 474,
      "End Page": 484,
      "Abstract": "Defects, or bugs, often form during software development. Identifying the root cause of defects is essential to improve code quality, evaluate testing methods, and support defect prediction. Examples of defect-inducing changes can be found using the SZZ algorithm to trace the textual history of defect-fixing changes back to the defect-inducing changes that they fix in line-based code. The line-based approach of the SZZ method is ineffective for visual code that represents source code graphically rather than textually. In this paper we adapt SZZ for visual code and present the SZZ Visual Code (SZZ-VC) algorithm, that finds changes in visual code based on the differences of graphical elements rather than differences of lines to detect defect-inducing changes. We validated the algorithm for an industry-made AAA video game and 20 music visual programming defects across 12 open source projects. Our results show that SZZ-VC is feasible for detecting defects in visual code for 3 different visual programming languages.",
      "ISSN": "2576-3148",
      "ISBNs": "979-8-3503-2783-0",
      "DOI": "10.1109/ICSME58846.2023.00061",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10336342",
      "Author Keywords": "visual programming;visual code;bugs;defects;version control",
      "IEEE Terms": "Visualization;Video games;Software maintenance;Codes;Source coding;Software algorithms;Machine learning",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 51,
      "License": "IEEE",
      "Online Date": "11-Dec-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Learning to Combine Multiple Ranking Metrics for Fault Localization",
      "Authors": "J. Xuan; M. Monperrus",
      "Author Affiliations": "INRIA Lille - Nord Europe, Lille, France; University of Lille & INRIA, Lille, France",
      "Publication Title": "2014 IEEE International Conference on Software Maintenance and Evolution",
      "Date Added To Xplore": "6-Dec-14",
      "Publication Year": 2014,
      "Volume": null,
      "Issue": null,
      "Start Page": 191,
      "End Page": 200,
      "Abstract": "Fault localization is an inevitable step in software debugging. Spectrum-based fault localization consists in computing a ranking metric on execution traces to identify faulty source code. Existing empirical studies on fault localization show that there is no optimal ranking metric for all faults in practice. In this paper, we propose Multric, a learning-based approach to combining multiple ranking metrics for effective fault localization. In Multric, a suspiciousness score of a program entity is a combination of existing ranking metrics. Multric consists two major phases: learning and ranking. Based on training faults, Multric builds a ranking model by learning from pairs of faulty and non-faulty source code elements. When a new fault appears, Multric computes the final ranking with the learned model. Experiments are conducted on 5386 seeded faults in ten open-source Java programs. We empirically compare Multric against four widely-studied metrics and three recently-proposed one. Our experimental results show that Multric localizes faults more effectively than state-of-art metrics, such as Tarantula, Ochiai, and Ample.",
      "ISSN": "1063-6773",
      "ISBNs": "978-1-4799-6146-7",
      "DOI": "10.1109/ICSME.2014.41",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6976085",
      "Author Keywords": "Fault localization;learning to rank;multiple ranking metrics",
      "IEEE Terms": "Measurement;Training data;Training;Object oriented modeling;Computational modeling;Java;Debugging",
      "Mesh_Terms": "",
      "Article Citation Count": 129,
      "Patent Citation Count": 1,
      "Reference Count": 35,
      "License": "IEEE",
      "Online Date": "6-Dec-14",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "An Empirical Study of Challenges in Converting Deep Learning Models",
      "Authors": "M. Openja; A. Nikanjam; A. H. Yahmed; F. Khomh; Z. M. J. Jiang",
      "Author Affiliations": "Polytechnique Montr√©al, Montreal, Quebec, Canada; Polytechnique Montr√©al, Montreal, Quebec, Canada; Polytechnique Montr√©al, Montreal, Quebec, Canada; Polytechnique Montr√©al, Montreal, Quebec, Canada; York University, Toronto, Ontario, Canada",
      "Publication Title": "2022 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "19-Dec-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 13,
      "End Page": 23,
      "Abstract": "There is an increase in deploying Deep Learning (DL)-based software systems in real-world applications. Usually, DL models are developed and trained using DL frameworks like TensorFlow and PyTorch. Each framework has its own internal mechanisms/formats to represent and train DL models (deep neural networks), and usually those formats cannot be recognized by other frameworks. Moreover, trained models are usually deployed in environments different from where they were developed. To solve the interoperability issue and make DL models compatible with different frameworks/environments, some exchange formats are introduced for DL models, like ONNX and CoreML. However, ONNX and CoreML were never empirically evaluated by the community to reveal their prediction accuracy, performance, and robustness after conversion. Poor accuracy or non-robust behavior of converted models may lead to poor quality of deployed DL-based software systems. We conduct, in this paper, the first empirical study to assess ONNX and CoreML for converting trained DL models. In our systematic approach, two popular DL frameworks, Keras and PyTorch, are used to train five widely used DL models on three popular datasets. The trained models are then converted to ONNX and CoreML and transferred to two runtime environments designated for such formats, to be evaluated. We investigate the prediction accuracy before and after conversion. Our results unveil that the prediction accuracy of converted models are at the same level of originals. The performance (time cost and memory consumption) of converted models are studied as well. The size of models are reduced after conversion, which can result in optimized DL-based software deployment. We also study the adversarial robustness of converted models to make sure about the robustness of deployed DL-based software. Leveraging the state-of-the-art adversarial attack approaches, converted models are generally assessed robust at the same level of originals. However, obtained results show that CoreML models are more vulnerable to adversarial attacks compared to ONNX. The general message of our findings is that DL developers should be cautious on the deployment of converted models that may 1) perform poorly while switching from one framework to another, 2) have challenges in robust deployment, or 3) run slowly, leading to poor quality of deployed DL-based software, including DL-based software maintenance tasks, like bug prediction.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-7956-1",
      "DOI": "10.1109/ICSME55016.2022.00010",
      "Funding Information": "Natural Sciences and Engineering Research Council of Canada; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9978197",
      "Author Keywords": "Empirical;Deep Learning;Converting Trained Models;Deploying ML Models;Robustness",
      "IEEE Terms": "Deep learning;Analytical models;Software maintenance;Runtime environment;Systematics;Switches;Predictive models",
      "Mesh_Terms": "",
      "Article Citation Count": 8,
      "Patent Citation Count": null,
      "Reference Count": 40,
      "License": "IEEE",
      "Online Date": "19-Dec-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "DRLgencert: Deep Learning-Based Automated Testing of Certificate Verification in SSL/TLS Implementations",
      "Authors": "C. Chen; W. Diao; Y. Zeng; S. Guo; C. Hu",
      "Author Affiliations": "Shandong University, Jinan, China; Jinan University, Guangzhou, China; China Mobile (Hangzhou) Information Technology Co., Ltd., Hangzhou, China; Shandong University, Jinan, China; Shandong University, Jinan, China",
      "Publication Title": "2018 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "11-Nov-18",
      "Publication Year": 2018,
      "Volume": null,
      "Issue": null,
      "Start Page": 48,
      "End Page": 58,
      "Abstract": "The Secure Sockets Layer (SSL) and Transport Layer Security (TLS) protocols are the foundation of network security. The certificate verification in SSL/TLS implementations is vital and may become the \"weak link\" in the whole network ecosystem. In previous works, some research focused on the automated testing of certificate verification, and the main approaches rely on generating massive certificates through randomly combining parts of seed certificates for fuzzing. Although the generated certificates could meet the semantic constraints, the cost is quite heavy, and the performance is limited due to the randomness. To fill this gap, in this paper, we propose DRLGENCERT, the first framework of applying deep reinforcement learning to the automated testing of certificate verification in SSL/TLS implementations. DRLGENCERT accepts ordinary certificates as input and outputs newly generated certificates which could trigger discrepancies with high efficiency. Benefited by the deep reinforcement learning, when generating certificates, our framework could choose the best next action according to the result of a previous modification, instead of simple random combinations. At the same time, we developed a set of new techniques to support the overall design, like new feature extraction method for X.509 certificates, fine-grained differential testing, and so forth. Also, we implemented a prototype of DRLGENCERT and carried out a series of real-world experiments. The results show DRLGENCERT is quite efficient, and we obtained 84,661 discrepancy-triggering certificates from 181,900 certificate seeds, say around 46.5% effectiveness. Also, we evaluated six popular SSL/TLS implementations, including GnuTLS, MatrixSSL, MbedTLS, NSS, OpenSSL, and wolfSSL. DRLGENCERT successfully discovered 23 serious certificate verification flaws, and most of them were previously unknown.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-5386-7870-1",
      "DOI": "10.1109/ICSME.2018.00014",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8529836",
      "Author Keywords": "Differential Testing;Deep Reinforcement Learning;SSL/TLS Implementations",
      "IEEE Terms": "Testing;Feature extraction;Security;Task analysis;Semantics",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 31,
      "License": "IEEE",
      "Online Date": "11-Nov-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Identifying Self-Admitted Technical Debts With Jitterbug: A Two-Step Approach",
      "Authors": "Z. Yu; F. M. Fahid; H. Tu; T. Menzies",
      "Author Affiliations": "Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-May-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 5,
      "Start Page": 1676,
      "End Page": 1691,
      "Abstract": "Keeping track of and managing Self-Admitted Technical Debts (SATDs) are important to maintaining a healthy software project. This requires much time and effort from human experts to identify the SATDs manually. The current automated solutions do not have satisfactory precision and recall in identifying SATDs to fully automate the process. To solve the above problems, we propose a two-step framework called Jitterbug for identifying SATDs. Jitterbug first identifies the ‚Äúeasy to find‚Äù SATDs automatically with close to 100 percent precision using a novel pattern recognition technique. Subsequently, machine learning techniques are applied to assist human experts in manually identifying the remaining ‚Äúhard to find‚Äù SATDs with reduced human effort. Our simulation studies on ten software projects show that Jitterbug can identify SATDs more efficiently (with less human effort) than the prior state-of-the-art methods.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2020.3031401",
      "Funding Information": "National Science Foundation(grant numbers:#1703487); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9226105",
      "Author Keywords": "Technical debt;software engineering;machine learning;pattern recognition",
      "IEEE Terms": "Software;Machine learning;Pattern recognition;Training;Computer hacking;Machine learning algorithms;Estimation",
      "Mesh_Terms": "",
      "Article Citation Count": 18,
      "Patent Citation Count": null,
      "Reference Count": 52,
      "License": "IEEE",
      "Online Date": "15-Oct-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Automated Recovery of Issue-Commit Links Leveraging Both Textual and Non-textual Data",
      "Authors": "P. R. Mazrae; M. Izadi; A. Heydarnoori",
      "Author Affiliations": "Computer Engineering Department, Sharif University of Technology; Computer Engineering Department, Sharif University of Technology; Computer Engineering Department, Sharif University of Technology",
      "Publication Title": "2021 IEEE International Conference on Software Maintenance and Evolution (ICSME)",
      "Date Added To Xplore": "24-Nov-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 263,
      "End Page": 273,
      "Abstract": "An issue report documents the discussions around required changes in issue-tracking systems, while a commit contains the change itself in the version control systems. Recovering links between issues and commits can facilitate many software evolution tasks such as bug localization, defect prediction, software quality measurement, and software documentation. A previous study on over half a million issues from GitHub reports only about 42.2% of issues are manually linked by developers to their pertinent commits. Automating the linking of commit-issue pairs can contribute to the improvement of the said tasks. By far, current state-of-the-art approaches for automated commit-issue linking suffer from low precision, leading to unreliable results, sometimes to the point that imposes human supervision on the predicted links. The low performance gets even more severe when there is a lack of textual information in either commits or issues. Current approaches are also proven computationally expensive. We propose Hybrid-Linker, an enhanced approach that overcomes such limitations by exploiting two information channels; (1) a non-textual-based component that operates on non-textual, automatically recorded information of the commit-issue pairs to predict a link, and (2) a textual-based one which does the same using textual information of the commit-issue pairs. Then, combining the results from the two classifiers, Hybrid-Linker makes the final prediction. Thus, every time one component falls short in predicting a link, the other component fills the gap and improves the results. We evaluate Hybrid-Linker against competing approaches, namely FRLink and DeepLink on a dataset of 12 projects. Hybrid-Linker achieves 90.1%, 87.8%, and 88.9% based on recall, precision, and F-measure, respectively. It also outperforms FRLink and DeepLink by 31.3%, and 41.3%, regarding the F-measure. Moreover, the proposed approach exhibits extensive improvements in terms of performance as well. Finally, our source code and data are publicly available.",
      "ISSN": "2576-3148",
      "ISBNs": "978-1-6654-2882-8",
      "DOI": "10.1109/ICSME52107.2021.00030",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9609165",
      "Author Keywords": "Link Recovery;Issue Report;Commit;Software Maintenance;Machine Learning;Ensemble Methods",
      "IEEE Terms": "Location awareness;Software maintenance;Current measurement;Conferences;Software quality;Documentation;Control systems",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 22,
      "License": "IEEE",
      "Online Date": "24-Nov-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Varangian: A Git Bot for Augmented Static Analysis",
      "Authors": "S. Pujar; Y. Zheng; L. Buratti; B. Lewis; A. Morari; J. Laredo; K. Postlethwait; C. G√∂rn",
      "Author Affiliations": "IBM Research, United States; IBM Research, United States; IBM Research, United States; IBM Research, United States; IBM Research, United States; IBM Research, United States; Red Hat, United States; Red Hat, United States",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 766,
      "End Page": 767,
      "Abstract": "The complexity and scale of modern software programs often lead to overlooked programming errors and security vulnerabilities. Developers often rely on automatic tools, like static analysis tools, to look for bugs and vulnerabilities. Static analysis tools are widely used because they can understand nontrivial program behaviors, scale to millions of lines of code, and detect subtle bugs. However, they are known to generate an excess of false alarms which hinder their utilization as it is counterproductive for developers to go through a long list of reported issues, only to find a few true positives. One of the ways proposed to suppress false positives is to use machine learning to identify them. However, training machine learning models requires good quality labeled datasets. For this purpose, we developed D2A [3], a differential analysis based approach that uses the commit history of a code repository to create a labeled dataset of Infer [2] static analysis output.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3528516",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796288",
      "Author Keywords": "security;static analysis;git;bot;machine learning;bert",
      "IEEE Terms": "Training;Codes;Computer bugs;Static analysis;Machine learning;Programming;Software",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 3,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "A Machine Learning Approach for Vulnerability Curation",
      "Authors": "Y. Chen; A. E. Santosa; A. M. Yi; A. Sharma; A. Sharma; D. Lo",
      "Author Affiliations": "Veracode; Veracode; Veracode; Veracode; Veracode; Singapore Management University",
      "Publication Title": "2020 IEEE/ACM 17th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "20-Jun-23",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 32,
      "End Page": 42,
      "Abstract": "Software composition analysis depends on database of open-source library vulerabilities, curated by security researchers using various sources, such as bug tracking systems, commits, and mailing lists. We report the design and implementation of a machine learning system to help the curation by by automatically predicting the vulnerability-relatedness of each data item. It supports a complete pipeline from data collection, model training and prediction, to the validation of new models before deployment. It is executed iteratively to generate better models as new input data become available. We use self-training to significantly and automatically increase the size of the training dataset, opportunistically maximizing the improvement in the models' quality at each iteration. We devised new deployment stability metric to evaluate the quality of the new models before deployment into production, which helped to discover an error. We experimentally evaluate the improvement in the performance of the models in one iteration, with 27.59% maximum PR AUC improvements. Ours is the first of such study across a variety of data sources. We discover that the addition of the features of the corresponding commits to the features of issues/pull requests improve the precision for the recall values that matter. We demonstrate the effectiveness of self-training alone, with 10.50% PR AUC improvement, and we discover that there is no uniform ordering of word2vec parameters sensitivity across data sources.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-7517-7",
      "DOI": "10.1145/3379597.3387461",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10148736",
      "Author Keywords": "application security;open-source software;machine learning;classifiers ensemble;self-training",
      "IEEE Terms": "Training;Sensitivity;Soft sensors;Pipelines;Machine learning;Predictive models;Data models",
      "Mesh_Terms": "",
      "Article Citation Count": 12,
      "Patent Citation Count": null,
      "Reference Count": 50,
      "License": "",
      "Online Date": "20-Jun-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "On the Relationship between User Churn and Software Issues",
      "Authors": "O. E. Zarif; D. A. Da Costa; S. Hassan; Y. Zou",
      "Author Affiliations": "Queen's University, School Of Computing Kingston, Ontario, Canada; Department of Information Science, University of Otago, Dunedin, Otago, New Zealand; Queen's University, School Of Computing Kingston, Ontario, Canada; Department of Electrical and Computer Engineering, Queen's University, Kingston, Ontario, Canada",
      "Publication Title": "2020 IEEE/ACM 17th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "20-Jun-23",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 339,
      "End Page": 349,
      "Abstract": "The satisfaction of users is only part of the success of a software product, since a strong competition can easily detract users from a software product/service. User churn is the jargon used to denote when a user changes from a product / service to the one offered by the competition. In this study, we empirically investigate the relationship between the issues that are present in a software product and user churn. For this purpose, we investigate a new dataset provided by the alternativeto.net platform. Alternativeto.net has a unique feature that allows users to recommend alternatives for a specific software product, which signals the intention to switch from one software product to another. Through our empirical study, we observe that (i) the intention to change software is tightly associated to the issues that are present in these software; (ii) we can predict the rate of potential churn using machine learning models; (iii) the longer the issue takes to be fixed, the higher the chances of user churn; and (iv) issues within more general software modules are more likely to be associated with user churn. Our study can provide more insights on the prioritization of issues that need to be fixed to proactively minimize the chances of user churn.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-7517-7",
      "DOI": "10.1145/3379597.3387456",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10148789",
      "Author Keywords": "software issues;users churn;software alternatives;deep learning",
      "IEEE Terms": "Computer bugs;Machine learning;Switches;Documentation;Predictive models;Software;Web servers",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 0,
      "License": "",
      "Online Date": "20-Jun-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "SniP: An Efficient Stack Tracing Framework for Multi-threaded Programs",
      "Authors": "A. KP; S. Kumar; D. Mishra; B. Panda",
      "Author Affiliations": "Indian Institute of Technology, Kanpur, India; Indian Institute of Technology, Kanpur, India; Indian Institute of Technology, Kanpur, India; Indian Institute of Technology, Bombay, India",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 408,
      "End Page": 412,
      "Abstract": "Usage of the execution stack at run-time captures the dynamic state of programs and can be used to derive useful insights into the program behaviour. The stack usage information can be used to identify and debug performance and security aspects of applications. Binary run-time instrumentation techniques are well known to capture the memory access traces during program execution. Tracing the program in entirety and filtering out stack specific accesses is a commonly used technique for stack related analysis. However, applying vanilla tracing techniques (using tools like Intel Pin) for multi-threaded programs has challenges such as identifying the stack areas to perform efficient run-time tracing. In this paper, we introduce SniP, an open-source stack tracing framework for multi-threaded programs built around Intel's binary instrumentation tool Pin. SniP provides a framework for efficient run-time tracing of stack areas used by multi-threaded applications by identifying the stack areas dynamically. The targeted tracing capability of SniP is demonstrated using a range of multi-threaded applications to show its efficacy in terms of trace size and time to trace. Compared to full program tracing using Pin, SniP achieves up to 75x reduction in terms of trace file size and up to 24x reduction in time to trace. SniP complements existing trace based stack usage analysis tools and we demonstrate that SniP can be easily integrated with the analysis framework through different use-cases.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3528499",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796268",
      "Author Keywords": "Multi-threaded programs;Run-time instrumentation;Stack tracing",
      "IEEE Terms": "Filtering;Instruments;Linux;Debugging;Pins;Performance analysis;Security",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 25,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "ConEx: Efficient Exploration of Big-Data System Configurations for Better Performance",
      "Authors": "R. Krishna; C. Tang; K. Sullivan; B. Ray",
      "Author Affiliations": "Department of Computer Science, Columbia University, New York, NY, USA; Walmart Labs, Mountain View, CA, USA; Department of Computer Science, University of Virginia, Charlottesville, VA, USA; Department of Computer Science, Columbia University, New York, NY, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "15-Mar-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 3,
      "Start Page": 893,
      "End Page": 909,
      "Abstract": "Configuration space complexity makes the big-data software systems hard to configure well. Consider Hadoop, with over nine hundred parameters, developers often just use the default configurations provided with Hadoop distributions. The opportunity costs in lost performance are significant. Popular learning-based approaches to auto-tune software does not scale well for big-data systems because of the high cost of collecting training data. We present a new method based on a combination of Evolutionary Markov Chain Monte Carlo (EMCMC) sampling and cost reduction techniques to find better-performing configurations for big data systems. For cost reduction, we developed and experimentally tested and validated two approaches: using scaled-up big data jobs as proxies for the objective function for larger jobs and using a dynamic job similarity measure to infer that results obtained for one kind of big data problem will work well for similar problems. Our experimental results suggest that our approach promises to improve the performance of big data systems significantly and that it outperforms competing approaches based on random sampling, basic genetic algorithms (GA), and predictive model learning. Our experimental results support the conclusion that our approach strongly demonstrates the potential to improve the performance of big data systems significantly and frugally.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2020.3007560",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9134972",
      "Author Keywords": "Performance optimization;MCMC;SBSE;machine learning",
      "IEEE Terms": "Big Data;Software systems;Machine learning;Markov processes;Monte Carlo methods;Predictive models",
      "Mesh_Terms": "",
      "Article Citation Count": 9,
      "Patent Citation Count": null,
      "Reference Count": 66,
      "License": "IEEE",
      "Online Date": "7-Jul-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Scalable and Accurate Test Case Prioritization in Continuous Integration Contexts",
      "Authors": "A. S. Yaraghi; M. Bagherzadeh; N. Kahani; L. C. Briand",
      "Author Affiliations": "School of EECS, University of Ottawa, Ottawa, ON, Canada; School of EECS, University of Ottawa, Ottawa, ON, Canada; Department of Systems and Computer Engineering, Carleton University, Ottawa, ON, Canada; School of EECS, University of Ottawa, Ottawa, ON, Canada",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "18-Apr-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 4,
      "Start Page": 1615,
      "End Page": 1639,
      "Abstract": "Continuous Integration (CI) requires efficient regression testing to ensure software quality without significantly delaying its CI builds. This warrants the need for techniques to reduce regression testing time, such as Test Case Prioritization (TCP) techniques that prioritize the execution of test cases to detect faults as early as possible. Many recent TCP studies employ various Machine Learning (ML) techniques to deal with the dynamic and complex nature of CI. However, most of them use a limited number of features for training ML models and evaluate the models on subjects for which the application of TCP makes little practical sense, due to their small regression testing time and low number of failed builds. In this work, we first define, at a conceptual level, a data model that captures data sources and their relations in a typical CI environment. Second, based on this data model, we define a comprehensive set of features that covers all features previously used by related studies. Third, we develop methods and tools to collect the defined features for 25 open-source software systems with enough failed builds and whose regression testing takes at least five minutes. Fourth, relying on the collected dataset containing a comprehensive feature set, we answer four research questions concerning data collection time, the effectiveness of ML-based TCP, the impact of the features on effectiveness, the decay of ML-based TCP models over time, and the trade-off between data collection time and the effectiveness of ML-based TCP techniques.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3184842",
      "Funding Information": "Huawei Technologies Canada; Mitacs; Natural Sciences and Engineering Research Council of Canada; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9801672",
      "Author Keywords": "Machine learning;software testing;test case prioritization;test case selection;continuous integration",
      "IEEE Terms": "Feature extraction;Codes;Testing;History;Training;Data collection;Computational modeling",
      "Mesh_Terms": "",
      "Article Citation Count": 9,
      "Patent Citation Count": null,
      "Reference Count": 71,
      "License": "IEEE",
      "Online Date": "20-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Data Set of Program Invariants and Error Paths",
      "Authors": "D. Beyer",
      "Author Affiliations": "LMU, Munich, Germany",
      "Publication Title": "2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "29-Aug-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 111,
      "End Page": 115,
      "Abstract": "The analysis of correctness proofs and counterexamples of program source code is an important way to gain insights into methods that could make it easier in the future to find invariants to prove a program correct or to find bugs. The availability of high-quality data is often a limiting factor for researchers who want to study real program invariants and real bugs. The described data set provides a large collection of concrete verification results, which can be used in research projects as data source or for evaluation purposes. Each result is made available as verification witness, which represents either program invariants that were used to prove the program correct (correctness witness) or an error path to replay the actual bug (violation witness). The verification results are taken from actual verification runs on 10522 verification problems, using the 31 verification tools that participated in the 8th edition of the International Competition on Software Verification (SV-COMP). The collection contains a total of 125720 verification witnesses together with various meta data and a map to relate a witness to the C program that it originates from. Data set is available at: https://doi.org/10.5281/zenodo.2559175.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-3412-3",
      "DOI": "10.1109/MSR.2019.00026",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816801",
      "Author Keywords": "Invariant Mining, Program Comprehension, Formal Verification, Model Checking, Program Analysis, Verification Witnesses, Program Invariants, Error Paths, Bugs",
      "IEEE Terms": "Software;Tools;Metadata;Computer bugs;Benchmark testing;Automata;Standards",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 43,
      "License": "IEEE",
      "Online Date": "29-Aug-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Predictive Mutation Testing",
      "Authors": "J. Zhang; L. Zhang; M. Harman; D. Hao; Y. Jia; L. Zhang",
      "Author Affiliations": "Institute of Software, EECS, Peking University, Beijing, China; Department of Computer Science, University of Texas at Dallas, Richardson, TX; Facebook, London, United Kingdom; Institute of Software, EECS, Peking University, Beijing, China; Facebook, London, United Kingdom; Institute of Software, EECS, Peking University, Beijing, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "17-Sep-19",
      "Publication Year": 2019,
      "Volume": 45,
      "Issue": 9,
      "Start Page": 898,
      "End Page": 918,
      "Abstract": "Test suites play a key role in ensuring software quality. A good test suite may detect more faults than a poor-quality one. Mutation testing is a powerful methodology for evaluating the fault-detection ability of test suites. In mutation testing, a large number of mutants may be generated and need to be executed against the test suite under evaluation to check how many mutants the test suite is able to detect, as well as the kind of mutants that the current test suite fails to detect. Consequently, although highly effective, mutation testing is widely recognized to be also computationally expensive, inhibiting wider uptake. To alleviate this efficiency concern, we propose Predictive Mutation Testing (PMT): the first approach to predicting mutation testing results without executing mutants. In particular, PMT constructs a classification model, based on a series of features related to mutants and tests, and uses the model to predict whether a mutant would be killed or remain alive without executing it. PMT has been evaluated on 163 real-world projects under two application scenarios (cross-version and cross-project). The experimental results demonstrate that PMT improves the efficiency of mutation testing by up to 151.4X while incurring only a small accuracy loss. It achieves above 0.80 AUC values for the majority of projects, indicating a good tradeoff between the efficiency and effectiveness of predictive mutation testing. Also, PMT is shown to perform well on different tools and tests, be robust in the presence of imbalanced data, and have high predictability (over 60 percent confidence) when predicting the execution results of the majority of mutants.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2018.2809496",
      "Funding Information": "National Basic Research Program of China (973 Program)(grant numbers:2016YFB1000801); National Natural Science Foundation of China(grant numbers:61522201,61529201); NSF(grant numbers:CCF-1566589); EPSRC grant DAASE Dynamic Adaptive Automated Software Engineering(grant numbers:EP/J017515/); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8304576",
      "Author Keywords": "PMT;mutation testing;machine learning;binary classification",
      "IEEE Terms": "Predictive models;Pattern classification;Software testing;Sensitivity analysis;Software quality;Machine learning",
      "Mesh_Terms": "",
      "Article Citation Count": 82,
      "Patent Citation Count": null,
      "Reference Count": 105,
      "License": "IEEE",
      "Online Date": "28-Feb-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Style-Analyzer: Fixing Code Style Inconsistencies with Interpretable Unsupervised Algorithms",
      "Authors": "V. Markovtsev; W. Long; H. Mougard; K. Slavnov; E. Bulychev",
      "Author Affiliations": "source{d}, Madrid, Spain; source{d}, Madrid, Spain; source{d}, Madrid, Spain; source{d}, Madrid, Spain; source{d}, Madrid, Spain",
      "Publication Title": "2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "29-Aug-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 468,
      "End Page": 478,
      "Abstract": "Source code reviews are manual, time-consuming, and expensive. Human involvement should be focused on analyzing the most relevant aspects of the program, such as logic and maintainability, rather than amending style, syntax, or formatting defects. Some tools with linting capabilities can format code automatically and report various stylistic violations for supported programming languages. They are based on rules written by domain experts, hence, their configuration is often tedious, and it is impractical for the given set of rules to cover all possible corner cases. Some machine learning-based solutions exist, but they remain uninterpretable black boxes. This paper introduces style-analyzer, a new open source tool to automatically fix code formatting violations using the decision tree forest model which adapts to each codebase and is fully unsupervised. style-analyzer is built on top of our novel assisted code review framework, Lookout. It accurately mines the formatting style of each analyzed Git repository and expresses the found format patterns with compact human-readable rules. style-analyzer can then suggest style inconsistency fixes in the form of code review comments. We evaluate the output quality and practical relevance of style-analyzer by demonstrating that it can reproduce the original style with high precision, measured on 19 popular JavaScript projects, and by showing that it yields promising results in fixing real style mistakes. style-analyzer includes a web application to visualize how the rules are triggered. We release style-analyzer as a reusable and extendable open source software package on GitHub for the benefit of the community.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-3412-3",
      "DOI": "10.1109/MSR.2019.00073",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816753",
      "Author Keywords": "assisted code review, code style, decision tree forest, interpretable machine learning",
      "IEEE Terms": "Decision trees;Feature extraction;Tools;Machine learning;Forestry;Syntactics;Training",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 23,
      "License": "IEEE",
      "Online Date": "29-Aug-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Defectors: A Large, Diverse Python Dataset for Defect Prediction",
      "Authors": "P. Mahbub; O. Shuvo; M. Masudur Rahman",
      "Author Affiliations": "Dalhousie University; Dalhousie University; Dalhousie University",
      "Publication Title": "2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "12-Jul-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 393,
      "End Page": 397,
      "Abstract": "Defect prediction has been a popular research topic where machine learning (ML) and deep learning (DL) have found numerous applications. However, these ML/DL-based defect prediction models are often limited by the quality and size of their datasets. In this paper, we present Defectors, a large dataset for just-in-time and line-level defect prediction. Defectors consists of ‚âà 213K source code files (‚âà 93K defective and ‚âà 120K defect- free) that span across 24 popular Python projects. These projects come from 18 different domains, including machine learning, automation, and internet-of-things. Such a scale and diversity make Defectors a suitable dataset for training ML/DL models, especially transformer models that require large and diverse datasets. We also foresee several application areas of our dataset including defect prediction and defect explanation.",
      "ISSN": "2574-3864",
      "ISBNs": "979-8-3503-1184-6",
      "DOI": "10.1109/MSR59073.2023.00085",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174122",
      "Author Keywords": "Defect Prediction;Just-in-Time;Dataset;Software Engineering",
      "IEEE Terms": "Training;Deep learning;Automation;Source coding;Predictive models;Transformers;Software",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 33,
      "License": "IEEE",
      "Online Date": "12-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Predicting Merge Conflicts in Collaborative Software Development",
      "Authors": "M. Owhadi-Kareshk; S. Nadi; J. Rubin",
      "Author Affiliations": "Dept. of Computing Science, University of Alberta, Edmonton, Canada; Dept. of Computing Science, University of Alberta, AB, Canada, Edmonton, Canada; Dept. of Electrical and Computer Engineering, University of British Columbia, BC, Canada, Vancouver, Canada",
      "Publication Title": "2019 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
      "Date Added To Xplore": "17-Oct-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 1,
      "End Page": 11,
      "Abstract": "Background. During collaborative software development, developers often use branches to add features or fix bugs. When merging changes from two branches, conflicts may occur if the changes are inconsistent. Developers need to resolve these conflicts before completing the merge, which is an error-prone and time-consuming process. Early detection of merge conflicts, which warns developers about resolving conflicts before they become large and complicated, is among the ways of dealing with this problem. Existing techniques do this by continuously pulling and merging all combinations of branches in the background to notify developers as soon as a conflict occurs, which is a computationally expensive process. One potential way for reducing this cost is to use a machine-learning based conflict predictor that filters out the merge scenarios that are not likely to have conflicts, i.e.safe merge scenarios.Aims. In this paper, we assess if conflict prediction is feasible.Method. We design a classifier for predicting merge conflicts, based on 9 light-weight Git feature sets. To evaluate our predictor, we perform a large-scale study on 267,657 merge scenarios from 744 GitHub repositories in seven programming languages.Results. Our results show that we achieve high f1-scores, varying from 0.95 to 0.97 for different programming languages, when predicting safe merge scenarios. The f1-score is between 0.57 and 0.68 for the conflicting merge scenarios.Conclusions. Predicting merge conflicts is feasible in practice, especially in the context of predicting safe merge scenarios as a pre-filtering step for speculative merging.",
      "ISSN": "1949-3789",
      "ISBNs": "978-1-7281-2968-6",
      "DOI": "10.1109/ESEM.2019.8870173",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8870173",
      "Author Keywords": "Conflict Prediction;Git;Software Merging",
      "IEEE Terms": "Merging;Computer languages;Feature extraction;Software;Tools;Machine learning;Correlation",
      "Mesh_Terms": "",
      "Article Citation Count": 22,
      "Patent Citation Count": null,
      "Reference Count": 42,
      "License": "IEEE",
      "Online Date": "17-Oct-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Impact of Discretization Noise of the Dependent Variable on Machine Learning Classifiers in Software Engineering",
      "Authors": "G. K. Rajbahadur; S. Wang; Y. Kamei; A. E. Hassan",
      "Author Affiliations": "Software Analysis and Intelligence Lab (SAIL), School of Computing, Queen's University, Kingston, ON, Canada; Software Analysis and Intelligence Lab (SAIL), School of Computing, Queen's University, Kingston, ON, Canada; Principles of Software Languages (POSL) Lab, Graduate School and Faulty of Information Science and Electrical Engineering, Kyushu University, Fukuoka, Japan; Software Analysis and Intelligence Lab (SAIL), School of Computing, Queen's University, Kingston, ON, Canada",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Jul-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 7,
      "Start Page": 1414,
      "End Page": 1430,
      "Abstract": "Researchers usually discretize a continuous dependent variable into two target classes by introducing an artificial discretization threshold (e.g., median). However, such discretization may introduce noise (i.e., discretization noise) due to ambiguous class loyalty of data points that are close to the artificial threshold. Previous studies do not provide a clear directive on the impact of discretization noise on the classifiers and how to handle such noise. In this paper, we propose a framework to help researchers and practitioners systematically estimate the impact of discretization noise on classifiers in terms of its impact on various performance measures and the interpretation of classifiers. Through a case study of 7 software engineering datasets, we find that: 1) discretization noise affects the different performance measures of a classifier differently for different datasets; 2) Though the interpretation of the classifiers are impacted by the discretization noise on the whole, the top 3 most important features are not affected by the discretization noise. Therefore, we suggest that practitioners and researchers use our framework to understand the impact of discretization noise on the performance of their built classifiers and estimate the exact amount of discretization noise to be discarded from the dataset to avoid the negative impact of such noise.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2924371",
      "Funding Information": "JSPS KAKENHI(grant numbers:JP18H03222); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8744330",
      "Author Keywords": "Discretization noise;discretization;classifiers;feature importance analysis;performance;random forest;logistic regression;decision trees;KNN",
      "IEEE Terms": "Software engineering;Computer bugs;Noise measurement;Software;Machine learning;Regression tree analysis;Logistics",
      "Mesh_Terms": "",
      "Article Citation Count": 15,
      "Patent Citation Count": null,
      "Reference Count": 76,
      "License": "IEEE",
      "Online Date": "24-Jun-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Comprehensive Investigation of the Role of Imbalanced Learning for Software Defect Prediction",
      "Authors": "Q. Song; Y. Guo; M. Shepperd",
      "Author Affiliations": "Department of Computer Science & Technology, Xi'an Jiaotong University, Xi'an, China; Department of Computer Science & Technology, Xi'an Jiaotong University, Xi'an, China; Department of Computer Science, Brunel University, Uxbridge, United Kingdom",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "10-Dec-19",
      "Publication Year": 2019,
      "Volume": 45,
      "Issue": 12,
      "Start Page": 1253,
      "End Page": 1269,
      "Abstract": "Context: Software defect prediction (SDP) is an important challenge in the field of software engineering, hence much research work has been conducted, most notably through the use of machine learning algorithms. However, class-imbalance typified by few defective components and many non-defective ones is a common occurrence causing difficulties for these methods. Imbalanced learning aims to deal with this problem and has recently been deployed by some researchers, unfortunately with inconsistent results. Objective: We conduct a comprehensive experiment to explore (a) the basic characteristics of this problem; (b) the effect of imbalanced learning and its interactions with (i) data imbalance, (ii) type of classifier, (iii) input metrics and (iv) imbalanced learning method. Method: We systematically evaluate 27 data sets, 7 classifiers, 7 types of input metrics and 17 imbalanced learning methods (including doing nothing) using an experimental design that enables exploration of interactions between these factors and individual imbalanced learning algorithms. This yields 27 √ó 7 √ó 7 √ó 17 = 22491 results. The Matthews correlation coefficient (MCC) is used as an unbiased performance measure (unlike the more widely used F1 and AUC measures). Results: (a) we found a large majority (87 percent) of 106 public domain data sets exhibit moderate or low level of imbalance (imbalance ratio <; 10; median = 3.94); (b) anything other than low levels of imbalance clearly harm the performance of traditional learning for SDP; (c) imbalanced learning is more effective on the data sets with moderate or higher imbalance, however negative results are always possible; (d) type of classifier has most impact on the improvement in classification performance followed by the imbalanced learning method itself. Type of input metrics is not influential. (e) only 52% of the combinations of Imbalanced Learner and Classifier have a significant positive effect. Conclusion: This paper offers two practical guidelines. First, imbalanced learning should only be considered for moderate or highly imbalanced SDP data sets. Second, the appropriate combination of imbalanced method and classifier needs to be carefully chosen to ameliorate the imbalanced learning problem for SDP. In contrast, the indiscriminate application of imbalanced learning can be harmful.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2018.2836442",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:61373046,61210004); Brunel University London; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8359087",
      "Author Keywords": "Software defect prediction;bug prediction;imbalanced learning;imbalance ratio;effect size",
      "IEEE Terms": "Software measurement;Boosting;Machine learning algorithms;Bagging;Computer bugs",
      "Mesh_Terms": "",
      "Article Citation Count": 162,
      "Patent Citation Count": null,
      "Reference Count": 92,
      "License": "IEEE",
      "Online Date": "15-May-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Program Repair With Repeated Learning",
      "Authors": "L. Chen; Y. Pei; M. Pan; T. Zhang; Q. Wang; C. A. Furia",
      "Author Affiliations": "Department of Computing, The Hong Kong Polytechnic University, Hong Kong; Department of Computing, The Hong Kong Polytechnic University, Hong Kong, China; State Key Laboratory for Novel Software Technology, Software Institute of Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Department of Computer Science and Technology, Nanjing University, Nanjing, Jiangsu, China; Department of Computing, The Hong Kong Polytechnic University, Hong Kong, China; Software Institute of USI, Universit√† della Svizzera italiana, Lugano, Switzerland",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "14-Feb-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 2,
      "Start Page": 831,
      "End Page": 848,
      "Abstract": "A key challenge in generate-and-validate automated program repair is directing the search for fixes so that it can efficiently find those that are more likely to be correct. To this end, several techniques use machine learning to capture the features of programmer-written fixes. In existing approaches, fitting the model typically takes place before fix generation and is independent of it: the fix generation process uses the learned model as one of its inputs. However, the intermediate outcomes of an ongoing fix generation process often provide valuable information about which candidate fixes were ‚Äúbetter‚Äù; this information could profitably be used to retrain the model, so that each new iteration of the fixing process would also learn from the outcome of previous ones. In this paper, we propose the Liana technique for automated program repair, which is based on this idea of repeatedly learning the features of generated fixes. To this end, Liana uses a fine-grained model that combines information about fix characteristics, their relations to the fixing context, and the results of test execution. The model is initially trained offline, and then repeatedly updated online as the fix generation process unravels; at any step, the most up-to-date model is used to guide the search for fixes‚Äîprioritizing those that are more likely to include the right ingredients. In an experimental evaluation on 732 real-world Java bugs from 3 popular benchmarks, Liana built correct fixes for 134 faults (83 ranked as first in its output)‚Äî improving over several other generate-and-validate program repair tools according to various measures.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3164662",
      "Funding Information": "Hong Kong Research Grants Council(grant numbers:PolyU 152002/18E); National Natural Science Foundation of China(grant numbers:61972193); Hong Kong RGC Theme-Based Research Scheme(grant numbers:T22-505/19-N (P0031331, RBCR, P0031259, RBCP)); RGC GRF(grant numbers:PolyU 152002/18E (P0005550, Q67V),PolyU 152164/14E (P0004750, Q44B)); RGC Germany/HK(grant numbers:G-PolyU503/16); Hong Kong Polytechnic University Fund(grant numbers:P0033695 (ZVRD),P0013879 (BBWH),P0031950 (ZE1N),P0036469 (CDA8),8B2V); Schweizerischer Nationalfonds zur F√∂rderung der Wissenschaftlichen Forschung(grant numbers:Hi-Fi 200021-182060); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9749899",
      "Author Keywords": "Automated program repair (APR);generate-and-validate APR;learning-to-rank;repeated learning",
      "IEEE Terms": "Java;Fitting;Computer bugs;Machine learning;Maintenance engineering;Benchmark testing;Context modeling",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 84,
      "License": "IEEE",
      "Online Date": "5-Apr-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Empirical Study in using Version Histories for Change Risk Classification",
      "Authors": "M. Kiehn; X. Pan; F. Camci",
      "Author Affiliations": "Advanced Micro Devices, Inc., Canada; Advanced Micro Devices, Inc., Canada; Amazon, Austin, USA",
      "Publication Title": "2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "29-Aug-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 58,
      "End Page": 62,
      "Abstract": "Many techniques have been proposed for mining software repositories, predicting code quality and evaluating code changes. Prior work has established links between code ownership and churn metrics, and software quality at file and directory level based on changes that fix bugs. Other metrics have been used to evaluate individual code changes based on preceding changes that induce fixes. This paper combines the two approaches in an empirical study of assessing risk of code changes using established code ownership and churn metrics with fix inducing changes on a large proprietary code repository. We establish a machine learning model for change risk classification which achieves average precision of 0.76 using metrics from prior works and 0.90 using a wider array of metrics. Our results suggest that code ownership metrics can be applied in change risk classification models based on fix inducing changes.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-3412-3",
      "DOI": "10.1109/MSR.2019.00018",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816740",
      "Author Keywords": "Change risk;code ownership;file metrics;machine learning",
      "IEEE Terms": "Measurement;Feature extraction;Predictive models;Computer bugs;Analytical models;Software quality",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 14,
      "License": "IEEE",
      "Online Date": "29-Aug-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Search4Code: Code Search Intent Classification Using Weak Supervision",
      "Authors": "N. Rao; C. Bansal; J. Guan",
      "Author Affiliations": "Microsoft Research; Microsoft Research; Microsoft",
      "Publication Title": "2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "28-Jun-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 575,
      "End Page": 579,
      "Abstract": "Developers use search for various tasks such as finding code, documentation, debugging information, etc. In particular, web search is heavily used by developers for finding code examples and snippets during the coding process. Recently, natural language based code search has been an active area of research. However, the lack of real-world large-scale datasets is a significant bottleneck. In this work, we propose a weak supervision based approach for detecting code search intent in search queries for C# and Java programming languages. We evaluate the approach against several baselines on a real-world dataset comprised of over 1 million queries mined from Bing web search engine and show that the CNN based model can achieve an accuracy of 77% and 76% for C# and Java respectively. Furthermore, we are also releasing Search4Code, the first large-scale real-world dataset of code search queries mined from Bing web search engine. We hope that the dataset will aid future research on code search.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-8710-5",
      "DOI": "10.1109/MSR52588.2021.00077",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9463144",
      "Author Keywords": "code search;weak supervision",
      "IEEE Terms": "Java;Natural languages;Documentation;Debugging;Software;Encoding;C# languages",
      "Mesh_Terms": "",
      "Article Citation Count": 6,
      "Patent Citation Count": null,
      "Reference Count": 30,
      "License": "IEEE",
      "Online Date": "28-Jun-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Dazzle: Using Optimized Generative Adversarial Networks to Address Security Data Class Imbalance Issue",
      "Authors": "R. Shu; T. Xia; L. Williams; T. Menzies",
      "Author Affiliations": "North Carolina State University, USA; North Carolina State University, USA; North Carolina State University, USA; North Carolina State University, USA",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 144,
      "End Page": 155,
      "Abstract": "Background: Machine learning techniques have been widely used and demonstrate promising performance in many software security tasks such as software vulnerability prediction. However, the class ratio within software vulnerability datasets is often highly imbalanced (since the percentage of observed vulnerability is usually very low). Goal: To help security practitioners address software security data class imbalanced issues and further help build better prediction models with resampled datasets. Method: We introduce an approach called Dazzle which is an optimized version of conditional Wasserstein Generative Adversarial Networks with gradient penalty (cWGAN-GP). Dazzle explores the architecture hyperparameters of cWGAN-GP with a novel optimizer called Bayesian Optimization. We use Dazzle to generate minority class samples to resample the original imbalanced training dataset. Results: We evaluate Dazzle with three software security datasets, i.e., Moodle vulnerable files, Ambari bug reports, and JavaScript function code. We show that Dazzle is practical to use and demonstrates promising improvement over existing state-of-the-art oversampling techniques such as SMOTE (e.g., with an average of about 60% improvement rate over SMOTE in recall among all datasets). Conclusion: Based on this study, we would suggest the use of optimized GANs as an alternative method for security vulnerability data class imbalanced issues.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3528437",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796337",
      "Author Keywords": "Security Vulnerability Prediction;Class Imbalance;Hyperparameter Optimization;Generative Adversarial Networks",
      "IEEE Terms": "Training;Computer architecture;Predictive models;Generative adversarial networks;Software;Data models;Security",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 69,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "GiveMeLabeledIssues: An Open Source Issue Recommendation System",
      "Authors": "J. Vargovich; F. Santos; J. Penney; M. A. Gerosa; I. Steinmacher",
      "Author Affiliations": "School of Informatics, Computing, and Cyber Systems, Northern Arizona University, Flagstaff, United States; School of Informatics, Computing, and Cyber Systems, Northern Arizona University, Flagstaff, United States; School of Informatics, Computing, and Cyber Systems, Northern Arizona University, Flagstaff, United States; School of Informatics, Computing, and Cyber Systems, Northern Arizona University, Flagstaff, United States; School of Informatics, Computing, and Cyber Systems, Northern Arizona University, Flagstaff, United States",
      "Publication Title": "2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "12-Jul-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 402,
      "End Page": 406,
      "Abstract": "Developers often struggle to navigate an Open Source Software (OSS) project‚Äôs issue-tracking system and find a suitable task. Proper issue labeling can aid task selection, but current tools are limited to classifying the issues according to their type (e.g., bug, question, good first issue, feature, etc.). In contrast, this paper presents a tool (GiveMeLabeledIssues) that mines project repositories and labels issues based on the skills required to solve them. We leverage the domain of the APIs involved in the solution (e.g., User Interface (UI), Test, Databases (DB), etc.) as a proxy for the required skills. GiveMeLabeledIssues facilitates matching developers‚Äô skills to tasks, reducing the burden on project maintainers. The tool obtained a precision of 83.9% when predicting the API domains involved in the issues. The replication package contains instructions on executing the tool and including new projects. A demo video is available at https://www.youtube.com/watch?v=ic2quUue7i8",
      "ISSN": "2574-3864",
      "ISBNs": "979-8-3503-1184-6",
      "DOI": "10.1109/MSR59073.2023.00061",
      "Funding Information": "National Science Foundation; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174101",
      "Author Keywords": "Open Source Software;Machine Learning;Label;Tag;Task;Issue Tracker",
      "IEEE Terms": "Navigation;Databases;Computer bugs;User interfaces;Labeling;Data mining;Task analysis",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 26,
      "License": "IEEE",
      "Online Date": "12-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Detecting Privacy-Sensitive Code Changes with Language Modeling",
      "Authors": "G. Demirci; V. Murali; I. Ahmad; R. Rao; G. A. Aye",
      "Author Affiliations": "Meta Platforms, Inc, Menlo Park, CA, USA; Meta Platforms, Inc, Menlo Park, CA, USA; Meta Platforms, Inc, Menlo Park, CA, USA; Meta Platforms, Inc, Menlo Park, CA, USA; Meta Platforms, Inc, Menlo Park, CA, USA",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 761,
      "End Page": 762,
      "Abstract": "At Meta, we work to incorporate privacy-by-design into all of our products and keep user information secure. We have created an ML model that detects code changes (‚Äúdiffs‚Äù) that have privacy-sensitive implications. At our scale of tens of thousands of engineers creating hundreds of thousands of diffs each month, we use automated tools for detecting such diffs. Inspired by recent studies on detecting defects [2], [3], [5] and security vulnerabilities [4], [6], [7], we use techniques from natural language processing to build a deep learning system for detecting privacy-sensitive code.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3528518",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796200",
      "Author Keywords": "privacy;software;repository;change;detection;machine learning;privacy sensitive;neural networks",
      "IEEE Terms": "Deep learning;Codes;Databases;Static analysis;Manuals;Feature extraction;Software",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 7,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "On the Costs and Profit of Software Defect Prediction",
      "Authors": "S. Herbold",
      "Author Affiliations": "Institute of Computer Science, University of Goettingen, Goettingen, Germany",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "11-Nov-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 11,
      "Start Page": 2617,
      "End Page": 2631,
      "Abstract": "Defect prediction can be a powerful tool to guide the use of quality assurance resources. However, while lots of research covered methods for defect prediction as well as methodological aspects of defect prediction research, the actual cost saving potential of defect prediction is still unclear. Within this article, we close this research gap and formulate a cost model for software defect prediction. We derive mathematically provable boundary conditions that must be fulfilled by defect prediction models such that there is a positive profit when the defect prediction model is used. Our cost model includes aspects like the costs for quality assurance, the costs of post-release defects, the possibility that quality assurance fails to reveal predicted defects, and the relationship between software artifacts and defects. We initialize the cost model using different assumptions, perform experiments to show trends of the behavior of costs on real projects. Our results show that the unrealistic assumption that defects only affect a single software artifact, which is a standard practice in the defect prediction literature, leads to inaccurate cost estimations. Moreover, the results indicate that thresholds for machine learning metrics are also not suited to define success criteria for software defect prediction.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2957794",
      "Funding Information": "DFG(grant numbers:402774445); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8924628",
      "Author Keywords": "Defect prediction;costs;return on investment",
      "IEEE Terms": "Predictive models;Software;Quality assurance;Measurement;Mathematical model;Machine learning;Computational modeling",
      "Mesh_Terms": "",
      "Article Citation Count": 20,
      "Patent Citation Count": null,
      "Reference Count": 47,
      "License": "IEEE",
      "Online Date": "5-Dec-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Empirical Validation of Automated Vulnerability Curation and Characterization",
      "Authors": "A. Okutan; P. Mell; M. Mirakhorli; I. Khokhlov; J. C. S. Santos; D. Gonzalez; S. Simmons",
      "Author Affiliations": "Leidos, Reston, VA, USA; National Institute of Standards and Technology, Gaithersburg, MD, USA; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA; Sacred Heart University, Fairfield, CT, USA; Department of Computer Science and Engineering, University of Notre Dame, Notre Dame, IN, USA; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "15-May-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 5,
      "Start Page": 3241,
      "End Page": 3260,
      "Abstract": "Prior research has shown that public vulnerability systems such as US National Vulnerability Database (NVD) rely on a manual, time-consuming, and error-prone process which has led to inconsistencies and delays in releasing final vulnerability results. This work provides an approach to curate vulnerability reports in real-time and map textual vulnerability reports to machine readable structured vulnerability attribute data. Designed to support the time consuming human analysis done by vulnerability databases, the system leverages the Common Vulnerabilities and Exposures (CVE) list of vulnerabilities and the vulnerability attributes described by the National Institute of Standards and Technology (NIST) Vulnerability Description Ontology (VDO) framework. Our work uses Natural Language Processing (NLP), Machine Learning (ML) and novel Information Theoretical (IT) methods to provide automated techniques for near real-time publishing, and characterization of vulnerabilities using 28 attributes in 5 domains. Experiment results indicate that vulnerabilities can be evaluated up to 95 hours earlier than using manual methods, they can be characterized with F-Measure values over 0.9, and the proposed automated approach could save up to 47% of the time spent for CVE characterization.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3250479",
      "Funding Information": "U.S. Department of Homeland Security(grant numbers:70RSAT19CB0000020); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10056768",
      "Author Keywords": "CVE;NIST vulnerability description ontology;software vulnerability;vulnerability characterization",
      "IEEE Terms": "Security;NIST;Databases;Virtual machine monitors;Software;Feature extraction;Codes",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 71,
      "License": "IEEE",
      "Online Date": "28-Feb-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Predicting Vulnerable Software Components via Text Mining",
      "Authors": "R. Scandariato; J. Walden; A. Hovsepyan; W. Joosen",
      "Author Affiliations": "IBBT-DistriNet, KU Leuven, 3001 Leuven, Belgium; Department of Computer Science, Northern Kentucky University, Highland Heights, KY; IBBT-DistriNet, KU Leuven, 3001 Leuven, Belgium; IBBT-DistriNet, KU Leuven, 3001 Leuven, Belgium",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "9-Oct-14",
      "Publication Year": 2014,
      "Volume": 40,
      "Issue": 10,
      "Start Page": 993,
      "End Page": 1006,
      "Abstract": "This paper presents an approach based on machine learning to predict which components of a software application contain security vulnerabilities. The approach is based on text mining the source code of the components. Namely, each component is characterized as a series of terms contained in its source code, with the associated frequencies. These features are used to forecast whether each component is likely to contain vulnerabilities. In an exploratory validation with 20 Android applications, we discovered that a dependable prediction model can be built. Such model could be useful to prioritize the validation activities, e.g., to identify the components needing special scrutiny.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2014.2340398",
      "Funding Information": "EU FP7(grant numbers:NESSoS); Research Fund KU Leuven; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6860243",
      "Author Keywords": "Vulnerabilities;prediction model;machine learning",
      "IEEE Terms": "Software;Predictive models;Measurement;Security;Androids;Humanoid robots;Text mining",
      "Mesh_Terms": "",
      "Article Citation Count": 224,
      "Patent Citation Count": null,
      "Reference Count": 40,
      "License": "IEEE",
      "Online Date": "18-Jul-14",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Search-Based Testing Approach for Deep Reinforcement Learning Agents",
      "Authors": "A. Zolfagharian; M. Abdellatif; L. C. Briand; M. Bagherzadeh; R. S",
      "Author Affiliations": "School of Electrical Engineering and Computer Science (EECS), University of Ottawa, Ottawa, ON, Canada; Software and Information Technology Engineering Department, √âcole de Technologie Sup√©rieure, Montreal, QC, Canada; School of Electrical Engineering and Computer Science (EECS), University of Ottawa, Ottawa, ON, Canada; Cisco, Ottawa, ON, Canada; Department of Research and Development, General Motors, Warren, MI, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "17-Jul-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 7,
      "Start Page": 3715,
      "End Page": 3735,
      "Abstract": "Deep Reinforcement Learning (DRL) algorithms have been increasingly employed during the last decade to solve various decision-making problems such as autonomous driving, trading decisions, and robotics. However, these algorithms have faced great challenges when deployed in safety-critical environments since they often exhibit erroneous behaviors that can lead to potentially critical errors. One of the ways to assess the safety of DRL agents is to test them to detect possible faults leading to critical failures during their execution. This raises the question of how we can efficiently test DRL policies to ensure their correctness and adherence to safety requirements. Most existing works on testing DRL agents use adversarial attacks that perturb states or actions of the agent. However, such attacks often lead to unrealistic states of the environment. Furthermore, their main goal is to test the robustness of DRL agents rather than testing the compliance of the agents‚Äô policies with respect to requirements. Due to the huge state space of DRL environments, the high cost of test execution, and the black-box nature of DRL algorithms, exhaustive testing of DRL agents is impossible. In this paper, we propose a Search-based Testing Approach of Reinforcement Learning Agents (STARLA) to test the policy of a DRL agent by effectively searching for failing executions of the agent within a limited testing budget. We rely on machine learning models and a dedicated genetic algorithm to narrow the search toward faulty episodes (i.e., sequences of states and actions produced by the DRL agent). We apply STARLA on Deep-Q-Learning agents trained on two different RL problems widely used as benchmarks and show that STARLA significantly outperforms Random Testing by detecting more faults related to the agent's policy. We also investigate how to extract rules that characterize faulty episodes of the DRL agent using our search results. Such rules can be used to understand the conditions under which the agent fails and thus assess the risks of deploying it.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3269804",
      "Funding Information": "Natural Sciences and Engineering Research Council of Canada; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10107813",
      "Author Keywords": "Genetic algorithm;machine learning;reinforcement learning;state abstraction;testing",
      "IEEE Terms": "Testing;Reinforcement learning;Safety;Deep learning;Closed box;Training;Genetic algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 85,
      "License": "CCBY",
      "Online Date": "25-Apr-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Lightweight Assessment of Test-Case Effectiveness Using Source-Code-Quality Indicators",
      "Authors": "G. Grano; F. Palomba; H. C. Gall",
      "Author Affiliations": "University of Zurich, Zurich, Switzerland; University of Zurich, Zurich, Switzerland; University of Zurich, Zurich, Switzerland",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Apr-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 4,
      "Start Page": 758,
      "End Page": 774,
      "Abstract": "Test cases are crucial to help developers preventing the introduction of software faults. Unfortunately, not all the tests are properly designed or can effectively capture faults in production code. Some measures have been defined to assess test-case effectiveness: the most relevant one is the mutation score, which highlights the quality of a test by generating the so-called mutants, i.e., variations of the production code that make it faulty and that the test is supposed to identify. However, previous studies revealed that mutation analysis is extremely costly and hard to use in practice. The approaches proposed by researchers so far have not been able to provide practical gains in terms of mutation testing efficiency. This leaves the problem of efficiently assessing test-case effectiveness as still open. In this paper, we investigate a novel, orthogonal, and lightweight methodology to assess test-case effectiveness: in particular, we study the feasibility to exploit production and test-code-quality indicators to estimate the mutation score of a test case. We first select a set of 67 factors and study their relation with test-case effectiveness. Then, we devise a mutation score estimation model exploiting such factors and investigate its performance as well as its most relevant features. The key results of the study reveal that our estimation model only based on static features has 86 percent of both F-Measure and AUC-ROC. This means that we can estimate the test-case effectiveness, using source-code-quality indicators, with high accuracy and without executing the tests. As a consequence, we can provide a practical approach that is beyond the typical limitations of current mutation testing techniques.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2903057",
      "Funding Information": "Swiss National Science Foundation (SNSF)(grant numbers:200021_166275,PP00P2_170529); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8658120",
      "Author Keywords": "Automated software testing;mutation testing;software quality",
      "IEEE Terms": "Testing;Production;Estimation;Measurement;Predictive models;Machine learning;Computational modeling",
      "Mesh_Terms": "",
      "Article Citation Count": 25,
      "Patent Citation Count": null,
      "Reference Count": 108,
      "License": "IEEE",
      "Online Date": "4-Mar-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Exploring Word Embedding Techniques to Improve Sentiment Analysis of Software Engineering Texts",
      "Authors": "E. Biswas; K. Vijay-Shanker; L. Pollock",
      "Author Affiliations": "Computer and Information Sciences, University of Delaware, Newark, United States; Computer and Information Sciences, University of Delaware, Newark, United States; Computer and Information Sciences, University of Delaware, Newark, United States",
      "Publication Title": "2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "29-Aug-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 68,
      "End Page": 78,
      "Abstract": "Sentiment analysis (SA) of text-based software artifacts is increasingly used to extract information for various tasks including providing code suggestions, improving development team productivity, giving recommendations of software packages and libraries, and recommending comments on defects in source code, code quality, possibilities for improvement of applications. Studies of state-of-the-art sentiment analysis tools applied to software-related texts have shown varying results based on the techniques and training approaches. In this paper, we investigate the impact of two potential opportunities to improve the training for sentiment analysis of SE artifacts in the context of the use of neural networks customized using the Stack Overflow data developed by Lin et al. We customize the process of sentiment analysis to the software domain, using software domain-specific word embeddings learned from Stack Overflow (SO) posts, and study the impact of software domain-specific word embeddings on the performance of the sentiment analysis tool, as compared to generic word embeddings learned from Google News. We find that the word embeddings learned from the Google News data performs mostly similar and in some cases better than the word embeddings learned from SO posts. We also study the impact of two machine learning techniques, oversampling and undersampling of data, on the training of a sentiment classifier for handling small SE datasets with a skewed distribution. We find that oversampling alone, as well as the combination of oversampling and undersampling together, helps in improving the performance of a sentiment classifier.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-3412-3",
      "DOI": "10.1109/MSR.2019.00020",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816816",
      "Author Keywords": "Sentiment Analysis;Software Engineering;Word Embeddings",
      "IEEE Terms": "Sentiment analysis;Tools;Software;Training;Neural networks;Software engineering;Machine learning",
      "Mesh_Terms": "",
      "Article Citation Count": 14,
      "Patent Citation Count": null,
      "Reference Count": 37,
      "License": "IEEE",
      "Online Date": "29-Aug-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "The Why, When, What, and How About Predictive Continuous Integration: A Simulation-Based Investigation",
      "Authors": "B. Liu; H. Zhang; W. Ma; G. Li; S. Li; H. Shen",
      "Author Affiliations": "State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University, Jiangsu, China; State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University, Jiangsu, China; State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University, Jiangsu, China; State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University, Jiangsu, China; State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University, Jiangsu, China; Peter Faber Business School, Australian Catholic University, Sydney, NSW, Australia",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "12-Dec-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 12,
      "Start Page": 5223,
      "End Page": 5249,
      "Abstract": "Continuous Integration (CI) enables developers to detect defects early and thus reduce lead time. However, the high frequency and long duration of executing CI have a detrimental effect on this practice. Existing studies have focused on using CI outcome predictors to reduce frequency. Since there is no reported project using predictive CI, it is difficult to evaluate its economic impact. This research aims to investigate predictive CI from a process perspective, including why and when to adopt predictors, what predictors to be used, and how to practice predictive CI in real projects. We innovatively employ Software Process Simulation to simulate a predictive CI process with a Discrete-Event Simulation (DES) model and conduct simulation-based experiments. We develop the Rollback-based Identification of Defective Commits (RIDEC) method to account for the negative effects of false predictions in simulations. Experimental results show that: 1) using predictive CI generally improves the effectiveness of CI, reducing time costs by up to 36.8% and the average waiting time before executing CI by 90.5%; 2) the time-saving varies across projects, with higher commit frequency projects benefiting more; and 3) predictor performance does not strongly correlate with time savings, but the precision of both failed and passed predictions should be paid more attention. Simulation-based evaluation helps identify overlooked aspects in existing research. Predictive CI saves time and resources, but improved prediction performance has limited cost-saving benefits. The primary value of predictive CI lies in providing accurate and quick feedback to developers, aligning with the goal of CI.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3330510",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:62072227,62202219,62302210,72372070); Jiangsu Provincial Key Research and Development Program(grant numbers:BE2021002-2); National Key Research and Development Program of China(grant numbers:2019YFE0105500); Innovation Project and Overseas Open Projects of State Key Laboratory for Novel Software Technology (Nanjing University)(grant numbers:ZZKT2022A25,KFKT2022A09,KFKT2023A09); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10315109",
      "Author Keywords": "Continuous integration;machine learning;software process simulation;discrete-event simulation",
      "IEEE Terms": "Software;Costs;Servers;Testing;Machine learning;Codes;Surveys",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 64,
      "License": "IEEE",
      "Online Date": "10-Nov-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "On the Use of Fine-grained Vulnerable Code Statements for Software Vulnerability Assessment Models",
      "Authors": "T. H. M. Le; M. A. Babar",
      "Author Affiliations": "CREST - The Centre for Research on Engineering Software Technologies, The University of Adelaide, Adelaide, Australia; CREST - The Centre for Research on Engineering Software Technologies, The University of Adelaide, Adelaide, Australia",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 621,
      "End Page": 633,
      "Abstract": "Many studies have developed Machine Learning (ML) approaches to detect Software Vulnerabilities (SVs) in functions and fine-grained code statements that cause such SVs. However, there is little work on leveraging such detection outputs for data-driven SV assessment to give information about exploitability, impact, and severity of SVs. The information is important to understand SVs and prioritize their fixing. Using large-scale data from 1,782 functions of 429 SVs in 200 real-world projects, we investigate ML models for automating function-level SV assessment tasks, i.e., predicting seven Common Vulnerability Scoring System (CVSS) metrics. We particularly study the value and use of vulnerable statements as inputs for developing the assessment models because SVs in functions are originated in these statements. We show that vulnerable statements are 5.8 times smaller in size, yet exhibit 7.5-114.5% stronger assessment performance (Matthews Correlation Coefficient (MCC)) than non-vulnerable statements. Incorporating context of vulnerable statements further increases the performance by up to 8.9% (0.64 MCC and 0.75 F1-Score). Overall, we provide the initial yet promising ML-based baselines for function-level SV assessment, paving the way for further research in this direction.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3528433",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796209",
      "Author Keywords": "Security Vulnerability;Vulnerability Assessment;Machine Learning;Mining Software Repositories",
      "IEEE Terms": "Measurement;Correlation coefficient;Codes;Machine learning;Predictive models;Software;Data models",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 93,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Using K-core Decomposition on Class Dependency Networks to Improve Bug Prediction Model's Practical Performance",
      "Authors": "Y. Qu; Q. Zheng; J. Chi; Y. Jin; A. He; D. Cui; H. Zhang; T. Liu",
      "Author Affiliations": "Ministry of Education Key Lab For Intelligent Networks and Network Security (MOEKLINNS), School of Electronic and Information Engineering, Xi'an Jiaotong University, Xi'an, China; Ministry of Education Key Lab For Intelligent Networks and Network Security (MOEKLINNS), School of Electronic and Information Engineering, Xi'an Jiaotong University, Xi'an, China; Ministry of Education Key Lab For Intelligent Networks and Network Security (MOEKLINNS), School of Electronic and Information Engineering, Xi'an Jiaotong University, Xi'an, China; Ministry of Education Key Lab For Intelligent Networks and Network Security (MOEKLINNS), School of Electronic and Information Engineering, Xi'an Jiaotong University, Xi'an, China; Ministry of Education Key Lab For Intelligent Networks and Network Security (MOEKLINNS), School of Electronic and Information Engineering, Xi'an Jiaotong University, Xi'an, China; Ministry of Education Key Lab For Intelligent Networks and Network Security (MOEKLINNS), School of Electronic and Information Engineering, Xi'an Jiaotong University, Xi'an, China; School of Computer Science, Xi'an University of Posts and Telecommunications, Xi'an, China; Ministry of Education Key Lab For Intelligent Networks and Network Security (MOEKLINNS), School of Electronic and Information Engineering, Xi'an Jiaotong University, Xi'an, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "11-Feb-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 2,
      "Start Page": 348,
      "End Page": 366,
      "Abstract": "In recent years, Complex Network theory and graph algorithms have been proved to be effective in predicting software bugs. On the other hand, as a widely-used algorithm in Complex Network theory, k-core decomposition has been used in software engineering domain to identify key classes. Intuitively, key classes are more likely to be buggy since they participate in more functions or have more interactions and dependencies. However, there is no existing research uses k-core decomposition to analyze software bugs. To fill this gap, we first use k-core decomposition on Class Dependency Networks to analyze software bug distribution from a new perspective. An interesting and widely existed tendency is observed: for classes in k-cores with larger k values, there is a stronger possibility for them to be buggy. Based on this observation, we then propose a simple but effective equation named as top-core which improves the order of classes in the suspicious class list produced by effort-aware bug prediction models. Based on an empirical study on 18 open-source Java systems, we show that the bug prediction models' performances are significantly improved in 85.2 percent experiments in the cross-validation scenario and in 80.95 percent experiments in the forward-release scenario, after using top-core. The models' average performances are improved by 11.5 and 12.6 percent, respectively. It is concluded that the proposed top-core equation can help the testers or code reviewers locate the real bugs more quickly and easily in software bug prediction practices.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2892959",
      "Funding Information": "National Key Research and Development Program of China(grant numbers:2016YFB0800202); National Natural Science Foundation of China(grant numbers:61602369,61632015,61772408,U1766215,61721002,61833015); Ministry of Education Innovation Research Team(grant numbers:IRT_17R86); Shaanxi Province postdoctoral research project funding(grant numbers:2016BSHEDZZ108); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8611396",
      "Author Keywords": "Bug prediction;software defects;complex network;class dependency network;effort-aware bug prediction",
      "IEEE Terms": "Computer bugs;Software;Mathematical model;Predictive models;Complex networks;Prediction algorithms;Software algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": 30,
      "Patent Citation Count": null,
      "Reference Count": 66,
      "License": "IEEE",
      "Online Date": "13-Jan-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Data Transfer and Relevant Metrics Matching Based Approach for Heterogeneous Defect Prediction",
      "Authors": "P. R. Bal; S. Kumar",
      "Author Affiliations": "Department of Computer Science and Engineering, Indian Institute of Technology Roorkee, Roorkee, Uttarakhand, India; Department of Computer Science and Engineering, Indian Institute of Technology Roorkee, Roorkee, Uttarakhand, India",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "14-Mar-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 3,
      "Start Page": 1232,
      "End Page": 1245,
      "Abstract": "Heterogeneous defect prediction (HDP) is a promising research area in the software defect prediction domain to handle the unavailability of the past homogeneous data. In HDP, the prediction is performed using source dataset in which the independent features (metrics) are entirely different than the independent features of target dataset. One important assumption in machine learning is that independent features of the source and target datasets should be relevant to each other for better prediction accuracy. However, these assumptions do not generally hold in HDP. Further in HDP, the selected source dataset for a given target dataset may be of small size causing insufficient training. To resolve these issues, we have proposed a novel heterogeneous data preprocessing method, namely, Transfer of Data from Target dataset to Source dataset selected using Relevance score (TDTSR), for heterogeneous defect prediction. In the proposed approach, we have used chi-square test to select the relevant metrics between source and target datasets and have performed experiments using proposed approach with various machine learning algorithms. Our proposed method shows an improvement of at least 14% in terms of AUC score in the HDP scenario compared to the existing state of the art models.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3173678",
      "Funding Information": "Ministry of Human Resource Development; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9772411",
      "Author Keywords": "Heterogeneous defect prediction;heterogeneous metrics;chi square test;random forest;relevant metrics",
      "IEEE Terms": "Measurement;Software;Data models;Predictive models;Kernel;Correlation;Transfer learning",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 36,
      "License": "IEEE",
      "Online Date": "10-May-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "SequenceR: Sequence-to-Sequence Learning for End-to-End Program Repair",
      "Authors": "Z. Chen; S. Kommrusch; M. Tufano; L. -N. Pouchet; D. Poshyvanyk; M. Monperrus",
      "Author Affiliations": "KTH Royal Institute of Technology, Stockholm, Sweden; Colorado State University, Fort Collins, CO, USA; The College of William and Mary, Williamsburg, VA, USA; Colorado State University, Fort Collins, CO, USA; The College of William and Mary, Williamsburg, VA, USA; KTH Royal Institute of Technology, Stockholm, Sweden",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Sep-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 9,
      "Start Page": 1943,
      "End Page": 1959,
      "Abstract": "This paper presents a novel end-to-end approach to program repair based on sequence-to-sequence learning. We devise, implement, and evaluate a technique, called SequenceR, for fixing bugs based on sequence-to-sequence learning on source code. This approach uses the copy mechanism to overcome the unlimited vocabulary problem that occurs with big code. Our system is data-driven; we train it on 35,578 samples, carefully curated from commits to open-source repositories. We evaluate SequenceR on 4,711 independent real bug fixes, as well on the Defects4J benchmark used in program repair research. SequenceR is able to perfectly predict the fixed line for 950/4,711 testing samples, and find correct patches for 14 bugs in Defects4J benchmark. SequenceR captures a wide range of repair operators without any domain-specific top-down design.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2940179",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8827954",
      "Author Keywords": "Program repair;machine learning",
      "IEEE Terms": "Maintenance engineering;Computer bugs;Vocabulary;Training;Natural languages;Benchmark testing",
      "Mesh_Terms": "",
      "Article Citation Count": 107,
      "Patent Citation Count": null,
      "Reference Count": 51,
      "License": "IEEE",
      "Online Date": "10-Sep-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "RefactorScore: Evaluating Refactor Prone Code",
      "Authors": "K. Jesse; C. Kuhmuench; A. Sawant",
      "Author Affiliations": "Department of Computer Science, University of California Davis, Davis, CA, USA; Siemens Corporation, Princeton, NJ, USA; Endor Labs, Palo Alto, CA, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Nov-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 11,
      "Start Page": 5008,
      "End Page": 5026,
      "Abstract": "We propose RefactorScore, an automatic evaluation metric for code. RefactorScore computes the number of refactor prone locations on each token in a candidate file and maps the occurrences into a quantile to produce a score. RefactorScore is evaluated across 61,735 commits and uses a model called RefactorBERT trained to predict refactors on 1,111,246 commits. Finally, we validate RefactorScore on a set of industry leading projects providing each with a RefactorScore. We calibrate RefactorScore's detection of low quality code with human developers through a human subject study. RefactorBERT, the model driving the scoring mechanism, is capable of predicting defects and refactors predicted by RefDiff 2.0. To our knowledge, our approach, coupled with the use of large scale data for training and validated with human developers, is the first code quality scoring metric of its kind.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3324613",
      "Funding Information": "NSF CCF (SHF)(grant numbers:2107592); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10286315",
      "Author Keywords": "Refactor;automatic evaluation;machine learning;software repositories",
      "IEEE Terms": "Codes;Java;Measurement;Unified modeling language;Predictive models;C++ languages;Computational modeling",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 76,
      "License": "IEEE",
      "Online Date": "16-Oct-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Prevent: An Unsupervised Approach to Predict Software Failures in Production",
      "Authors": "G. Denaro; R. Heydarov; A. Mohebbi; M. Pezz√®",
      "Author Affiliations": "Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; Faculty of Informatics, USI Universit√† della Svizzera Italiana (USI), Lugano, Switzerland; Faculty of Informatics, USI Universit√† della Svizzera Italiana (USI), Lugano, Switzerland; Faculty of Informatics, USI Universit√† della Svizzera Italiana, Lugano, Switzerland",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "12-Dec-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 12,
      "Start Page": 5139,
      "End Page": 5153,
      "Abstract": "This paper presents Prevent, a fully unsupervised approach to predict and localize failures in distributed enterprise applications. Software failures in production are unavoidable. Predicting failures and locating failing components online are the first steps to proactively manage faults in production. Many techniques predict failures from anomalous combinations of system metrics with supervised, weakly supervised, and semi-supervised learning models. Supervised approaches require large sets of labelled data not commonly available in large enterprise applications, and address failure types that can be either captured with predefined rules or observed while training supervised models. Prevent integrates the core ingredients of unsupervised approaches into a novel fully unsupervised approach to predict failures and localize failing resources. The results of experimenting with Prevent on a commercially-compliant distributed cloud system indicate that Prevent provides more stable, reliable and timely predictions than supervised learning approaches, without requiring the often impractical training with labeled data.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3327583",
      "Funding Information": "Swiss SNF project ASTERIx: Automatic System TEsting of InteRactive software applications(grant numbers:SNF 200021_178742); Italian PRIN project SISMA(grant numbers:PRIN 201752ENYB); Italian PRIN project BigSistah(grant numbers:PRIN 2022EYX28N); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10305549",
      "Author Keywords": "Failure prediction;distributed applications;machine learning",
      "IEEE Terms": "Training;Production;Predictive models;Monitoring;Key performance indicator;Training data;Time measurement",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 67,
      "License": "CCBY",
      "Online Date": "2-Nov-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Predicting Likelihood of Requirement Implementation within the Planned Iteration: An Empirical Study at IBM",
      "Authors": "A. Dehghan; A. Neal; K. Blincoe; J. Linaker; D. Damian",
      "Author Affiliations": "Computer Science Department, University of Victoria, BC, Canada; Persistent Systems, Kanata, ON, Canada; Department of Electrical and Computer Engineering, University of Auckland, New Zealand; Computer Science Department, Lund University, Sweden; Computer Science Department, University of Victoria, BC, Canada",
      "Publication Title": "2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "3-Jul-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 124,
      "End Page": 134,
      "Abstract": "There has been a significant interest in the estimation of time and effort in fixing defects among both software practitioners and researchers over the past two decades. However, most of the focus has been on prediction of time and effort in resolving bugs, without much regard to predicting time needed to complete high-level requirements, a critical step in release planning. In this paper, we describe a mixed-method empirical study on three large IBM projects in which we developed and evaluated a process of training a predictive model constituting a set of 29 features in nine categories in order to predict if a requirement will be completed within its planned iteration. We conducted feature engineering through iterative interviews with IBM practitioners as well as analysis of large development repositories of these three projects. Using machine learning techniques, we were able to make predictions on completion time of requirements at four different stages of their lifetime. Using our industrial partner's interest in high precision over recall, we then adopted a cost sensitive learning method and maximized precision of predictions (ranging from 0.8 to 0.97) while maintaining an acceptable recall. We also ranked the features based on their relative importance to the optimized predictive model. We show that although satisfying predictions can be made at early stages, performance of predictions improves over time by taking advantage of requirements' progress data. Furthermore, feature importance ranking results show that although importance of features are highly dependent on project and prediction stage, there are certain features (e.g. requirement creator, time remained to the end of iteration, time since last requirement summary change and number of times requirement has been replanned for a new iteration) that emerge as important across most projects and stages, implying future worthwhile research directions for both researchers and practitioners.",
      "ISSN": "",
      "ISBNs": "978-1-5386-1544-7",
      "DOI": "10.1109/MSR.2017.53",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7962362",
      "Author Keywords": "mining software repositories;machine learning;completion time prediction;release planning",
      "IEEE Terms": "Software;Predictive models;Computer bugs;Interviews;Planning;History;Computer science",
      "Mesh_Terms": "",
      "Article Citation Count": 7,
      "Patent Citation Count": null,
      "Reference Count": 43,
      "License": "IEEE",
      "Online Date": "3-Jul-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "A Study of Gender Discussions in Mobile Apps",
      "Authors": "M. Shahin; M. Zahedi; H. Khalajzadeh; A. Rezaei Nasab",
      "Author Affiliations": "School of Computing Technologies, RMIT University, Melbourne, Australia; School of Computing and Information Systems, University of Melbourne, Melbourne, Australia; School of Information Technology, Deakin University, Melbourne, Australia; School of Electrical and Computer Engineering, Shiraz University, Shiraz, Iran",
      "Publication Title": "2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "12-Jul-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 598,
      "End Page": 610,
      "Abstract": "Mobile software apps (\"apps\") are one of the prevailing digital technologies that our modern life heavily depends on. A key issue in the development of apps is how to design gender-inclusive apps. Apps that do not consider gender inclusion, diversity, and equality in their design can create barriers (e.g., excluding some of the users because of their gender) for their diverse users. While there have been some efforts to develop gender-inclusive apps, a lack of deep understanding regarding user perspectives on gender may prevent app developers and owners from identifying issues related to gender and proposing solutions for improvement. Users express many different opinions about apps in their reviews, from sharing their experiences, and reporting bugs, to requesting new features. In this study, we aim at unpacking gender discussions about apps from the user perspective by analysing app reviews. We first develop and evaluate several Machine Learning (ML) and Deep Learning (DL) classifiers that automatically detect gender reviews (i.e., reviews that contain discussions about gender). We apply our ML and DL classifiers on a manually constructed dataset of 1,440 app reviews from the Google App Store, composing 620 gender reviews and 820 non-gender reviews. Our best classifier achieves an F1-score of 90.77%. Second, our qualitative analysis of a randomly selected 388 out of 620 gender reviews shows that gender discussions in app reviews revolve around six topics: App Features, Appearance, Content, Company Policy and Censorship, Advertisement, and Community. Finally, we provide some practical implications and recommendations for developing gender-inclusive apps.",
      "ISSN": "2574-3864",
      "ISBNs": "979-8-3503-1184-6",
      "DOI": "10.1109/MSR59073.2023.00086",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174058",
      "Author Keywords": "Gender;Mobile App;App Review;Machine Learning;Deep Learning",
      "IEEE Terms": "Deep learning;Computer bugs;Companies;Software;Censorship;Mobile applications;Internet",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 87,
      "License": "IEEE",
      "Online Date": "12-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Flakify: A Black-Box, Language Model-Based Predictor for Flaky Tests",
      "Authors": "S. Fatima; T. A. Ghaleb; L. Briand",
      "Author Affiliations": "School of EECS, University of Ottawa, Ottawa, ON, Canada; School of EECS, University of Ottawa, Ottawa, ON, Canada; School of EECS, University of Ottawa, Ottawa, ON, Canada",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "18-Apr-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 4,
      "Start Page": 1912,
      "End Page": 1927,
      "Abstract": "Software testing assures that code changes do not adversely affect existing functionality. However, a test case can be flaky, i.e., passing and failing across executions, even for the same version of the source code. Flaky test cases introduce overhead to software development as they can lead to unnecessary attempts to debug production or testing code. Besides rerunning test cases multiple times, which is time-consuming and computationally expensive, flaky test cases can be predicted using machine learning (ML) models, thus reducing the wasted cost of re-running and debugging these test cases. However, the state-of-the-art ML-based flaky test case predictors rely on pre-defined sets of features that are either project-specific, i.e., inapplicable to other projects, or require access to production code, which is not always available to software test engineers. Moreover, given the non-deterministic behavior of flaky test cases, it can be challenging to determine a complete set of features that could potentially be associated with test flakiness. Therefore, in this article, we propose Flakify, a black-box, language model-based predictor for flaky test cases. Flakify relies exclusively on the source code of test cases, thus not requiring to (a) access to production code (black-box), (b) rerun test cases, (c) pre-define features. To this end, we employed CodeBERT, a pre-trained language model, and fine-tuned it to predict flaky test cases using the source code of test cases. We evaluated Flakify on two publicly available datasets (FlakeFlagger and IDoFT) for flaky test cases and compared our technique with the FlakeFlagger approach, the best state-of-the-art ML-based, white-box predictor for flaky test cases, using two different evaluation procedures: (1) cross-validation and (2) per-project validation, i.e., prediction on new projects. Flakify achieved F1-scores of 79% and 73% on the FlakeFlagger dataset using cross-validation and per-project validation, respectively. Similarly, Flakify achieved F1-scores of 98% and 89% on the IDoFT dataset using the two validation procedures, respectively. Further, Flakify surpassed FlakeFlagger by 10 and 18 percentage points (pp) in terms of precision and recall, respectively, when evaluated on the FlakeFlagger dataset, thus reducing the cost bound to be wasted on unnecessarily debugging test cases and production code by the same percentages (corresponding to reduction rates of 25% and 64%). Flakify also achieved significantly higher prediction results when used to predict test cases on new projects, suggesting better generalizability over FlakeFlagger. Our results further show that a black-box version of FlakeFlagger is not a viable option for predicting flaky test cases.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3201209",
      "Funding Information": "Huawei Technologies Canada; Mitacs; Canada Research Chairs; Natural Sciences and Engineering Research Council of Canada; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9866550",
      "Author Keywords": "Flaky tests;software testing;black-box testing;natural language processing;CodeBERT",
      "IEEE Terms": "Codes;Predictive models;Production;Computational modeling;Software testing;Software;Feature extraction",
      "Mesh_Terms": "",
      "Article Citation Count": 12,
      "Patent Citation Count": null,
      "Reference Count": 69,
      "License": "IEEE",
      "Online Date": "24-Aug-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "VulHunter: Hunting Vulnerable Smart Contracts at EVM Bytecode-Level via Multiple Instance Learning",
      "Authors": "Z. Li; S. Lu; R. Zhang; Z. Zhao; R. Liang; R. Xue; W. Li; F. Zhang; S. Gao",
      "Author Affiliations": "State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; Information Engineering University, Zhengzhou, China; State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; College of Computer Science and Technology, Zhejiang University, Hangzhou, China; Information Engineering University, Zhengzhou, China; State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; State Key Laboratory of Information Security, Institute of Information Engineering, Chinese Academy of Sciences, Beijing, China; College of Computer Science and Technology, Zhejiang University, Hangzhou, China; School of Information, Central University of Finance and Economics, Beijing, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Nov-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 11,
      "Start Page": 4886,
      "End Page": 4916,
      "Abstract": "With the economic development of Ethereum, the frequent security incidents involving smart contracts running on this platform have caused billions of dollars in losses. Consequently, there is a pressing need to identify the vulnerabilities in contracts, while the state-of-the-art (SOTA) detection methods have been limited in this regard as they cannot overcome three challenges at the same time. (i) Meet the requirements of detecting the source code, bytecode, and opcode of contracts simultaneously; (ii) reduce the reliance on manual pre-defined rules/patterns and expert involvement; (iii) assist contract developers in completing the contract lifecycle more safely, e.g., vulnerability repair and abnormal monitoring. With the development of machine learning (ML), using it to detect the contract runtime execution sequences (called instances) has made it possible to address these challenges. However, the lack of datasets with fine-grained sequence labels poses a significant obstacle, given the unreadability of bytecode/opcode. To this end, we propose a method named VulHunter that extracts the instances by traversing the Control Flow Graph built from contract opcodes. Based on the hybrid attention and multi-instance learning mechanisms, VulHunter reasons the instance labels and designs an optional classifier to automatically capture the subtle features of both normal and defective contracts, thereby identifying the vulnerable instances. Then, it combines the symbolic execution to construct and solve symbolic constraints to validate their feasibility. Finally, we implement a prototype of VulHunter with 15K lines of code and compare it with 9 SOTA methods on five open source datasets including 52,042 source codes and 184,289 bytecodes. The results indicate that VulHunter can detect contract vulnerabilities more accurately (90.04% accuracy and 85.60% F1 score), efficiently (only 4.4 seconds per contract), and robustly (0% analysis failure rate) than SOTA methods. Also, it can focus on specific metrics such as precision and recall by employing different baseline models and hyperparameters to meet the various user requirements, e.g., vulnerability discovery and misreport mitigation. More importantly, compared with the previous ML-based arts, it can not only provide classification results, defective contract source code statements, key opcode fragments, and vulnerable execution paths, but also eliminate misreports and facilitate more operations such as vulnerability repair and attack simulation during the contract lifecycle.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3317209",
      "Funding Information": "National Key R&D Program of China(grant numbers:2021YFB2700603); National Natural Science Foundation of China(grant numbers:62172405,62072487,62227805,62072398); Major Public Welfare Projects Foundation of Henan(grant numbers:201300210200); Beijing Natural Science Foundation(grant numbers:M21036); Zhejiang Key R&D Plan(grant numbers:2021C01116); Leading Innovative and Entrepreneur Team Introduction Program of Zhejiang(grant numbers:2018R01005); Zhejiang Provincial Natural Science Foundation of China(grant numbers:LD22F020002); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10261219",
      "Author Keywords": "Blockchain;smart contract;security analysis;multiple instance learning;symbolic execution",
      "IEEE Terms": "Source coding;Smart contracts;Codes;Pattern matching;Testing;Monitoring;Maintenance engineering",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 76,
      "License": "CCBY",
      "Online Date": "22-Sep-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "BotHunter: An Approach to Detect Software Bots in GitHub",
      "Authors": "A. Abdellatif; M. Wessel; I. Steinmacher; M. A. Gerosa; E. Shihab",
      "Author Affiliations": "Concordia University, Montreal, Canada; Delft University of Technology, Delft, Netherlands; Universidade Tecnol√≥gica Federal do Paran√°, Campo Mour√£o, Brazil; Northern Arizona University, Flagstaff, USA; Concordia University, Montreal, Canada",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 6,
      "End Page": 17,
      "Abstract": "Bots have become popular in software projects as they play critical roles, from running tests to fixing bugs/vulnerabilities. However, the large number of software bots adds extra effort to practitioners and researchers to distinguish human accounts from bot accounts to avoid bias in data-driven studies. Researchers developed several approaches to identify bots at specific activity levels (issue/pull request or commit), considering a single repository and disregarding features that showed to be effective in other domains. To address this gap, we propose using a machine learning-based approach to identify the bot accounts regardless of their activity level. We selected and extracted 19 features related to the account's profile information, activities, and comment similarity. Then, we evaluated the performance of five machine learning classifiers using a dataset that has more than 5,000 GitHub accounts. Our results show that the Random Forest classifier performs the best, with an F1-score of 92.4% and AUC of 98.7%. Furthermore, the account profile information (e.g., account login) contains the most relevant features to identify the account type. Finally, we compare the performance of our Random Forest classifier to the state-of-the-art approaches, and our results show that our model outperforms the state-of-the-art techniques in identifying the account type regardless of their activity level.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3527959",
      "Funding Information": "National Science Foundation(grant numbers:1815503,1900903); CNPq(grant numbers:313067/2020-1); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796262",
      "Author Keywords": "Software Bots;Empirical Software Engineering",
      "IEEE Terms": "Bot (Internet);Feature extraction;Transformers;Software;Encoding;Data mining;Time factors",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 53,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Learning Off-By-One Mistakes: An Empirical Study",
      "Authors": "H. Sellik; O. van Paridon; G. Gousios; M. Aniche",
      "Author Affiliations": "Delft University of Technology, Delft, The Netherlands; Adyen N.V., Amsterdam, The Netherlands; Delft University of Technology, Delft, The Netherlands; Delft University of Technology, Delft, The Netherlands",
      "Publication Title": "2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "28-Jun-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 58,
      "End Page": 67,
      "Abstract": "Mistakes in binary conditions are a source of error in many software systems. They happen when developers use, e.g., `<;' or `>' instead of `<;=' or `>='. These boundary mistakes are hard to find and impose manual, labor-intensive work for software developers. While previous research has been proposing solutions to identify errors in boundary conditions, the problem remains open. In this paper, we explore the effectiveness of deep learning models in learning and predicting mistakes in boundary conditions. We train different models on approximately 1.6M examples with faults in different boundary conditions. We achieve a precision of 85% and a recall of 84% on a balanced dataset, but lower numbers in an imbalanced dataset. We also perform tests on 41 real-world boundary condition bugs found from GitHub, where the model shows only a modest performance. Finally, we test the model on a large-scale Java code base from Adyen, our industrial partner. The model reported 36 buggy methods, but none of them were confirmed by developers.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-8710-5",
      "DOI": "10.1109/MSR52588.2021.00019",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9463090",
      "Author Keywords": "machine learning for software engineering;deep learning for software engineering;software testing;boundary testing",
      "IEEE Terms": "Deep learning;Java;Analytical models;Adaptation models;Computer bugs;Static analysis;Tools",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 36,
      "License": "IEEE",
      "Online Date": "28-Jun-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Simpler Hyperparameter Optimization for Software Analytics: Why, How, When?",
      "Authors": "A. Agrawal; X. Yang; R. Agrawal; R. Yedida; X. Shen; T. Menzies",
      "Author Affiliations": "Wayfair, Boston, MA, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Aug-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 8,
      "Start Page": 2939,
      "End Page": 2954,
      "Abstract": "How can we make software analytics simpler and faster? One method is to match the complexity of analysis to the intrinsic complexity of the data being explored. For example, hyperparameter optimizers find the control settings for data miners that improve the predictions generated via software analytics. Sometimes, very fast hyperparameter optimization can be achieved by ‚ÄúDODGE-ing‚Äù; i.e., simply steering way from settings that lead to similar conclusions. But when is it wise to use that simple approach and when must we use more complex (and much slower) optimizers? To answer this, we applied hyperparameter optimization to 120 SE data sets that explored bad smell detection, predicting Github issue close time, bug report analysis, defect prediction, and dozens of other non-SE problems. We find that the simple DODGE works best for data sets with low ‚Äúintrinsic dimensionality‚Äù ($\\mu _D\\approx 3$ŒºD‚âà3) and very poorly for higher-dimensional data ($\\mu _D > 8$ŒºD>8). Nearly all the SE data seen here was intrinsically low-dimensional, indicating that DODGE is applicable for many SE analytics tasks.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2021.3073242",
      "Funding Information": "National Science Foundation(grant numbers:CCF-1703487); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9405415",
      "Author Keywords": "Software analytics;hyperparameter optimization;defect prediction;bad smell detection;issue close time;bug reports",
      "IEEE Terms": "Software;Optimization;Clustering algorithms;Text mining;Measurement;Computer bugs;Task analysis",
      "Mesh_Terms": "",
      "Article Citation Count": 12,
      "Patent Citation Count": null,
      "Reference Count": 101,
      "License": "IEEE",
      "Online Date": "15-Apr-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Facilitating Coordination between Software Developers: A Study and Techniques for Timely and Efficient Recommendations",
      "Authors": "K. Blincoe; G. Valetto; D. Damian",
      "Author Affiliations": "Software Engineering Global Interaction Lab, University of Victoria, Victoria, BC, Canada; Fondazione Bruno Kessler, Trento, Italy; Software Engineering Global Interaction Lab, University of Victoria, Victoria, BC, Canada",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "13-Oct-15",
      "Publication Year": 2015,
      "Volume": 41,
      "Issue": 10,
      "Start Page": 969,
      "End Page": 985,
      "Abstract": "When software developers fail to coordinate, build failures, duplication of work, schedule slips and software defects can result. However, developers are often unaware of when they need to coordinate, and existing methods and tools that help make developers aware of their coordination needs do not provide timely or efficient recommendations. We describe our techniques to identify timely and efficient coordination recommendations, which we developed and evaluated in a study of coordination needs in the Mylyn software project. We describe how data obtained from tools that capture developer actions within their Integrated Development Environment (IDE) as they occur can be used to timely identify coordination needs; we also describe how properties of tasks coupled with machine learning can focus coordination recommendations to those that are more critical to the developers to reduce information overload and provide more efficient recommendations. We motivate our techniques through developer interviews and report on our quantitative analysis of coordination needs in the Mylyn project. Our results suggest that by leveraging IDE logging facilities, properties of tasks and machine learning techniques awareness tools could make developers aware of critical coordination needs in a timely way. We conclude by discussing implications for software engineering research and tool design.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2015.2431680",
      "Funding Information": "US National Science Foundation (NSF)(grant numbers:OCI-1221254); NECSIS; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7105409",
      "Author Keywords": "Human Factors in Software Design;Management;Metrics/Measurement;Productivity;Programming Teams;Computer-supported cooperative work;human factors in software design;management;metrics/measurement;productivity;programming teams",
      "IEEE Terms": "Software;Encoding;Interviews;Statistical analysis;Manuals;Accuracy;Correlation",
      "Mesh_Terms": "",
      "Article Citation Count": 13,
      "Patent Citation Count": null,
      "Reference Count": 70,
      "License": "IEEE",
      "Online Date": "11-May-15",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Manually-Curated Dataset of Fixes to Vulnerabilities of Open-Source Software",
      "Authors": "S. E. Ponta; H. Plate; A. Sabetta; M. Bezzi; C. Dangremont",
      "Author Affiliations": "SAP Security Research, Mougins, France; SAP Security Research, Mougins, France; SAP Security Research, Mougins, France; SAP Security Research, Mougins, France; SAP Security Research, Mougins, France",
      "Publication Title": "2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "29-Aug-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 383,
      "End Page": 387,
      "Abstract": "Advancing our understanding of software vulnerabilities, automating their identification, the analysis of their impact, and ultimately their mitigation is necessary to enable the development of software that is more secure. While operating a vulnerability assessment tool, which we developed, and that is currently used by hundreds of development units at SAP, we manually collected and curated a dataset of vulnerabilities of open-source software, and the commits fixing them. The data were obtained both from the National Vulnerability Database (NVD), and from project-specific web resources, which we monitor on a continuous basis. From that data, we extracted a dataset that maps 624 publicly disclosed vulnerabilities affecting 205 distinct opensource Java projects, used in SAP products or internal tools, onto the 1282 commits that fix them. Out of 624 vulnerabilities, 29 do not have a CVE (Common Vulnerability and Exposure) identifier at all, and 46, which do have such identifier assigned by a numbering authority, are not available in the NVD yet. The dataset is released under an open-source license, together with supporting scripts that allow researchers to automatically retrieve the actual content of the commits from the corresponding repositories, and to augment the attributes available for each instance. Moreover, these scripts allow to complement the dataset with additional instances that are not security fixes (which is useful, for example, in machine learning applications). Our dataset has been successfully used to train classifiers that could automatically identify security-relevant commits in code repositories. The release of this dataset and the supporting code as open-source will allow future research to be based on data of industrial relevance; it also represents a concrete step towards making the maintenance of this dataset a shared effort involving open-source communities, academia, and the industry.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-3412-3",
      "DOI": "10.1109/MSR.2019.00064",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816802",
      "Author Keywords": "vulnerabilities;open source software;nvd;dataset",
      "IEEE Terms": "Open source software;Tools;Databases;Security;Monitoring;Java",
      "Mesh_Terms": "",
      "Article Citation Count": 57,
      "Patent Citation Count": null,
      "Reference Count": 9,
      "License": "IEEE",
      "Online Date": "29-Aug-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "ApacheJIT: A Large Dataset for Just-In-Time Defect Prediction",
      "Authors": "H. Keshavarz; M. Nagappan",
      "Author Affiliations": "David R. Cheriton School of Computer Science, University of Waterloo, Waterloo, Ontario, Canada; David R. Cheriton School of Computer Science, University of Waterloo, Waterloo, Ontario, Canada",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 191,
      "End Page": 195,
      "Abstract": "In this paper, we present ApacheJIT, a large dataset for Just-In-Time (JIT) defect prediction. ApacheJIT consists of clean and bug-inducing software changes in 14 popular Apache projects. ApacheJIT has a total of 106,674 commits (28,239 bug-inducing and 78,435 clean commits). Having a large number of commits makes ApacheJIT a suitable dataset for machine learning JIT models, especially deep learning models that require large training sets to effectively generalize the patterns present in the historical data to future data.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3527996",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796180",
      "Author Keywords": "Defect Prediction;Software Engineering;Dataset",
      "IEEE Terms": "Training;Deep learning;Computer bugs;Predictive models;Data models;Software;Data mining",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 26,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "ConPredictor: Concurrency Defect Prediction in Real-World Applications",
      "Authors": "T. Yu; W. Wen; X. Han; J. H. Hayes",
      "Author Affiliations": "Department of Computer Science, University of Kentucky, Lexington, KY; Department of Computer Science, University of Kentucky, Lexington, KY; Department of Computer Science, University of Kentucky, Lexington, KY; Department of Computer Science, University of Kentucky, Lexington, KY",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "12-Jun-19",
      "Publication Year": 2019,
      "Volume": 45,
      "Issue": 6,
      "Start Page": 558,
      "End Page": 575,
      "Abstract": "Concurrent programs are difficult to test due to their inherent non-determinism. To address this problem, testing often requires the exploration of thread schedules of a program; this can be time-consuming when applied to real-world programs. Software defect prediction has been used to help developers find faults and prioritize their testing efforts. Prior studies have used machine learning to build such predicting models based on designed features that encode the characteristics of programs. However, research has focused on sequential programs; to date, no work has considered defect prediction for concurrent programs, with program characteristics distinguished from sequential programs. In this paper, we present ConPredictor, an approach to predict defects specific to concurrent programs by combining both static and dynamic program metrics. Specifically, we propose a set of novel static code metrics based on the unique properties of concurrent programs. We also leverage additional guidance from dynamic metrics constructed based on mutation analysis. Our evaluation on four large open source projects shows that ConPredictor improved both within-project defect prediction and cross-project defect prediction compared to traditional features.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2018.2791521",
      "Funding Information": "National Science Foundation(grant numbers:CCF-1464032,CCF-1652149,CCF-1511117); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8252721",
      "Author Keywords": "Concurrency;defect prediction;software quality;software metrics",
      "IEEE Terms": "Concurrent computing;Predictive models;Software;Programming;Testing;Synchronization",
      "Mesh_Terms": "",
      "Article Citation Count": 22,
      "Patent Citation Count": null,
      "Reference Count": 100,
      "License": "IEEE",
      "Online Date": "9-Jan-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Neural Transfer Learning for Repairing Security Vulnerabilities in C Code",
      "Authors": "Z. Chen; S. Kommrusch; M. Monperrus",
      "Author Affiliations": "KTH Royal Institute of Technology, Stockholm, Sweden; Colorado State University, Fort Collins, CO, USA; KTH Royal Institute of Technology, Stockholm, Sweden",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "6-Jan-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 1,
      "Start Page": 147,
      "End Page": 165,
      "Abstract": "In this paper, we address the problem of automatic repair of software vulnerabilities with deep learning. The major problem with data-driven vulnerability repair is that the few existing datasets of known confirmed vulnerabilities consist of only a few thousand examples. However, training a deep learning model often requires hundreds of thousands of examples. In this work, we leverage the intuition that the bug fixing task and the vulnerability fixing task are related and that the knowledge learned from bug fixes can be transferred to fixing vulnerabilities. In the machine learning community, this technique is called transfer learning. In this paper, we propose an approach for repairing security vulnerabilities named VRepair which is based on transfer learning. VRepair is first trained on a large bug fix corpus and is then tuned on a vulnerability fix dataset, which is an order of magnitude smaller. In our experiments, we show that a model trained only on a bug fix corpus can already fix some vulnerabilities. Then, we demonstrate that transfer learning improves the ability to repair vulnerable C functions. We also show that the transfer learning model performs better than a model trained with a denoising task and fine-tuned on the vulnerability fixing task. To sum up, this paper shows that transfer learning works well for repairing security vulnerabilities in C compared to learning on a small dataset.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3147265",
      "Funding Information": "Wallenberg Artificial Intelligence, Autonomous Systems and Software Program; Knut och Alice Wallenbergs Stiftelse; Swedish Foundation for Strategic Research; National Science Foundation(grant numbers:CCF-1750399); Vetenskapsr√•det(grant numbers:2018-05973); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9699412",
      "Author Keywords": "Vulnerability fixing;transfer learning;seq2seq learning",
      "IEEE Terms": "Transfer learning;Task analysis;Computer bugs;Transformers;Codes;Training;Software",
      "Mesh_Terms": "",
      "Article Citation Count": 21,
      "Patent Citation Count": null,
      "Reference Count": 81,
      "License": "CCBY",
      "Online Date": "1-Feb-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Revisiting Binary Code Similarity Analysis Using Interpretable Feature Engineering and Lessons Learned",
      "Authors": "D. Kim; E. Kim; S. K. Cha; S. Son; Y. Kim",
      "Author Affiliations": "KAIST, Daejeon, South Korea; KAIST, Daejeon, South Korea; KAIST, Daejeon, South Korea; KAIST, Daejeon, South Korea; KAIST, Daejeon, South Korea",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "18-Apr-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 4,
      "Start Page": 1661,
      "End Page": 1682,
      "Abstract": "Binary code similarity analysis (BCSA) is widely used for diverse security applications, including plagiarism detection, software license violation detection, and vulnerability discovery. Despite the surging research interest in BCSA, it is significantly challenging to perform new research in this field for several reasons. First, most existing approaches focus only on the end results, namely, increasing the success rate of BCSA, by adopting uninterpretable machine learning. Moreover, they utilize their own benchmark, sharing neither the source code nor the entire dataset. Finally, researchers often use different terminologies or even use the same technique without citing the previous literature properly, which makes it difficult to reproduce or extend previous work. To address these problems, we take a step back from the mainstream and contemplate fundamental research questions for BCSA. Why does a certain technique or a certain feature show better results than the others? Specifically, we conduct the first systematic study on the basic features used in BCSA by leveraging interpretable feature engineering on a large-scale benchmark. Our study reveals various useful insights on BCSA. For example, we show that a simple interpretable model with a few basic features can achieve a comparable result to that of recent deep learning-based approaches. Furthermore, we show that the way we compile binaries or the correctness of underlying binary analysis tools can significantly affect the performance of BCSA. Lastly, we make all our source code and benchmark public and suggest future directions in this field to help further research.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3187689",
      "Funding Information": "Institute of Information & Communications Technology Planning & Evaluation(grant numbers:2021-0-01332); Developing Next-Generation Binary Decompiler; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9813408",
      "Author Keywords": "Binary code similarity analysis;similarity measures;feature evaluation and selection;benchmark",
      "IEEE Terms": "Benchmark testing;Computer architecture;Binary codes;Syntactics;Semantics;Licenses;Market research",
      "Mesh_Terms": "",
      "Article Citation Count": 13,
      "Patent Citation Count": null,
      "Reference Count": 166,
      "License": "CCBY",
      "Online Date": "1-Jul-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Metric-Based Fault Prediction for Spreadsheets",
      "Authors": "P. Koch; K. Schekotihin; D. Jannach; B. Hofer; F. Wotawa",
      "Author Affiliations": "AAU Klagenfurt, Klagenfurt, Austria; AAU Klagenfurt, Klagenfurt, Austria; AAU Klagenfurt, Klagenfurt, Austria; TU Graz, Graz, Austria; TU Graz, Graz, Austria",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "14-Oct-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 10,
      "Start Page": 2195,
      "End Page": 2207,
      "Abstract": "Electronic spreadsheets are widely used in organizations for various data analytics and decision-making tasks. Even though faults within such spreadsheets are common and can have significant negative consequences, today's tools for creating and handling spreadsheets provide limited support for fault detection, localization, and repair. Being able to predict whether a certain part of a spreadsheet is faulty or not is often central for the implementation of such supporting functionality. In this work, we propose a novel approach to fault prediction in spreadsheet formulas, which combines an extensive catalog of spreadsheet metrics with modern machine learning algorithms. An analysis of the individual metrics from our catalog reveals that they are generally suited to discover a wide range of faults. Their predictive power is, however, limited when considered in isolation. Therefore, in our approach we apply supervised learning algorithms to obtain fault predictors that utilize all data provided by multiple spreadsheet metrics from our catalog. Experiments on different datasets containing faulty spreadsheets show that particularly Random Forests classifiers are often effective. As a result, the proposed method is in many cases able to make highly accurate predictions whether a given formula of a spreadsheet is faulty.11.Results of a preliminary study were published in [1] .",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2944604",
      "Funding Information": "Austrian Science Fund(grant numbers:I2144); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8859280",
      "Author Keywords": "Spreadsheets;fault prediction;machine learning",
      "IEEE Terms": "Measurement;Software;Prediction algorithms;Predictive models;Tools;Radio frequency;Task analysis",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 50,
      "License": "CCBY",
      "Online Date": "4-Oct-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Astraea: Grammar-Based Fairness Testing",
      "Authors": "E. Soremekun; S. Udeshi; S. Chattopadhyay",
      "Author Affiliations": "Interdisciplinary Centre for Security, Reliability and Trust (SnT), University of Luxembourg, Esch-sur-Alzette, Luxembourg; Singapore University of Technology and Design, Singapore; Singapore University of Technology and Design, Singapore",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "9-Dec-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 12,
      "Start Page": 5188,
      "End Page": 5211,
      "Abstract": "Software often produces biased outputs. In particular, machine learning (ML) based software is known to produce erroneous predictions when processing discriminatory inputs. Such unfair program behavior can be caused by societal bias. In the last few years, Amazon, Microsoft and Google have provided software services that produce unfair outputs, mostly due to societal bias (e.g., gender or race). In such events, developers are saddled with the task of conducting fairness testing. Fairness testing is challenging; developers are tasked with generating discriminatory inputs that reveal and explain biases. We propose a grammar-based fairness testing approach (called Astraea) which leverages context-free grammars to generate discriminatory inputs that reveal fairness violations in software systems. Using probabilistic grammars, Astraea also provides fault diagnosis by isolating the cause of observed software bias. Astraea‚Äôs diagnoses facilitate the improvement of ML fairness. Astraea was evaluated on 18 software systems that provide three major natural language processing (NLP) services. In our evaluation, Astraea generated fairness violations at a rate of about 18%. Astraea generated over 573K discriminatory test cases and found over 102K fairness violations. Furthermore, Astraea improves software fairness by about 76% via model-retraining, on average.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3141758",
      "Funding Information": "University of Luxembourg, Ezekiel Soremekun; University of Luxembourg(grant numbers:AUDACITY-2019-Laiwyers); OneConnect Financial(grant numbers:RGOCFT2001); Singapore Ministry of Education; MOE(grant numbers:MOE2018-T2-1-098); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9678017",
      "Author Keywords": "software fairness;machine learning;natural language processing;software testing;program debugging",
      "IEEE Terms": "Testing;Grammar;Task analysis;Sentiment analysis;Test pattern generators;Software testing;Software systems",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 88,
      "License": "IEEE",
      "Online Date": "11-Jan-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Comprehensive Investigation of the Impact of Class Overlap on Software Defect Prediction",
      "Authors": "L. Gong; H. Zhang; J. Zhang; M. Wei; Z. Huang",
      "Author Affiliations": "College of Computer Science and Technology, Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, China; Software Analysis and Intelligence Lab (SAIL), School of Computing, Queen's University, Kingston, ON, Canada; College of Computer Science and Technology, Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, China; College of Computer Science and Technology, Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, China; College of Computer Science and Technology, Nanjing University of Aeronautics and Astronautics, Nanjing, Jiangsu, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "18-Apr-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 4,
      "Start Page": 2440,
      "End Page": 2458,
      "Abstract": "Software Defect Prediction (SDP) is one of the most vital and cost-efficient operations to ensure the software quality. However, there exists the phenomenon of class overlap in the SDP datasets (i.e., defective and non-defective modules are similar in terms of values of metrics), which hinders the performance as well as the use of SDP models. Even though efforts have been made to investigate the impact of removing overlapping technique on the performance of SDP, many open issues are still challenging yet unknown. Therefore, we conduct an empirical study to comprehensively investigate the impact of class overlap on SDP. Specifically, we first propose an overlapping instances identification approach by analyzing the class distribution in the local neighborhood of a given instance. We then investigate the impact of class overlap and two common overlapping instance handling techniques on the performance and the interpretation of seven representative SDP models. Through an extensive case study on 230 diversity datasets, we observe that: i) 70.0% of SDP datasets contain overlapping instances; ii) different levels of class overlap have different impacts on the performance of SDP models; iii) class overlap affects the rank of the important feature list of SDP models, particularly the feature lists at the top 2 and top 3 ranks; IV) Class overlap handling techniques could statistically significantly improve the performance of SDP models trained on datasets with over 12.5% overlap ratios. We suggest that future work should apply our KNN method to identify the overlap ratios of datasets before building SDP models.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3220740",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:62202223); Natural Science Foundation of Jiangsu Province(grant numbers:BK20220881); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9944157",
      "Author Keywords": "Class overlap;data quality;k-nearest neighbourhood;local analysis;software defect prediction;software metrics",
      "IEEE Terms": "Software;Measurement;Predictive models;Classification tree analysis;Stability analysis;NASA;Machine learning algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 84,
      "License": "IEEE",
      "Online Date": "9-Nov-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "SoftMon: A Tool to Compare Similar Open-source Software from a Performance Perspective",
      "Authors": "S. S. Singh; S. R. Sarangi",
      "Author Affiliations": "Computer Science and Engineering, IIT Delhi; Computer Science, IIT Delhi",
      "Publication Title": "2020 IEEE/ACM 17th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "20-Jun-23",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 397,
      "End Page": 408,
      "Abstract": "Over the past two decades, a rich ecosystem of open-source software has evolved. For every type of application, there are a wide variety of alternatives. We observed that even if different applications that perform similar tasks and compiled with the same versions of the compiler and the libraries, they perform very differently while running on the same system. Sadly prior work in this area that compares two code bases for similarities does not help us in finding the reasons for the differences in performance. In this paper, we develop a tool, SoftMon, that can compare the codebases of two separate applications and pinpoint the exact set of functions that are disproportionately responsible for differences in performance. Our tool uses machine learning and NLP techniques to analyze why a given open-source application has a lower performance as compared to its peers, design bespoke applications that can incorporate specific innovations (identified by SoftMon) in competing applications, and diagnose performance bugs. In this paper, we compare a wide variety of large open-source programs such as image editors, audio players, text editors, PDF readers, mail clients and even full-fledged operating systems (OSs). In all cases, our tool was able to pinpoint a set of at the most 10‚Äì15 functions that are responsible for the differences within 200 seconds. A subsequent manual analysis assisted by our graph visualization engine helps us find the reasons. We were able to validate most of the reasons by correlating them with subsequent observations made by developers or from existing technical literature. The manual phase of our analysis is limited to 30 minutes (tested with human subjects).",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-7517-7",
      "DOI": "10.1145/3379597.3387444",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10148752",
      "Author Keywords": "Software comparison;Performance debugging;NLP based matching",
      "IEEE Terms": "Visualization;Technological innovation;Codes;Operating systems;Manuals;Machine learning;Libraries",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 83,
      "License": "",
      "Online Date": "20-Jun-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "An Empirical Comparison of Model Validation Techniques for Defect Prediction Models",
      "Authors": "C. Tantithamthavorn; S. McIntosh; A. E. Hassan; K. Matsumoto",
      "Author Affiliations": "Graduate School of Information Science, Nara Institute of Science and Technology, Ikoma, Japan; Department of Electrical and Computer Engineering, Montreal, QC, Canada; School of Computing, Queen‚Äôs University, Kingston, ON, Canada; Graduate School of Information Science, Nara Institute of Science and Technology, Ikoma, Japan",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "9-Jan-17",
      "Publication Year": 2017,
      "Volume": 43,
      "Issue": 1,
      "Start Page": 1,
      "End Page": 18,
      "Abstract": "Defect prediction models help software quality assurance teams to allocate their limited resources to the most defect-prone modules. Model validation techniques, such as $k$ -fold cross-validation, use historical data to estimate how well a model will perform in the future. However, little is known about how accurate the estimates of model validation techniques tend to be. In this paper, we investigate the bias and variance of model validation techniques in the domain of defect prediction. Analysis of 101 public defect datasets suggests that 77 percent of them are highly susceptible to producing unstable results‚Äì - selecting an appropriate model validation technique is a critical experimental design choice. Based on an analysis of 256 studies in the defect prediction literature, we select the 12 most commonly adopted model validation techniques for evaluation. Through a case study of 18 systems, we find that single-repetition holdout validation tends to produce estimates with 46-229 percent more bias and 53-863 percent more variance than the top-ranked model validation techniques. On the other hand, out-of-sample bootstrap validation yields the best balance between the bias and variance of estimates in the context of our study. Therefore, we recommend that future defect prediction studies avoid single-repetition holdout validation, and instead, use out-of-sample bootstrap validation.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2016.2584050",
      "Funding Information": "JSPS; Advancing Strategic International Networks to Accelerate the Circulation of Talented Researchers; Interdisciplinary Global Networks for Accelerating Theory and Practice in Software Ecosystem; JSPS Fellows(grant numbers:16J03360); Natural Sciences and Engineering Research Council of Canada¬†(NSERC); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7497471",
      "Author Keywords": "Defect prediction models;model validation techniques;bootstrap validation;cross validation;holdout validation",
      "IEEE Terms": "Predictive models;Data models;Analytical models;Context;Context modeling;Software;Logistics",
      "Mesh_Terms": "",
      "Article Citation Count": 344,
      "Patent Citation Count": null,
      "Reference Count": 5,
      "License": "IEEE",
      "Online Date": "22-Jun-16",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "PatchNet: Hierarchical Deep Learning-Based Stable Patch Identification for the Linux Kernel",
      "Authors": "T. Hoang; J. Lawall; Y. Tian; R. J. Oentaryo; D. Lo",
      "Author Affiliations": "Singapore Management University, Singapore; Inria, LIP6, Sorbonne University, Paris, France; Queen's University, Kingston, ON, Canada; McLaren Applied Technologies, Singapore; Singapore Management University, Singapore",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "11-Nov-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 11,
      "Start Page": 2471,
      "End Page": 2486,
      "Abstract": "Linux kernel stable versions serve the needs of users who value stability of the kernel over new features. The quality of such stable versions depends on the initiative of kernel developers and maintainers to propagate bug fixing patches to the stable versions. Thus, it is desirable to consider to what extent this process can be automated. A previous approach relies on words from commit messages and a small set of manually constructed code features. This approach, however, shows only moderate accuracy. In this paper, we investigate whether deep learning can provide a more accurate solution. We propose PatchNet, a hierarchical deep learning-based approach capable of automatically extracting features from commit messages and commit code and using them to identify stable patches. PatchNet contains a deep hierarchical structure that mirrors the hierarchical and sequential structure of commit code, making it distinctive from the existing deep learning models on source code. Experiments on 82,403 recent Linux patches confirm the superiority of PatchNet against various state-of-the-art baselines, including the one recently-adopted by Linux kernel maintainers.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2952614",
      "Funding Information": "National Research Foundation Singapore(grant numbers:NRF2016-NRF-ANR003); ANR ITrans; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8896061",
      "Author Keywords": "Linux kernel;patch classification;deep learning",
      "IEEE Terms": "Kernel;Linux;Computer bugs;Feature extraction;Deep learning;Indexes;Manuals",
      "Mesh_Terms": "",
      "Article Citation Count": 12,
      "Patent Citation Count": null,
      "Reference Count": 72,
      "License": "IEEE",
      "Online Date": "11-Nov-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Legion: Massively Composing Rankers for Improved Bug Localization at Adobe",
      "Authors": "D. Jarman; J. Berry; R. Smith; F. Thung; D. Lo",
      "Author Affiliations": "Adobe, Lehi, UT, USA; Adobe, Lehi, UT, USA; Adobe, Lehi, UT, USA; School of Information Systems, Singapore Management University, Singapore, Singapore; School of Information Systems, Singapore Management University, Singapore, Singapore",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Aug-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 8,
      "Start Page": 3010,
      "End Page": 3024,
      "Abstract": "Studies have estimated that, in industrial settings, developers spend between 30 and 90 percent of their time fixing bugs. As such, tools that assist in identifying the location of bugs provide value by reducing debugging costs. One such tool is BugLocator. This study initially aimed to determine if developers working on the Adobe Analytics product could use BugLocator. The initial results show that BugLocator achieves a similar accuracy on five of seven Adobe Analytics repositories and on open-source projects. However, these results do not meet the minimum applicability requirement deemed necessary by Adobe Analytics developers prior to possible adoption. Thus, we consequently examine how BugLocator can achieve the targeted accuracy with two extensions: (1) adding more data corpora, and (2) massively composing individual rankers consisting of augmented BugLocator instances trained on various combinations of corpora and parameter configurations with a Random Forest model. We refer to our final extension as Legion. On average, applying Legion to Adobe Analytics repositories results in at least one buggy file ranked in the top-ten recommendations 76.8 percent of the time for customer-reported bugs across all 7 repositories. This represents a substantial improvement over BugLocator of 36.4 percent, and satisfies the minimum applicability requirement. Additionally, our extensions boost Mean Average Precision by 107.7 percent, Mean Reciprocal Rank by 86.1 percent, Top 1 by 143.4 percent and Top 5 by 58.1 percent.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2021.3075215",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9415126",
      "Author Keywords": "Bug localization;information retrieval;bug reports;data augmentation;ranker composition;industrial study",
      "IEEE Terms": "Computer bugs;Location awareness;Tools;Debugging;Random forests;Programming;Information retrieval",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 65,
      "License": "IEEE",
      "Online Date": "23-Apr-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Hyperparameter Optimization for AST Differencing",
      "Authors": "M. Martinez; J. -R. Falleri; M. Monperrus",
      "Author Affiliations": "Universitat Polit√®cnica de Catalunya, CP, Barcelona, Spain; CNRS, Bordeaux INP, LaBRI, Univ. Bordeaux, Talence, France; KTH Royal Institute of Technology, Sweden",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Oct-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 10,
      "Start Page": 4814,
      "End Page": 4828,
      "Abstract": "Computing the differences between two versions of the same program is an essential task for software development and software evolution research. AST differencing is the most advanced way of doing so, and an active research area. Yet, AST differencing algorithms rely on configuration parameters that may have a strong impact on their effectiveness. In this paper, we present a novel approach named DAT (D iff Auto Tuning) for hyperparameter optimization of AST differencing. We thoroughly state the problem of hyper-configuration for AST differencing. We evaluate our data-driven approach DAT to optimize the edit-scripts generated by the state-of-the-art AST differencing algorithm named GumTree in different scenarios. DAT is able to find a new configuration for GumTree that improves the edit-scripts in 21.8% of the evaluated cases.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3315935",
      "Funding Information": "Ministerio de Ciencia e Innovaci√≥n(grant numbers:RYC2021-031523-I); GAISSA Spanish research(grant numbers:TED2021-130923B-I00); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10286467",
      "Author Keywords": "Software evolution;Tree differencing;Abstract Syntax Trees (AST);hyperparameter optimization, edit-script",
      "IEEE Terms": "Training;Software algorithms;Computer bugs;Syntactics;Maintenance engineering;Hyperparameter optimization;Software",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 55,
      "License": "IEEE",
      "Online Date": "16-Oct-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Learning the Relation Between Code Features and Code Transforms With Structured Prediction",
      "Authors": "Z. Yu; M. Martinez; Z. Chen; T. F. Bissyand√©; M. Monperrus",
      "Author Affiliations": "Shandong University, Jinan, China; Universitat Polit√®cnica de Catalunya, Barcelona, Spain; KTH Royal Institute of Technology, Stockholm, Sweden; University of Luxembourg, Esch-sur-Alzette, Luxembourg; KTH Royal Institute of Technology, Stockholm, Sweden",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "17-Jul-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 7,
      "Start Page": 3872,
      "End Page": 3900,
      "Abstract": "To effectively guide the exploration of the code transform space for automated code evolution techniques, we present in this article the first approach for structurally predicting code transforms at the level of AST nodes using conditional random fields (CRFs). Our approach first learns offline a probabilistic model that captures how certain code transforms are applied to certain AST nodes, and then uses the learned model to predict transforms for arbitrary new, unseen code snippets. Our approach involves a novel representation of both programs and code transforms. Specifically, we introduce the formal framework for defining the so-called AST-level code transforms and we demonstrate how the CRF model can be accordingly designed, learned, and used for prediction. We instantiate our approach in the context of repair transform prediction for Java programs. Our instantiation contains a set of carefully designed code features, deals with the training data imbalance issue, and comprises transform constraints that are specific to code. We conduct a large-scale experimental evaluation based on a dataset of bug fixing commits from real-world Java projects. The results show that when the popular evaluation metric top-3 is used, our approach predicts the code transforms with an accuracy varying from 41% to 53% depending on the transforms. Our model outperforms two baselines based on history probability and neural machine translation (NMT), suggesting the importance of considering code structure in achieving good prediction accuracy. In addition, a proof-of-concept synthesizer is implemented to concretize some repair transforms to get the final patches. The evaluation of the synthesizer on the Defects4j benchmark confirms the usefulness of the predicted AST-level repair transforms in producing high-quality patches.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3275380",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:62102233); Shandong Province Overseas Outstanding Youth Fund(grant numbers:2022HWYQ-043); Qilu Young Scholar Program of Shandong University; Wallenberg Artificial Intelligence; Wallenberg Autonomous Systems and Software Program; Knut och Alice Wallenbergs Stiftelse; Swedish National Infrastructure for Computing; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10130317",
      "Author Keywords": "Code transform;big code;machine learning;program repair",
      "IEEE Terms": "Transforms;Codes;Maintenance engineering;Predictive models;Synthesizers;Computer bugs;Feature extraction",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 113,
      "License": "IEEE",
      "Online Date": "22-May-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Automated Software Vulnerability Assessment with Concept Drift",
      "Authors": "T. H. M. Le; B. Sabir; M. A. Babar",
      "Author Affiliations": "School of Computer Science, The University of Adelaide, Adelaide, Australia; School of Computer Science, The University of Adelaide, Adelaide, Australia; School of Computer Science, The University of Adelaide, Adelaide, Australia",
      "Publication Title": "2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "29-Aug-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 371,
      "End Page": 382,
      "Abstract": "Software Engineering researchers are increasingly using Natural Language Processing (NLP) techniques to automate Software Vulnerabilities (SVs) assessment using the descriptions in public repositories. However, the existing NLP-based approaches suffer from concept drift. This problem is caused by a lack of proper treatment of new (out-of-vocabulary) terms for the evaluation of unseen SVs over time. To perform automated SVs assessment with concept drift using SVs' descriptions, we propose a systematic approach that combines both character and word features. The proposed approach is used to predict seven Vulnerability Characteristics (VCs). The optimal model of each VC is selected using our customized time-based cross-validation method from a list of eight NLP representations and six well-known Machine Learning models. We have used the proposed approach to conduct large-scale experiments on more than 100,000 SVs in the National Vulnerability Database (NVD). The results show that our approach can effectively tackle the concept drift issue of the SVs' descriptions reported from 2000 to 2018 in NVD even without retraining the model. In addition, our approach performs competitively compared to the existing word-only method. We also investigate how to build compact concept-drift-aware models with much fewer features and give some recommendations on the choice of classifiers and NLP representations for SVs assessment.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-3412-3",
      "DOI": "10.1109/MSR.2019.00063",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816739",
      "Author Keywords": "software vulnerability;machine learning;multi-class classification;natural language processing;mining software repositories",
      "IEEE Terms": "Training;Software;Natural language processing;Buildings;Feature extraction;Predictive models;Classification algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": 19,
      "Patent Citation Count": null,
      "Reference Count": 58,
      "License": "IEEE",
      "Online Date": "29-Aug-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Researcher Bias: The Use of Machine Learning in Software Defect Prediction",
      "Authors": "M. Shepperd; D. Bowes; T. Hall",
      "Author Affiliations": "Brunel University, Uxbridge, Middlesex, United Kingdom; Science and Technology Research Institute, University of Hertfordshire, Hatfield, Hertfordshire, United Kingdom; Brunel University, Uxbridge, Middlesex, United Kingdom",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Jun-14",
      "Publication Year": 2014,
      "Volume": 40,
      "Issue": 6,
      "Start Page": 603,
      "End Page": 616,
      "Abstract": "Background. The ability to predict defect-prone software components would be valuable. Consequently, there have been many empirical studies to evaluate the performance of different techniques endeavouring to accomplish this effectively. However no one technique dominates and so designing a reliable defect prediction model remains problematic. Objective. We seek to make sense of the many conflicting experimental results and understand which factors have the largest effect on predictive performance. Method. We conduct a meta-analysis of all relevant, high quality primary studies of defect prediction to determine what factors influence predictive performance. This is based on 42 primary studies that satisfy our inclusion criteria that collectively report 600 sets of empirical prediction results. By reverse engineering a common response variable we build a random effects ANOVA model to examine the relative contribution of four model building factors (classifier, data set, input metrics and researcher group) to model prediction performance. Results. Surprisingly we find that the choice of classifier has little impact upon performance (1.3 percent) and in contrast the major (31 percent) explanatory factor is the researcher group. It matters more who does the work than what is done. Conclusion. To overcome this high level of researcher bias, defect prediction researchers should (i) conduct blind analysis, (ii) improve reporting protocols and (iii) conduct more intergroup studies in order to alleviate expertise issues. Lastly, research is required to determine whether this bias is prevalent in other applications domains.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2014.2322358",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6824804",
      "Author Keywords": "Software defect prediction;meta-analysis;researcher bias",
      "IEEE Terms": "Software;Predictive models;Correlation;Data models;Buildings;Software engineering;Measurement",
      "Mesh_Terms": "",
      "Article Citation Count": 245,
      "Patent Citation Count": null,
      "Reference Count": 53,
      "License": "IEEE",
      "Online Date": "3-Jun-14",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Within-Project Defect Prediction of Infrastructure-as-Code Using Product and Process Metrics",
      "Authors": "S. Dalla Palma; D. Di Nucci; F. Palomba; D. A. Tamburri",
      "Author Affiliations": "Jheronimous Academy of Data Science, Tilburg University, Tilburg, The Netherlands; Jheronimous Academy of Data Science, Tilburg University, Tilburg, The Netherlands; Software Engineering (SeSa) Lab, University of Salerno, Fisciano, Italy; Jheronimous Academy of Data Science, Eindhoven University of Technology, Eindhoven, The Netherlands",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "14-Jun-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 6,
      "Start Page": 2086,
      "End Page": 2104,
      "Abstract": "Infrastructure-as-code (IaC) is the DevOps practice enabling management and provisioning of infrastructure through the definition of machine-readable files, hereinafter referred to as IaC scripts. Similarly to other source code artefacts, these files may contain defects that can preclude their correct functioning. In this paper, we aim at assessing the role of product and process metrics when predicting defective IaC scripts. We propose a fully integrated machine-learning framework for IaC Defect Prediction, that allows for repository crawling, metrics collection, model building, and evaluation. To evaluate it, we analyzed 104 projects and employed five machine-learning classifiers to compare their performance in flagging suspicious defective IaC scripts. The key results of the study report Random Forest as the best-performing model, with a median AUC-PR of 0.93 and MCC of 0.80. Furthermore, at least for the collected projects, product metrics identify defective IaC scripts more accurately than process metrics. Our findings put a baseline for investigating IaC Defect Prediction and the relationship between the product and process metrics, and IaC scripts‚Äô quality.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2021.3051492",
      "Funding Information": "European Commission(grant numbers:825040 (RADON H2020),825480 (SODALITE H2020)); Schweizerischer Nationalfonds zur F√∂rderung der Wissenschaftlichen Forschung(grant numbers:PZ00P2 186090); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9321740",
      "Author Keywords": "Infrastructure-as-code;defect prediction;empirical software engineering",
      "IEEE Terms": "Measurement;Software;Predictive models;Machine learning;Radon;Cloud computing;Task analysis",
      "Mesh_Terms": "",
      "Article Citation Count": 24,
      "Patent Citation Count": null,
      "Reference Count": 52,
      "License": "CCBY",
      "Online Date": "13-Jan-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Will This Bug-Fixing Change Break Regression Testing?",
      "Authors": "X. Tang; S. Wang; K. Mao",
      "Author Affiliations": "State Key Laboratory of Computer Science, Chinese Academy of Sciences; Electrical and Computer Engineering, University of Waterloo, Canada; University College London, CREST Centre, UK",
      "Publication Title": "2015 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
      "Date Added To Xplore": "9-Nov-15",
      "Publication Year": 2015,
      "Volume": null,
      "Issue": null,
      "Start Page": 1,
      "End Page": 10,
      "Abstract": "Context: Software source code is frequently changed for fixing revealed bugs. These bug-fixing changes might introduce unintended system behaviors, which are inconsistent with scenarios of existing regression test cases, and consequently break regression testing. For validating the quality of changes, regression testing is a required process before submitting changes during the development of software projects. Our pilot study shows that 48.7% bug-fixing changes might break regression testing at first run, which means developers have to run regression testing at least a couple of times for 48.7% changes. Such process can be tedious and time consuming. Thus, before running regression test suite, finding these changes and corresponding regression test cases could be helpful for developers to quickly fix these changes and improve the efficiency of regression testing. Goal: This paper proposes bug- fixing change impact prediction (BFCP), for predicting whether a bug-fixing change will break regression testing or not before running regression test cases, by mining software change histories. Method: Our approach employs the machine learning algorithms and static call graph analysis technique. Given a bug-fixing change, BFCP first predicts whether it will break existing regression test cases; second, if the change is predicted to break regression test cases, BFCP can further identify the might-be-broken test cases. Results: Results of experiments on 552 real bug-fixing changes from four large open source projects show that BFCP could achieve prediction precision up to 83.3%, recall up to 92.3%, and F-score up to 81.4%. For identifying the might-be-broken test cases, BFCP could achieve 100% recall.",
      "ISSN": "1949-3789",
      "ISBNs": "978-1-4673-7899-4",
      "DOI": "10.1109/ESEM.2015.7321218",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7321218",
      "Author Keywords": "",
      "IEEE Terms": "Testing;Measurement;Computer bugs;Software;Semantics;Predictive models;History",
      "Mesh_Terms": "",
      "Article Citation Count": 7,
      "Patent Citation Count": 1,
      "Reference Count": 42,
      "License": "IEEE",
      "Online Date": "9-Nov-15",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "How to ‚ÄúDODGE‚Äù Complex Software Analytics",
      "Authors": "A. Agrawal; W. Fu; D. Chen; X. Shen; T. Menzies",
      "Author Affiliations": "Wayfair, Boston, MA, USA; Landing.AI, Palo Alto, CA, USA; Facebook, Menlo Park, California, USA; North Carolina State University, Raleigh, NC, USA; North Carolina State University, Raleigh, NC, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "14-Oct-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 10,
      "Start Page": 2182,
      "End Page": 2194,
      "Abstract": "Machine learning techniques applied to software engineering tasks can be improved by hyperparameter optimization, i.e., automatic tools that find good settings for a learner's control parameters. We show that such hyperparameter optimization can be unnecessarily slow, particularly when the optimizers waste time exploring ‚Äúredundant tunings‚Äù, i.e., pairs of tunings which lead to indistinguishable results. By ignoring redundant tunings, DODGE($\\mathcal {E})$E), a tuning tool, runs orders of magnitude faster, while also generating learners with more accurate predictions than seen in prior state-of-the-art approaches.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2945020",
      "Funding Information": "National Science Foundation(grant numbers:#1703487); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8854183",
      "Author Keywords": "Software analytics;hyperparameter optimization;defect prediction;text mining",
      "IEEE Terms": "Tuning;Text mining;Software;Task analysis;Optimization;Software engineering;Tools",
      "Mesh_Terms": "",
      "Article Citation Count": 26,
      "Patent Citation Count": null,
      "Reference Count": 70,
      "License": "IEEE",
      "Online Date": "1-Oct-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Code Review Knowledge Perception: Fusing Multi-Features for Salient-Class Location",
      "Authors": "Y. Huang; N. Jia; X. Chen; K. Hong; Z. Zheng",
      "Author Affiliations": "School of Data and Computer Science, Sun Yat-sen University, Guangzhou, China; School of Management Science and Engineering, Hebei GEO University, Shijiazhuang, China; Guangdong Key Laboratory for Big Data Analysis and Simulation of Public Opinion, School of Communication and Design, Sun Yat-sen University, Guangzhou, China; School of Data and Computer Science, Sun Yat-sen University, Guangzhou, China; School of Data and Computer Science, Sun Yat-sen University, Guangzhou, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-May-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 5,
      "Start Page": 1463,
      "End Page": 1479,
      "Abstract": "Code review is a common software engineering practice of practical importance to reduce software defects. Review today is often with the help of specialized tools, such as Gerrit. However, even in a tool-supported code review involves a significant amount of human effort to understand the code change, because the information required to inspect code changes may distribute across multiple files that reviewers are not familiar with. Code changes are often organized as commits for review. In this paper, we found that most of the commits contain a salient class(es), which is saliently modified and causes the modification of the rest classes in a commit. Our user studies confirmed that identifying the salient class in a commit can facilitate reviewers in understanding code change. Inspired by the effectiveness of machine learning techniques in the classification field, we model the salient class identification as a binary classification problem and a number of discriminative features is extracted for a commit and used to characterize the salience of a class. The experiments results show that our approach achieves an accuracy of 88 percent. A user study with industrial developers shows that our approach can really improve the efficiency of reviewers understanding code changes in a reviewing scenario without using comment.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2020.3021902",
      "Funding Information": "National Key R&D Program of China(grant numbers:2018YFB1004800); National Natural Science Foundation of China(grant numbers:61902441,61722214,61672545); Key-Area Research and Development Program of Guangdong Province(grant numbers:2020B010164002); Basic and Applied Basic Research Foundation of Guangdong Province(grant numbers:2020A1515010973); China Postdoctoral Science Foundation(grant numbers:2018M640855); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9186620",
      "Author Keywords": "Code review;code comprehension;code change;code discriminative features;code commit",
      "IEEE Terms": "Feature extraction;Semantics;Tools;Couplings;Open source software;Knowledge engineering",
      "Mesh_Terms": "",
      "Article Citation Count": 7,
      "Patent Citation Count": null,
      "Reference Count": 56,
      "License": "IEEE",
      "Online Date": "4-Sep-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Federated Learning for Software Engineering: A Case Study of Code Clone Detection and Defect Prediction",
      "Authors": "Y. Yang; X. Hu; Z. Gao; J. Chen; C. Ni; X. Xia; D. Lo",
      "Author Affiliations": "Department of Computer Science and Technology, Zhejiang University, Ningbo, China; School of Software Technology, Zhejiang University, Ningbo, China; Shanghai Institute for Advanced Study, Zhejiang University, Hangzhou, China; School of Computer Science, Wuhan University, Wuhan, China; School of Software Technology, Zhejiang University, Ningbo, China; Software Engineering Application Technology Lab, Huawei, Hangzhou, China; School of Computing and Information Systems, Singapore Management University, Singapore",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "13-Feb-24",
      "Publication Year": 2024,
      "Volume": 50,
      "Issue": 2,
      "Start Page": 296,
      "End Page": 321,
      "Abstract": "In various research domains, artificial intelligence (AI) has gained significant prominence, leading to the development of numerous learning-based models in research laboratories, which are evaluated using benchmark datasets. While the models proposed in previous studies may demonstrate satisfactory performance on benchmark datasets, translating academic findings into practical applications for industry practitioners presents challenges. This can entail either the direct adoption of trained academic models into industrial applications, leading to a performance decrease, or retraining models with industrial data, a task often hindered by insufficient data instances or skewed data distributions. Real-world industrial data is typically significantly more intricate than benchmark datasets, frequently exhibiting data-skewing issues, such as label distribution skews and quantity skews. Furthermore, accessing industrial data, particularly source code, can prove challenging for Software Engineering (SE) researchers due to privacy policies. This limitation hinders SE researchers‚Äô ability to gain insights into industry developers‚Äô concerns and subsequently enhance their proposed models. To bridge the divide between academic models and industrial applications, we introduce a federated learning (FL)-based framework called Almity. Our aim is to simplify the process of implementing research findings into practical use for both SE researchers and industry developers. Almity enhances model performance on sensitive skewed data distributions while ensuring data privacy and security. It introduces an innovative aggregation strategy that takes into account three key attributes: data scale, data balance, and minority class learnability. This strategy is employed to refine model parameters, thereby enhancing model performance on sensitive skewed datasets. In our evaluation, we employ two well-established SE tasks, i.e., code clone detection and defect prediction, as evaluation tasks. We compare the performance of Almity on both machine learning (ML) and deep learning (DL) models against two mainstream training methods, specifically the Centralized Training Method (CTM) and Vanilla Federated Learning (VFL), to validate the effectiveness and generalizability of Almity. Our experimental results demonstrate that our framework is not only feasible but also practical in real-world scenarios. Almity consistently enhances the performance of learning-based models, outperforming baseline training methods across all types of data distributions.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3347898",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:62141222); National Research Foundation(grant numbers:NRF-NRFI08-2022-0002); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10379838",
      "Author Keywords": "Federated learning;parameter aggregation strategy;skewed data distribution;code clone detection;defect prediction",
      "IEEE Terms": "Data models;Training;Codes;Cloning;Task analysis;Benchmark testing;Industries",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 85,
      "License": "IEEE",
      "Online Date": "3-Jan-24",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Syntactic Versus Semantic Similarity of Artificial and Real Faults in Mutation Testing Studies",
      "Authors": "M. Ojdanic; A. Garg; A. Khanfir; R. Degiovanni; M. Papadakis; Y. Le Traon",
      "Author Affiliations": "University of Luxembourg, Luxembourg; University of Luxembourg, Luxembourg; University of Luxembourg, Luxembourg; University of Luxembourg, Luxembourg; University of Luxembourg, Luxembourg; University of Luxembourg, Luxembourg",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "17-Jul-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 7,
      "Start Page": 3922,
      "End Page": 3938,
      "Abstract": "Fault seeding is typically used in empirical studies to evaluate and compare test techniques. Central to these techniques lies the hypothesis that artificially seeded faults involve some form of realistic properties and thus provide realistic experimental results. In an attempt to strengthen realism, a recent line of research uses machine learning techniques, such as deep learning and Natural Language Processing, to seed faults that look like (syntactically) real ones, implying that fault realism is related to syntactic similarity. This raises the question of whether seeding syntactically similar faults indeed results in semantically similar faults and, more generally whether syntactically dissimilar faults are far away (semantically) from the real ones. We answer this question by employing 4 state-of-the-art fault-seeding techniques (PiTest - a popular mutation testing tool, IBIR - a tool with manually crafted fault patterns, DeepMutation - a learning-based fault seeded framework and $\\mu$ŒºBERT - a mutation testing tool based on the pre-trained language model CodeBERT) that operate in a fundamentally different way, and demonstrate that syntactic similarity does not reflect semantic similarity. We also show that 65.11%, 76.44%, 61.39% and 9.76% of the real faults of Defects4J V2 are semantically resembled by PiTest, IBIR, $\\mu$ŒºBERT and DeepMutation faults, respectively.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3277564",
      "Funding Information": "Luxembourg National Research Fund(grant numbers:C19/IS/13646587/RASoRS,PayPal); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10136793",
      "Author Keywords": "Fault injection;fault seeding;machine learning;mutation testing;semantic model;syntactic distance",
      "IEEE Terms": "Syntactics;Semantics;Testing;Measurement;Codes;Bit error rate;Pattern matching",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 57,
      "License": "CCBY",
      "Online Date": "26-May-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Human-in-the-Loop Automatic Program Repair",
      "Authors": "C. Geethal; M. B√∂hme; V. -T. Pham",
      "Author Affiliations": "Monash University, Clayton, VIC, Australia; Monash University, Clayton, VIC, Australia; The University of Melbourne, Carlton, VIC, Australia",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "17-Oct-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 10,
      "Start Page": 4526,
      "End Page": 4549,
      "Abstract": "learn2fix is a human-in-the-loop interactive program repair technique, which can be applied when no bug oracle‚Äîexcept the user who is reporting the bug‚Äîis available. This approach incrementally learns the condition under which the bug is observed by systematic negotiation with the user. In this process, learn2fix generates alternative test inputs and sends some of those to the user for obtaining their labels. A limited query budget is assigned to the user for this task. A query is a Yes/No question: ‚ÄúWhen executing this alternative test input, the program under test produces the following output; is the bug observed?‚Äù. Using the labelled test inputs, learn2fix incrementally learns an automatic bug oracle to predict the user's response. A classification algorithm in machine learning is used for this task. Our key challenge is to maximise the oracle's accuracy in predicting the tests that expose the bug given a practical, small budget of queries. After learning the automatic oracle, an existing program repair tool attempts to repair the bug using the alternative tests that the user has labelled. Our experiments demonstrate that learn2fix trains a sufficiently accurate automatic oracle with a reasonably low labelling effort (lt. 20 queries), and the oracles represented by interpolation-based classifiers produce more accurate predictions than those represented by approximation-based classifiers. Given the user-labelled test inputs, generated using the interpolation-based approach, the GenProg and Angelix automatic program repair tools produce patches that pass a much larger proportion of validation tests than the manually constructed test suites provided by the repair benchmark.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3305052",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10225252",
      "Author Keywords": "Automated test oracles;semi-automatic program repair;classification algorithms;active machine learning",
      "IEEE Terms": "Maintenance engineering;Computer bugs;Labeling;Classification algorithms;Human in the loop;Fuzzing;Training",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 70,
      "License": "CCBYNCND",
      "Online Date": "21-Aug-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "UnGoML: Automated Classification of unsafe Usages in Go",
      "Authors": "A. -K. Wickert; C. Damke; L. Baumg√§rtner; E. H√ºllermeier; M. Mezini",
      "Author Affiliations": "Software Technology Group, Technische Universit√§t Darmstadt, Darmstadt, Germany; Institute of Informatics University of Munich, Munich, Germany; Software Technology Group, Technische Universit√§t Darmstadt, Darmstadt, Germany; Munich Center for Machine Learning Institute of Informatics, University of Munich, Munich, Germany; Hessian Center for Artificial Intelligence (hessian.AI) National Research Center for Applied Cybersecurity ATHENE Software Technology Group, Technische Universit√§t Darmstadt, Darmstadt, Germany",
      "Publication Title": "2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "12-Jul-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 309,
      "End Page": 321,
      "Abstract": "The Go programming language offers strong protection from memory corruption. As an escape hatch of these protections, it provides the unsafe package. Previous studies identified that this unsafe package is frequently used in real-world code for several purposes, e.g., serialization or casting types. Due to the variety of these reasons, it may be possible to refactor specific usages to avoid potential vulnerabilities. However, the classification of unsafe usages is challenging and requires the context of the call and the program‚Äôs structure. In this paper, we present the first automated classifier for unsafe usages in Go, UnGoML, to identify what is done with the unsafe package and why it is used. For UnGoML, we built four custom deep learning classifiers trained on a manually labeled data set. We represent Go code as enriched control-flow graphs (CFGs) and solve the label prediction task with one single-vertex and three context-aware classifiers. All three context-aware classifiers achieve a top-1 accuracy of more than 86% for both dimensions, WHAT and WHY. Furthermore, in a set-valued conformal prediction setting, we achieve accuracies of more than 93% with mean label set sizes of 2 for both dimensions. Thus, UnGoML can be used to efficiently filter unsafe usages for use cases such as refactoring or a security audit. UnGoML: https://github.com/stg-tud/UnGoML Artifact: https://dx.doi.org/10.6084/m9.figshare.22293052",
      "ISSN": "2574-3864",
      "ISBNs": "979-8-3503-1184-6",
      "DOI": "10.1109/MSR59073.2023.00050",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174087",
      "Author Keywords": "graph neural networks;Go;unsafe package;classification;API-misuse",
      "IEEE Terms": "Deep learning;Computer languages;Codes;Static analysis;Computer architecture;Software;Safety",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 47,
      "License": "IEEE",
      "Online Date": "12-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "How Well Do Change Sequences Predict Defects? Sequence Learning from Software Changes",
      "Authors": "M. Wen; R. Wu; S. -C. Cheung",
      "Author Affiliations": "Department of Computer Science and Engineering, The Hong Kong University of Science and Technology, Kowloon, Hong Kong, China; Department of Computer Science and Engineering, The Hong Kong University of Science and Technology, Kowloon, Hong Kong, China; Department of Computer Science and Engineering, The Hong Kong University of Science and Technology, Kowloon, Hong Kong, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "11-Nov-20",
      "Publication Year": 2020,
      "Volume": 46,
      "Issue": 11,
      "Start Page": 1155,
      "End Page": 1175,
      "Abstract": "Software defect prediction, which aims to identify defective modules, can assist developers in finding bugs and prioritizing limited quality assurance resources. Various features to build defect prediction models have been proposed and evaluated. Among them, process metrics are one important category. Yet, existing process metrics are mainly encoded manually from change histories and ignore the sequential information arising from the changes during software evolution. Are the change sequences derived from such information useful to characterize buggy program modules? How can we leverage such sequences to build good defect prediction models? Unlike traditional process metrics used for existing defect prediction models, change sequences are mostly vectors of variable length. This makes it difficult to apply such sequences directly in prediction models that are driven by conventional classifiers. To resolve this challenge, we utilize Recurrent Neural Network (RNN), which is a deep learning technique, to encode features from sequence data automatically. In this paper, we propose a novel approach called Fences, which extracts six types of change sequences covering different aspects of software changes via fine-grained change analysis. It approaches defects prediction by mapping it to a sequence labeling problem solvable by RNN. Our evaluations on 10 open source projects show that Fences can predict defects with high performance. In particular, our approach achieves an average F-measure of 0.657, which improves the prediction models built on traditional metrics significantly. The improvements vary from 31.6 to 46.8 percent on average. In terms of AUC, Fences achieves an average value of 0.892, and the improvements over baselines vary from 4.2 to 16.1 percent. Fences also outperforms the state-of-the-art technique which learns semantic features automatically from static code via deep learning.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2018.2876256",
      "Funding Information": "Hong Kong RGC/GRF(grant numbers:16202917); 2018 MSRA collaborative research fund; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8493303",
      "Author Keywords": "Defect prediction;process metrics;sequence learning",
      "IEEE Terms": "Measurement;Software;Predictive models;Semantics;History;Machine learning;Feature extraction",
      "Mesh_Terms": "",
      "Article Citation Count": 22,
      "Patent Citation Count": null,
      "Reference Count": 74,
      "License": "IEEE",
      "Online Date": "16-Oct-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Tracking Buggy Files: New Efficient Adaptive Bug Localization Algorithm",
      "Authors": "M. Fejzer; J. Narƒôbski; P. Przymus; K. Stencel",
      "Author Affiliations": "Nicolaus Copernicus University in Toru≈Ñ, Torun, Poland; Nicolaus Copernicus University in Toru≈Ñ, Torun, Poland; Nicolaus Copernicus University in Toru≈Ñ, Torun, Poland; University of Warsaw, Warszawa, Poland",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "15-Jul-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 7,
      "Start Page": 2557,
      "End Page": 2569,
      "Abstract": "Upon receiving a new bug report, developers need to find its cause in the source code. Bug localization can be helped by a tool that ranks all source files according to how likely they include the bug. This problem was thoroughly examined by numerous scientists. We introduce a novel adaptive bug localization algorithm. The concept behind it is based on new feature weighting approaches and an adaptive selection algorithm utilizing pointwise learn‚Äìto‚Äìrank method. The algorithm is evaluated on publicly available datasets, and is competitive in terms of accuracy and required computational resources compared to state‚Äìof‚Äìthe‚Äìart. Additionally, to improve reproducibility we provide extended datasets that include computed features and partial steps, and we also provide the source code.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2021.3064447",
      "Funding Information": "Narodowa Agencja Wymiany Akademickiej; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9372820",
      "Author Keywords": "Bug reports;software maintenance;learning to rank",
      "IEEE Terms": "Computer bugs;Location awareness;Software;History;Software algorithms;Machine learning algorithms;Training",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 47,
      "License": "CCBY",
      "Online Date": "8-Mar-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Automatic Unsupervised Bug Report Categorization",
      "Authors": "N. Limsettho; H. Hata; A. Monden; K. Matsumoto",
      "Author Affiliations": "Graduate School of Information Science, Nara Institute of Science and Technology, Nara, Japan; Graduate School of Information Science, Nara Institute of Science and Technology, Nara, Japan; Graduate School of Information Science, Nara Institute of Science and Technology, Nara, Japan; Graduate School of Information Science, Nara Institute of Science and Technology, Nara, Japan",
      "Publication Title": "2014 6th International Workshop on Empirical Software Engineering in Practice",
      "Date Added To Xplore": "6-Dec-14",
      "Publication Year": 2014,
      "Volume": null,
      "Issue": null,
      "Start Page": 7,
      "End Page": 12,
      "Abstract": "Background: Information in bug reports is implicit and therefore difficult to comprehend. To extract its meaning, some processes are required. Categorizing bug reports is a technique that can help in this regard. It can be used to help in the bug reports management or to understand the underlying structure of the desired project. However, most researches in this area are focusing on a supervised learning approach that still requires a lot of human afford to prepare a training data. Aims: Our aim is to develop an automated framework than can categorize bug reports, according to their hidden characteristics and structures, without the needed for training data. Method: We solve this problem using clustering, unsupervised learning approach. It can automatically group bug reports together based on their textual similarity. We also propose a novel method to label each group with meaningful and representative names. Results: Experiment results show that our framework can achieve performance comparable to the supervised learning approaches. We also show that our labeling process can label each cluster with representative names according to its characteristic. Conclusion: Our framework could be used as an automated categorization system that can be applied without prior knowledge or as an automated labeling suggestion system.",
      "ISSN": "",
      "ISBNs": "978-1-4799-6666-0",
      "DOI": "10.1109/IWESEP.2014.8",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6976015",
      "Author Keywords": "automated bug report categorization;topic modeling;clustering;cluster labeling",
      "IEEE Terms": "Labeling;Vectors;Logistics;Supervised learning;Equations;Accuracy;Mathematical model",
      "Mesh_Terms": "",
      "Article Citation Count": 20,
      "Patent Citation Count": null,
      "Reference Count": 13,
      "License": "IEEE",
      "Online Date": "6-Dec-14",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "An Ontology-Based Approach to Automate Tagging of Software Artifacts",
      "Authors": "S. S. Alqahtani; J. Rilling",
      "Author Affiliations": "Department of Computer Science and Software Engineering, Concordia University, Montreal, Quebec, Canada; Department of Computer Science and Software Engineering, Concordia University, Montreal, Quebec, Canada",
      "Publication Title": "2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
      "Date Added To Xplore": "11-Dec-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 169,
      "End Page": 174,
      "Abstract": "Context: Software engineering repositories contain a wealth of textual information such as source code comments, developers' discussions, commit messages and bug reports. These free form text descriptions can contain both direct and implicit references to security concerns. Goal: Derive an approach to extract security concerns from textual information that can yield several benefits, such as bug management (e.g., prioritization), bug triage or capturing zero-day attack. Method: Propose a fully automated classification and tagging approach that can extract security tags from these texts without the need for manual training data. Results: We introduce an ontology based Software Security Tagger Framework that can automatically identify and classify cybersecurity-related entities, and concepts in text of software artifacts. Conclusion: Our preliminary results indicate that the framework can successfully extract and classify cybersecurity knowledge captured in unstructured text found in software artifacts.",
      "ISSN": "",
      "ISBNs": "978-1-5090-4039-1",
      "DOI": "10.1109/ESEM.2017.25",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8170098",
      "Author Keywords": "automated security concern classification;topic modeling;bug reports;tagging",
      "IEEE Terms": "Computer bugs;Software;Ontologies;Tagging;Software engineering;Computer security",
      "Mesh_Terms": "",
      "Article Citation Count": 7,
      "Patent Citation Count": null,
      "Reference Count": 20,
      "License": "IEEE",
      "Online Date": "11-Dec-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Automatically Assessing Code Understandability",
      "Authors": "S. Scalabrino; G. Bavota; C. Vendome; M. Linares-V√°squez; D. Poshyvanyk; R. Oliveto",
      "Author Affiliations": "University of Molise, Campobasso, CB, Italy; Universit√† della Svizzera italiana(USI), Lugano, Switzerland; Miami University, Oxford, OH, USA; Universidad de los Andes, Bogota, Colombia; College of William & Mary, Williamsburg, VA, USA; University of Molise, Campobasso, CB, Italy",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Mar-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 3,
      "Start Page": 595,
      "End Page": 613,
      "Abstract": "Understanding software is an inherent requirement for many maintenance and evolution tasks. Without a thorough understanding of the code, developers would not be able to fix bugs or add new features timely. Measuring code understandability might be useful to guide developers in writing better code, and could also help in estimating the effort required to modify code components. Unfortunately, there are no metrics designed to assess the understandability of code snippets. In this work, we perform an extensive evaluation of 121 existing as well as new code-related, documentation-related, and developer-related metrics. We try to (i) correlate each metric with understandability and (ii) build models combining metrics to assess understandability. To do this, we use 444 human evaluations from 63 developers and we obtained a bold negative result: none of the 121 experimented metrics is able to capture code understandability, not even the ones assumed to assess quality attributes apparently related, such as code readability and complexity. While we observed some improvements while combining metrics in models, their effectiveness is still far from making them suitable for practical applications. Finally, we conducted interviews with five professional developers to understand the factors that influence their ability to understand code snippets, aiming at identifying possible new metrics.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2901468",
      "Funding Information": "SNF project JITRA(grant numbers:172479); National Science Foundation(grant numbers:CCF-1525902); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8651396",
      "Author Keywords": "Software metrics;code understandability;empirical study;negative result",
      "IEEE Terms": "Complexity theory;Software;Computer bugs;Readability metrics;Software measurement;Indexes",
      "Mesh_Terms": "",
      "Article Citation Count": 40,
      "Patent Citation Count": null,
      "Reference Count": 55,
      "License": "IEEE",
      "Online Date": "24-Feb-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Text Filtering and Ranking for Security Bug Report Prediction",
      "Authors": "F. Peters; T. T. Tun; Y. Yu; B. Nuseibeh",
      "Author Affiliations": "Lero - The Irish Software Research Centre, University of Limerick, Limerick, Ireland; Department of Computing and Communications, The Open University, Milton Keynes, United Kingdom; Department of Computing and Communications, The Open University, Milton Keynes, United Kingdom; Lero - The Irish Software Research Centre, University of Limerick, Limerick, Ireland",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "12-Jun-19",
      "Publication Year": 2019,
      "Volume": 45,
      "Issue": 6,
      "Start Page": 615,
      "End Page": 631,
      "Abstract": "Security bug reports can describe security critical vulnerabilities in software products. Bug tracking systems may contain thousands of bug reports, where relatively few of them are security related. Therefore finding unlabelled security bugs among them can be challenging. To help security engineers identify these reports quickly and accurately, text-based prediction models have been proposed. These can often mislabel security bug reports due to a number of reasons such as class imbalance, where the ratio of non-security to security bug reports is very high. More critically, we have observed that the presence of security related keywords in both security and non-security bug reports can lead to the mislabelling of security bug reports. This paper proposes FARSEC, a framework for filtering and ranking bug reports for reducing the presence of security related keywords. Before building prediction models, our framework identifies and removes non-security bug reports with security related keywords. We demonstrate that FARSEC improves the performance of text-based prediction models for security bug reports in 90 percent of cases. Specifically, we evaluate it with 45,940 bug reports from Chromium and four Apache projects. With our framework, we mitigate the class imbalance issue and reduce the number of mislabelled security bug reports by 38 percent.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2017.2787653",
      "Funding Information": "Science Foundation Ireland(grant numbers:13/RC/2094); H2020 European Research Council(grant numbers:291652 - ASAP); EPSRC; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8240740",
      "Author Keywords": "Security cross words;security related keywords;security bug reports;text filtering;ranking;prediction models;transfer learning",
      "IEEE Terms": "Security;Computer bugs;Predictive models;Software;Data models;Measurement;Buildings",
      "Mesh_Terms": "",
      "Article Citation Count": 39,
      "Patent Citation Count": null,
      "Reference Count": 50,
      "License": "IEEE",
      "Online Date": "27-Dec-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "On the Use of Hidden Markov Model to Predict the Time to Fix Bugs",
      "Authors": "M. Habayeb; S. S. Murtaza; A. Miranskyy; A. B. Bener",
      "Author Affiliations": "Department of Mechanical and Industrial Engineering, Ryerson University, Toronto, Ontario, Canada; Department of Mechanical and Industrial Engineering, Ryerson University, Toronto, Ontario, Canada; Department of Computer Science, Ryerson University, Toronto, Ontario, Canada; Department of Mechanical and Industrial Engineering, Ryerson University, Toronto, Ontario, Canada",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "9-Dec-18",
      "Publication Year": 2018,
      "Volume": 44,
      "Issue": 12,
      "Start Page": 1224,
      "End Page": 1244,
      "Abstract": "A significant amount of time is spent by software developers in investigating bug reports. It is useful to indicate when a bug report will be closed, since it would help software teams to prioritise their work. Several studies have been conducted to address this problem in the past decade. Most of these studies have used the frequency of occurrence of certain developer activities as input attributes in building their prediction models. However, these approaches tend to ignore the temporal nature of the occurrence of these activities. In this paper, a novel approach using Hidden Markov Models and temporal sequences of developer activities is proposed. The approach is empirically demonstrated in a case study using eight years of bug reports collected from the Firefox project. Our proposed model correctly identifies bug reports with expected bug fix times. We also compared our proposed approach with the state of the art technique in the literature in the context of our case study. Our approach results in approximately 33 percent higher F-measure than the contemporary technique based on the Firefox project data.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2017.2757480",
      "Funding Information": "NSERC(grant numbers:402003-2012); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8052546",
      "Author Keywords": "Bug repositories;temporal activities;time to fix a bug;hidden markov model",
      "IEEE Terms": "Computer bugs;Hidden Markov models;Predictive models;Software quality;Data science;Stochastic processes",
      "Mesh_Terms": "",
      "Article Citation Count": 31,
      "Patent Citation Count": null,
      "Reference Count": 42,
      "License": "IEEE",
      "Online Date": "28-Sep-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "SQAPlanner: Generating Data-Informed Software Quality Improvement Plans",
      "Authors": "D. Rajapaksha; C. Tantithamthavorn; J. Jiarpakdee; C. Bergmeir; J. Grundy; W. Buntine",
      "Author Affiliations": "Faculty of Information Technology, Monash University, Melbourne, VIC, Australia; Faculty of Information Technology, Monash University, Melbourne, VIC, Australia; Faculty of Information Technology, Monash University, Melbourne, VIC, Australia; Faculty of Information Technology, Monash University, Melbourne, VIC, Australia; Faculty of Information Technology, Monash University, Melbourne, VIC, Australia; Faculty of Information Technology, Monash University, Melbourne, VIC, Australia",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Aug-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 8,
      "Start Page": 2814,
      "End Page": 2835,
      "Abstract": "Software Quality Assurance (SQA) planning aims to define proactive plans, such as defining maximum file size, to prevent the occurrence of software defects in future releases. To aid this, defect prediction models have been proposed to generate insights as the most important factors that are associated with software quality. Such insights that are derived from traditional defect models are far from actionable‚Äîi.e., practitioners still do not know what they should do or avoid to decrease the risk of having defects, and what is the risk threshold for each metric. A lack of actionable guidance and risk threshold can lead to inefficient and ineffective SQA planning processes. In this paper, we investigate the practitioners‚Äô perceptions of current SQA planning activities, current challenges of such SQA planning activities, and propose four types of guidance to support SQA planning. We then propose and evaluate our AI-Driven SQAPlanner approach, a novel approach for generating four types of guidance and their associated risk thresholds in the form of rule-based explanations for the predictions of defect prediction models. Finally, we develop and evaluate a visualization for our SQAPlanner approach. Through the use of qualitative survey and empirical evaluation, our results lead us to conclude that SQAPlanner is needed, effective, stable, and practically applicable. We also find that 80 percent of our survey respondents perceived that our visualization is more actionable. Thus, our SQAPlanner paves a way for novel research in actionable software analytics‚Äîi.e., generating actionable guidance on what should practitioners do and not do to decrease the risk of having defects to support SQA planning.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2021.3070559",
      "Funding Information": "Australian Research Council(grant numbers:DE200100941); Australian Research Council(grant numbers:DE190100045); Australian Research Council(grant numbers:FL190100035); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9394771",
      "Author Keywords": "Software quality assurance;SQA planning;actionable software analytics;explainable AI",
      "IEEE Terms": "Planning;Software;Predictive models;Visualization;Tools;Artificial intelligence;Software quality",
      "Mesh_Terms": "",
      "Article Citation Count": 20,
      "Patent Citation Count": null,
      "Reference Count": 59,
      "License": "IEEE",
      "Online Date": "2-Apr-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Characterizing Crowds to Better Optimize Worker Recommendation in Crowdsourced Testing",
      "Authors": "J. Wang; S. Wang; J. Chen; T. Menzies; Q. Cui; M. Xie; Q. Wang",
      "Author Affiliations": "Laboratory for Internet Software Technologies, State Key Laboratory of Computer Sciences, Institute of Software Chinese Academy of Sciences, Beijing, China; York University, Toronto, ON, Canada; Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Bytedance Inc., Beijing, China; DAMO Academy of Alibaba Group, Beijing, China; Laboratory for Internet Software Technologies, State Key Laboratory of Computer Sciences, Institute of Software Chinese Academy of Sciences, Beijing, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "11-Jun-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 6,
      "Start Page": 1259,
      "End Page": 1276,
      "Abstract": "Crowdsourced testing is an emerging trend, in which test tasks are entrusted to the online crowd workers. Typically, a crowdsourced test task aims to detect as many bugs as possible within a limited budget. However not all crowd workers are equally skilled at finding bugs; Inappropriate workers may miss bugs, or report duplicate bugs, while hiring them requires nontrivial budget. Therefore, it is of great value to recommend a set of appropriate crowd workers for a test task so that more software bugs can be detected with fewer workers. This paper first presents a new characterization of crowd workers and characterizes them with testing context, capability, and domain knowledge. Based on the characterization, we then propose Multi-Objective Crowd wOrker recoMmendation approach (MOCOM), which aims at recommending a minimum number of crowd workers who could detect the maximum number of bugs for a crowdsourced testing task. Specifically, MOCOM recommends crowd workers by maximizing the bug detection probability of workers, the relevance with the test task, the diversity of workers, and minimizing the test cost. We experimentally evaluate MOCOM on 532 test tasks, and results show that MOCOM significantly outperforms five commonly-used and state-of-the-art baselines. Furthermore, MOCOM can reduce duplicate reports and recommend workers with high relevance and larger bug detection probability; because of this it can find more bugs with fewer workers.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2918520",
      "Funding Information": "National Key Research and Development Program of China(grant numbers:2018YFB1403400); National Natural Science Foundation of China(grant numbers:61602450,61432001); China Scholarship Council; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8721154",
      "Author Keywords": "Crowdsourced testing;crowd worker recommendation;multi-objective optimization",
      "IEEE Terms": "Task analysis;Computer bugs;Testing;Software;Videos;Software engineering;Optimization",
      "Mesh_Terms": "",
      "Article Citation Count": 20,
      "Patent Citation Count": null,
      "Reference Count": 66,
      "License": "IEEE",
      "Online Date": "23-May-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Improving Vulnerability Inspection Efficiency Using Active Learning",
      "Authors": "Z. Yu; C. Theisen; L. Williams; T. Menzies",
      "Author Affiliations": "Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Microsoft, Seattle, WA, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "11-Nov-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 11,
      "Start Page": 2401,
      "End Page": 2420,
      "Abstract": "Software engineers can find vulnerabilities with less effort if they are directed towards code that might contain more vulnerabilities. HARMLESS is an incremental support vector machine tool that builds a vulnerability prediction model from the source code inspected to date, then suggests what source code files should be inspected next. In this way, HARMLESS can reduce the time and effort required to achieve some desired level of recall for finding vulnerabilities. The tool also provides feedback on when to stop (at that desired level of recall) while at the same time, correcting human errors by double-checking suspicious files. This paper evaluates HARMLESS on Mozilla Firefox vulnerability data. HARMLESS found 80, 90, 95, 99 percent of the vulnerabilities by inspecting 10, 16, 20, 34 percent of the source code files. When targeting 90, 95, 99 percent recall, HARMLESS could stop after inspecting 23, 30, 47 percent of the source code files. Even when human reviewers fail to identify half of the vulnerabilities (50 percent false negative rate), HARMLESS could detect 96 percent of the missing vulnerabilities by double-checking half of the inspected files. Our results serve to highlight the very steep cost of protecting software from vulnerabilities (in our case study that cost is, for example, the human effort of inspecting 28,750 √ó 20% = 5,750 source code files to identify 95 percent of the vulnerabilities). While this result could benefit the mission-critical projects where human resources are available for inspecting thousands of source code files, the research challenge for future work is how to further reduce that cost. The conclusion of this paper discusses various ways that goal might be achieved.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2949275",
      "Funding Information": "National Science Foundation(grant numbers:#1506586,#1909516); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8883076",
      "Author Keywords": "Active learning;security;vulnerabilities;software engineering;error correction",
      "IEEE Terms": "Inspection;Software;Tools;Security;Predictive models;Error correction;NIST",
      "Mesh_Terms": "",
      "Article Citation Count": 15,
      "Patent Citation Count": null,
      "Reference Count": 50,
      "License": "IEEE",
      "Online Date": "25-Oct-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Theoretical and Empirical Analyses of the Effectiveness of Metamorphic Relation Composition",
      "Authors": "K. Qiu; Z. Zheng; T. Y. Chen; P. -L. Poon",
      "Author Affiliations": "School of Automation Science and Electrical Engineering, Beihang University, Beijing, China; School of Automation Science and Electrical Engineering, Beihang University, Beijing, China; Department of Computer Science and Software Engineering, Swinburne University of Technology, Hawthorn, VIC, Australia; School of Engineering and Technology, Central Queensland University, Melbourne, VIC, Australia",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "15-Mar-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 3,
      "Start Page": 1001,
      "End Page": 1017,
      "Abstract": "Metamorphic Relations (MRs) play a key role in determining the fault detection capability of Metamorphic Testing (MT). As human judgement is required for MR identification, systematic MR generation has long been an important research area in MT. Additionally, due to the extra program executions required for follow-up test cases, some concerns have been raised about MT cost-effectiveness. Consequently, the reduction in testing costs associated with MT has become another important issue to be addressed. MR composition can address both of these problems. This technique can automatically generate new MRs by composing existing ones, thereby reducing the number of follow-up test cases. Despite this advantage, previous studies on MR composition have empirically shown that some composite MRs have lower fault detection capability than their corresponding component MRs. To investigate this issue, we performed theoretical and empirical analyses to identify what characteristics component MRs should possess so that their corresponding composite MR has at least the same fault detection capability as the component MRs do. We have also derived a convenient, but effective guideline so that the fault detection capability of MT will most likely not be reduced after composition.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2020.3009698",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:61772055,61872169); Technical Foundation Project of Ministry of Industry and Information Technology of China(grant numbers:JSZL2016601B003); Equipment Preliminary R&D Project of China(grant numbers:41402020102); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9144441",
      "Author Keywords": "Metamorphic testing;metamorphic relation;metamorphic relation composition;test oracle;fault detection capability",
      "IEEE Terms": "Testing;Fault detection;Software;Guidelines;Systematics;Australia;Companies",
      "Mesh_Terms": "",
      "Article Citation Count": 11,
      "Patent Citation Count": null,
      "Reference Count": 49,
      "License": "IEEE",
      "Online Date": "20-Jul-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Empirical Evaluation of Fault Localisation Using Code and Change Metrics",
      "Authors": "J. Sohn; S. Yoo",
      "Author Affiliations": "School of Computing, Korea Advanced Institute of Science and Technology, Daejon, Republic of Korea; School of Computing, Korea Advanced Institute of Science and Technology, Daejon, Republic of Korea",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "12-Aug-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 8,
      "Start Page": 1605,
      "End Page": 1625,
      "Abstract": "Fault localisation aims to reduce the debugging efforts of human developers by highlighting the program elements that are suspected to be the root cause of the observed failure. Spectrum Based Fault Localisation (SBFL), a coverage based approach, has been widely studied in many researches as a promising localisation technique. Recently, however, it has been proven that SBFL techniques have reached the limit of further improvement. To overcome the limitation, we extend SBFL with code and change metrics that have been mainly studied in defect prediction, such as size, age, and churn. FLUCCS, our fault learn-to-rank localisation technique, employs both existing SBFL formul√¶ and these metrics as input. We investigate the effect of employing code and change metrics for fault localisation using four different learn-to-rank techniques: Genetic Programming, Gaussian Process Modelling, Support Vector Machine, and Random Forest. We evaluate the performance of FLUCCS with 386 real world faults collected from Defects4J repository. The results show that FLUCCS with code and change metrics places 144 faults at the top and 304 faults within the top ten. This is a significant improvement over the state-of-art SBFL formul√¶, which can locate 65 and 212 faults at the top and within the top ten, respectively. We also investigate the feasibility of cross-project transfer learning of fault localisation. The results show that, while there exist project-specific properties that can be exploited for better localisation per project, ranking models learnt from one project can be applied to others without significant loss of effectiveness.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2019.2930977",
      "Funding Information": "National Research Foundation of Korea(grant numbers:NRF-2016R1C1B1011042); Next-Generation Information Computing Development Program; National Research Foundation of Korea(grant numbers:2017M3C4A7068179); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8772166",
      "Author Keywords": "Fault localisation;SBSE;genetic programming",
      "IEEE Terms": "Measurement;Debugging;Genetic programming;Feature extraction;Support vector machines;Training",
      "Mesh_Terms": "",
      "Article Citation Count": 10,
      "Patent Citation Count": null,
      "Reference Count": 51,
      "License": "IEEE",
      "Online Date": "25-Jul-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Comments on ‚ÄúUsing $k$k-Core Decomposition on Class Dependency Networks to Improve Bug Prediction Model's Practical Performance‚Äù",
      "Authors": "W. Pan; H. Ming; Z. Yang; T. Wang",
      "Author Affiliations": "School of Computer Science and Information Engineering, Zhejiang Gongshang University, Hangzhou, China; School of Engineering and Computer Science, Oakland University, Rochester, MI, USA; School of Computer Science, Xi'an Jiaotong University and GuardStrike Inc., Shaanxi, China; School of Computer Science and Information Engineering, Zhejiang Gongshang University, Hangzhou, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "9-Dec-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 12,
      "Start Page": 5176,
      "End Page": 5187,
      "Abstract": "In a very recent paper by (Qu et al., 2021), the authors propose an effective equation, top-core, to improve the performance of effort-aware bug prediction models. A distinctive feature of top-core is that it takes into account the coreness of a class in a Class Dependency Network (CDN) when calculating the relative risk of a class to be buggy. In this comment, we show that Qu et al.'s paper contains three shortcomings that may influence the performance of top-core or even have the potential to lead to erroneous results. First, we show that the CDN that they use to calculate the coreness of classes is not very accurate, neglecting many important types of dependency relations between classes such as method call relation, access relation, and instantiates relation. Second, they trained a Logistic Regression model using the scikit-learn framework to predict the probability of a specific class to be buggy. It is actually an L2 regularized Logistic Regression model, which is dependent on the scale of the features. But they neglected to normalize the features, making the obtained results erroneous. Finally, the number of execution times (viz. 10 times in the paper of Qu et al.) they used to reduce the bias caused by the randomness (viz. random split of instances and the process to handle class-imbalance problem) in the experiments is too small to ensure that the obtained results converge to stable values; but they failed to signify the precision level of their results for comparison. In this comment, we provide solutions to the problems by using i) an improved CDN (ICDN) to represent the structure of software systems, ii) the z-score method to normalize the features, and iii) an adaptive mechanism to determine the number of execution times. In the experiments, we find that Qu et al.'s approach based on the Logistic Regression model does not perform significantly better than the state-of-the-art approach Ree, which is inconsistent with the conclusion in Qu et al.'s work. We also observe that replacing CDN with ICDN does improve the performance of Qu et al.'s approach.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3140599",
      "Funding Information": "Natural Science Foundation of Zhejiang Province(grant numbers:LY22F020007); National Natural Science Foundation of China(grant numbers:62032010,61832014); Key R&D Program of Zhejiang Province(grant numbers:2019C01004,2019C03123); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9733807",
      "Author Keywords": "Effort-aware bug prediction;coreness;  $k$   k     -core;class dependency network;complex network",
      "IEEE Terms": "Computer bugs;Logistics;Predictive models;Mathematical models;Testing;Software systems;Codes",
      "Mesh_Terms": "",
      "Article Citation Count": 10,
      "Patent Citation Count": null,
      "Reference Count": 17,
      "License": "IEEE",
      "Online Date": "14-Mar-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "CBUA: A Probabilistic, Predictive, and Practical Approach for Evaluating Test Suite Effectiveness",
      "Authors": "P. Zhang; Y. Li; W. Ma; Y. Yang; L. Chen; H. Lu; Y. Zhou; B. Xu",
      "Author Affiliations": "State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "15-Mar-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 3,
      "Start Page": 1067,
      "End Page": 1096,
      "Abstract": "Knowing the effectiveness of a test suite is essential for many activities such as assessing the test adequacy of code and guiding the generation of new test cases. Mutation testing is a commonly used defect injection technique for evaluating the effectiveness of a test suite. However, it is usually computationally expensive, as a large number of mutants (buggy versions) are needed to be generated from a production code under test and executed against the test suite. In order to reduce the expensive testing cost, recent studies proposed to use supervised models to predict the effectiveness of a test suite without executing the test suite against the mutants. Nonetheless, the training of such a supervised model requires labeled data, which still depends on the costly mutant execution. Furthermore, existing models are based on traditional supervised learning techniques, which assume that the training and testing data come from the same distribution. But, in practice, software systems are subject to considerable concept drifts, i.e., the same distribution assumption usually does not hold. This can lead to inaccurate predictions of a learned supervised model on the target code as time progresses. To tackle these problems, in this paper, we propose a Coverage-Based Unsupervised Approach (CBUA) for evaluating the effectiveness of a test suite. Given a production code under test, the corresponding mutants, and a test suite, CBUA first collects the coverage information of the mutated statements in the target production code under the execution of the test suite. Then, CBUA employs coverage to estimate the probability of each mutant being alive. As such, a mutation score is computed to evaluate the test suite effectiveness and the predicted labels (i.e., killed or alive) are obtained. The whole process only requires a one-time execution of the test suite against the target production code, without involving any mutant execution and any training data. CBUA can ensure the score monotonicity property (i.e., adding test cases to a test suite does not decrease its mutation score), which may be violated by a supervised approach. The experimental results show that CBUA is very competitive with the state-of-the-art supervised approaches in prediction accuracy. In particular, CBUA is shown to be more effective in finding mutants that are covered but not killed by a test suite, which is helpful in identifying the weaknesses in the current test suite and generating new test cases accordingly. Since CBUA is an easy-to-implement approach with a low cost, we suggest that it should be used as a baseline approach for comparison when any novel prediction approach is proposed in future studies.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2020.3010361",
      "Funding Information": "National Key Research and Development Program of China(grant numbers:2018YFB1003901); National Natural Science Foundation of China(grant numbers:61772259,61872177,61832009,61772263); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9144443",
      "Author Keywords": "Effectiveness;test suites;coverage;unsupervised model;mutation testing",
      "IEEE Terms": "Testing;Predictive models;Production;Data models;Computational modeling;Training;Training data",
      "Mesh_Terms": "",
      "Article Citation Count": 8,
      "Patent Citation Count": null,
      "Reference Count": 54,
      "License": "IEEE",
      "Online Date": "20-Jul-20",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Active Learning of Discriminative Subgraph Patterns for API Misuse Detection",
      "Authors": "H. J. Kang; D. Lo",
      "Author Affiliations": "School of Information Systems, Singapore Management University, Singapore, Singapore; School of Information Systems, Singapore Management University, Singapore, Singapore",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Aug-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 8,
      "Start Page": 2761,
      "End Page": 2783,
      "Abstract": "A common cause of bugs and vulnerabilities are the violations of usage constraints associated with Application Programming Interfaces (APIs). API misuses are common in software projects, and while there have been techniques proposed to detect such misuses, studies have shown that they fail to reliably detect misuses while reporting many false positives. One limitation of prior work is the inability to reliably identify correct patterns of usage. Many approaches confuse a usage pattern's frequency for correctness. Due to the variety of alternative usage patterns that may be uncommon but correct, anomaly detection-based techniques have limited success in identifying misuses. We address these challenges and propose ALP (Actively Learned Patterns), reformulating API misuse detection as a classification problem. After representing programs as graphs, ALP mines discriminative subgraphs. While still incorporating frequency information, through limited human supervision, we reduce the reliance on the assumption relating frequency and correctness. The principles of active learning are incorporated to shift human attention away from the most frequent patterns. Instead, ALP samples informative and representative examples while minimizing labeling effort. In our empirical evaluation, ALP substantially outperforms prior approaches on both MUBench, an API Misuse benchmark, and a new dataset that we constructed from real-world software projects.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2021.3069978",
      "Funding Information": "National Research Foundation Singapore; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9392340",
      "Author Keywords": "API-Misuse detection;discriminative subgraph mining;graph classification;active learning",
      "IEEE Terms": "Detectors;Software development management;Java;Tools;Software;Computer bugs;Ciphers",
      "Mesh_Terms": "",
      "Article Citation Count": 7,
      "Patent Citation Count": null,
      "Reference Count": 103,
      "License": "IEEE",
      "Online Date": "31-Mar-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Mithra: Anomaly Detection as an Oracle for Cyberphysical Systems",
      "Authors": "A. Afzal; C. Le Goues; C. S. Timperley",
      "Author Affiliations": "School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA; School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA; School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "11-Nov-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 11,
      "Start Page": 4535,
      "End Page": 4552,
      "Abstract": "Testing plays an essential role in ensuring the safety and quality of cyberphysical systems (CPSs). One of the main challenges in automated and software-in-the-loop simulation testing of CPSs is defining effective oracles that can check that a given system conforms to expectations of desired behavior. Manually specifying such oracles can be tedious, complex, and error-prone, and so techniques for automatically learning oracles are attractive. Characteristics of CPSs, such as limited or no access to source code, behavior that is non-deterministic and sensitive to noise, and that the system may respond differently to input based on its context introduce considerable challenges for automated oracle learning. We present Mithra, a novel, unsupervised oracle learning technique for CPSs that operates on existing telemetry data. It uses a three-step multivariate time series clustering to discover the set of unique, correct behaviors for a CPS, which it uses to construct robust oracles. We instantiate our proposed technique for ArduPilot, a popular, open-source autopilot software. On a set of 24 bugs, we show that Mithra effectively identifies buggy executions with few false positives and outperforms AR-SI, a state-of-the-art CPS oracle learning technique. We demonstrate Mithra‚Äôs wider applicability by applying it to an autonomous racer built for the Robot Operating System.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2021.3120680",
      "Funding Information": "Air Force Research Laboratory(grant numbers:#FA8750- 15-2-0075); Defense Advanced Research Projects Agency(grant numbers:#FA8750-16-2-0042,NSF-1563797); Air Force Research Laboratory(grant numbers:19-PAF00747); National Science Foundation(grant numbers:#CCF-1750116); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9576615",
      "Author Keywords": "Robotics and autonomous systems;cyberphysical systems testing;anomaly detection;oracle learning;clustering;Mithra",
      "IEEE Terms": "Computer bugs;Codes;Testing;Telemetry;Splines (mathematics);Sensors;Sensor systems",
      "Mesh_Terms": "",
      "Article Citation Count": 6,
      "Patent Citation Count": null,
      "Reference Count": 120,
      "License": "IEEE",
      "Online Date": "15-Oct-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Learning Approximate Execution Semantics From Traces for Binary Function Similarity",
      "Authors": "K. Pei; Z. Xuan; J. Yang; S. Jana; B. Ray",
      "Author Affiliations": "Columbia University, New York, NY, USA; Purdue University, West Lafayette, IN, USA; Columbia University, New York, NY, USA; Columbia University, New York, NY, USA; Columbia University, New York, NY, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "18-Apr-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 4,
      "Start Page": 2776,
      "End Page": 2790,
      "Abstract": "Detecting semantically similar binary functions ‚Äì a crucial capability with broad security usages including vulnerability detection, malware analysis, and forensics ‚Äì requires understanding function behaviors and intentions. This task is challenging as semantically similar functions can be compiled to run on different architectures and with diverse compiler optimizations or obfuscations. Most existing approaches match functions based on syntactic features without understanding the functions‚Äô execution semantics. We present Trex, a transfer-learning-based framework, to automate learning approximate execution semantics explicitly from functions‚Äô traces collected via forced-execution (i.e., by violating the control flow semantics) and transfer the learned knowledge to match semantically similar functions. While it is known that forced-execution traces are too imprecise to be directly used to detect semantic similarity, our key insight is that these traces can instead be used to teach an ML model approximate execution semantics of diverse instructions and their compositions. We thus design a pretraining task, which trains the model to learn approximate execution semantics from the two modalities (i.e., forced-executed code and traces) of the function. We then finetune the pretrained model to match semantically similar functions. We evaluate Trex on 1,472,066 functions from 13 popular software projects, compiled to run on 4 architectures (x86, x64, ARM, and MIPS), and with 4 optimizations (O0-O3) and 5 obfuscations. Trex outperforms the state-of-the-art solutions by 7.8%, 7.2%, and 14.3% in cross-architecture, optimization, and obfuscation function matching, respectively, while running 8√ó faster. Ablation studies suggest that the pretraining significantly boosts the function matching performance, underscoring the importance of learning execution semantics. Our case studies demonstrate the practical use-cases of Trex ‚Äì on 180 real-world firmware images, Trex uncovers 14 vulnerabilities not disclosed by previous studies. We release the code and dataset of Trex at https://github.com/CUMLSec/trex.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3231621",
      "Funding Information": "National Science Foundation(grant numbers:CCF-18-45893,CCF-18-22965,CCF-16-19123,CNS-18-42456,CNS-18-01426,CNS-16-18771,CNS-16-17670,CNS-15-64055,CNS-15-63843); ONR(grant numbers:N00014-17-1-2010,N00014-16-1-2263,N00014-17-1-2788); NSF CAREER; ARO Young Investigator; Google Faculty Fellowship; JP Morgan Faculty Research Award; DiDi Faculty Research Award; Google Cloud; Capital One Research; Amazon Web Services; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10002189",
      "Author Keywords": "Binary analysis;large language models;software security",
      "IEEE Terms": "Semantics;Task analysis;Computer architecture;Optimization;Codes;Behavioral sciences;Computational modeling",
      "Mesh_Terms": "",
      "Article Citation Count": 6,
      "Patent Citation Count": null,
      "Reference Count": 100,
      "License": "IEEE",
      "Online Date": "28-Dec-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Enhancing Dynamic Symbolic Execution by Automatically Learning Search Heuristics",
      "Authors": "S. Cha; S. Hong; J. Bak; J. Kim; J. Lee; H. Oh",
      "Author Affiliations": "Department of Computer Science and Engineering, Sungkyunkwan University, Suwon, South Korea; Department of Computer Science and Engineering, Sungkyunkwan University, Suwon, South Korea; Department of Computer Science and Engineering, Sungkyunkwan University, Suwon, South Korea; Department of Computer Science and Engineering, Sungkyunkwan University, Suwon, South Korea; Department of Computer Science and Engineering, Sungkyunkwan University, Suwon, South Korea; Department of Computer Science and Engineering, Sungkyunkwan University, Suwon, South Korea",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Sep-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 9,
      "Start Page": 3640,
      "End Page": 3663,
      "Abstract": "We present a technique to automatically generate search heuristics for dynamic symbolic execution. A key challenge in dynamic symbolic execution is how to effectively explore the program's execution paths to achieve high code coverage in a limited time budget. Dynamic symbolic execution employs a search heuristic to address this challenge, which favors exploring particular types of paths that are most likely to maximize the final coverage. However, manually designing a good search heuristic is nontrivial and typically ends up with suboptimal and unstable outcomes. The goal of this paper is to overcome this shortcoming of dynamic symbolic execution by automatically learning search heuristics. We define a class of search heuristics, namely a parametric search heuristic, and present an algorithm that efficiently finds an optimal heuristic for each subject program. Experimental results with industrial-strength symbolic execution tools (e.g., KLEE) show that our technique can successfully generate search heuristics that significantly outperform existing manually-crafted heuristics in terms of branch coverage and bug-finding.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2021.3101870",
      "Funding Information": "Samsung Research Funding & Incubation Center of Samsung Electronics(grant numbers:SRFC-IT1701-51); Institute of Information & Communications Technology Planning & Evaluation; Ministry of Science and ICT, South Korea(grant numbers:2020-0-01337); ICT Creative Consilience program(grant numbers:IITP-2021-2020-0-01819); Institute for Information & communications Technology Planning & Evaluation; National Research Foundation of Korea(grant numbers:NRF-2021R1C1C2006410); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9507083",
      "Author Keywords": "Dynamic symbolic execution;concolic testing;execution-generated testing;search heuristics;software testing",
      "IEEE Terms": "Testing;Heuristic algorithms;Tools;Software testing;Search problems;Open source software;Software algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 78,
      "License": "IEEE",
      "Online Date": "4-Aug-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Invalidator: Automated Patch Correctness Assessment Via Semantic and Syntactic Reasoning",
      "Authors": "T. Le-Cong; D. -M. Luong; X. B. D. Le; D. Lo; N. -H. Tran; B. Quang-Huy; Q. -T. Huynh",
      "Author Affiliations": "School of Computing and Information Systems, The University of Melbourne, Parkville, VIC, Australia; School of Information and Communication Technology, Hanoi University of Science and Technology, Ha Noi, Vietnam; School of Computing and Information Systems, The University of Melbourne, Parkville, VIC, Australia; School of Computing and Information Systems, Singapore Management University, Singapore; School of Information and Communication Technology, Hanoi University of Science and Technology, Ha Noi, Vietnam; School of Information and Communication Technology, Hanoi University of Science and Technology, Ha Noi, Vietnam; School of Information and Communication Technology, Hanoi University of Science and Technology, Ha Noi, Vietnam",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "13-Jun-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 6,
      "Start Page": 3411,
      "End Page": 3429,
      "Abstract": "Automated program repair (APR) faces the challenge of test overfitting, where generated patches pass validation tests but fail to generalize. Existing methods for patch assessment involve generating new tests or manual inspection, which can be time-consuming or biased. In this paper, we propose a novel technique, Invalidator, to automatically assess the correctness of APR-generated patches via semantic and syntactic reasoning. Invalidator leverages program invariants to reason about program semantics while also capturing program syntax through language semantics learned from a large code corpus using a pre-trained language model. Given a buggy program and the developer-patched program, Invalidator infers likely invariants on both programs. Then, Invalidator determines that an APR-generated patch overfits if: (1) it violates correct specifications or (2) maintains erroneous behaviors from the original buggy program. In case our approach fails to determine an overfitting patch based on invariants, Invalidator utilizes a trained model from labeled patches to assess patch correctness based on program syntax. The benefit of Invalidator is threefold. First, Invalidator leverages both semantic and syntactic reasoning to enhance its discriminative capability. Second, Invalidator does not require new test cases to be generated, but instead only relies on the current test suite and uses invariant inference to generalize program behaviors. Third, Invalidator is fully automated. Experimental results demonstrate that Invalidator outperforms existing methods in terms of Accuracy and F-measure, correctly identifying 79% of overfitting patches and detecting 23% more overfitting patches than the best baseline.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3255177",
      "Funding Information": "Australian Research Council(grant numbers:DE220101057); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10066209",
      "Author Keywords": "Automated patch correctness assessment;automated program repair;code representations;overfitting problem;program invariants",
      "IEEE Terms": "Syntactics;Semantics;Maintenance engineering;Cognition;Manuals;Codes;Source coding",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 79,
      "License": "IEEE",
      "Online Date": "10-Mar-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Improving Cross-Language Code Clone Detection via Code Representation Learning and Graph Neural Networks",
      "Authors": "N. Mehrotra; A. Sharma; A. Jindal; R. Purandare",
      "Author Affiliations": "Department of Computer Science Engineering, IIIT Delhi, Delhi, India; Department of Computer Science Engineering, IIIT Delhi, Delhi, India; Department of Computer Science Engineering, IIIT Delhi, Delhi, India; University of Nebraska‚ÄìLincoln, Lincoln, NE, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "16-Nov-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 11,
      "Start Page": 4846,
      "End Page": 4868,
      "Abstract": "Code clone detection is an important aspect of software development and maintenance. The extensive research in this domain has helped reduce the complexity and increase the robustness of source code, thereby assisting bug detection tools. However, the majority of the clone detection literature is confined to a single language. With the increasing prevalence of cross-platform applications, functionality replication across multiple languages is common, resulting in code fragments having similar functionality but belonging to different languages. Since such clones are syntactically unrelated, single language clone detection tools are not applicable in their case. In this article, we propose a semi-supervised deep learning-based tool Rubhus, capable of detecting clones across different programming languages. Rubhus uses the control and data flow enriched abstract syntax trees (ASTs) of code fragments to leverage their syntactic and structural information and then applies graph neural networks (GNNs) to extract this information for the task of clone detection. We demonstrate the effectiveness of our proposed system through experiments conducted over datasets consisting of Java, C, and Python programs and evaluate its performance in terms of precision, recall, and F1 score. Our results indicate that Rubhus outperforms the state-of-the-art cross-language clone detection tools.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3311796",
      "Funding Information": "Department of Science and Technology (DST) (India); Science and Engineering Research Board (SERB); Confederation of Indian Industry (CII); Infosys Center for Artificial Intelligence at IIIT-Delhi; Nucleus Software Exports Ltd; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10242168",
      "Author Keywords": "Program representation learning;cross-language code clone detection;graph-based neural networks;abstract syntax trees",
      "IEEE Terms": "Codes;Cloning;Syntactics;Semantics;Java;Task analysis;Source coding",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 76,
      "License": "IEEE",
      "Online Date": "6-Sep-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Accelerating Finite State Machine-Based Testing Using Reinforcement Learning",
      "Authors": "U. C. T√ºrker; R. M. Hierons; K. El-Fakih; M. R. Mousavi; I. Y. Tyukin",
      "Author Affiliations": "School of Computing and Communications, Lancaster University, Lancaster, U.K.; Department of Computer Science, The University of Sheffield, Sheffield, U.K.; Department of Computer Science and Engineering, American University of Sharjah, University City, UAE; Department of Informatics, King‚Äôs College London, London, U.K.; Department of Mathematics, King‚Äôs College London, London, U.K.",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "18-Mar-24",
      "Publication Year": 2024,
      "Volume": 50,
      "Issue": 3,
      "Start Page": 574,
      "End Page": 597,
      "Abstract": "Testing is a crucial phase in the development of complex systems, and this has led to interest in automated test generation techniques based on state-based models. Many approaches use models that are types of finite state machine (FSM). Corresponding test generation algorithms typically require that certain test components, such as reset sequences (RSs) and preset distinguishing sequences (PDSs), have been produced for the FSM specification. Unfortunately, the generation of RSs and PDSs is computationally expensive, and this affects the scalability of such FSM-based test generation algorithms. This paper addresses this scalability problem by introducing a reinforcement learning framework: the $\\mathcal{Q}$Q-Graph framework for MBT. We show how this framework can be used in the generation of RSs and PDSs and consider both (potentially partial) timed and untimed models. The proposed approach was evaluated using three types of FSMs: randomly generated FSMs, FSMs from a benchmark, and an FSM of an Engine Status Manager for a printer. In experiments, the proposed approach was much faster and used much less memory than the state-of-the-art methods in computing PDSs and RSs.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2024.3358416",
      "Funding Information": "UKRI Trustworthy Autonomous Systems Node in Verifiability(grant numbers:EP/V026801/2); EPSRC: RoboTest: Systematic Model-Based Testing and Simulation of Mobile Autonomous Robots(grant numbers:EP/R025134/1); Security Lancaster(grant numbers:IRL1032 Poison Attack Mitigation); AUS(grant numbers:FRG23-R-E39); EPSRC project on Verified Simulation for Large Quantum Systems (VSL-Q)(grant numbers:EP/Y005244/1); EPSRC project on Robust and Reliable Quantum Computing (RoaRQ), Investigation 009 Model-based monitoring and calibration of quantum computations (ModeMCQ)(grant numbers:EP/W032635/1); King‚Äôs College London(grant numbers:King‚Äôs Quantum); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10414288",
      "Author Keywords": "Finite state machines;reset sequences;state identification sequences;reinforcement learning;Q-value function;software engineering/software/program verification;software engineering/test design;software engineering/testing and debugging",
      "IEEE Terms": "Test pattern generators;Scalability;Graphics processing units;Automata;Software systems;Engines;Real-time systems",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 86,
      "License": "IEEE",
      "Online Date": "25-Jan-24",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Better Pay Attention Whilst Fuzzing",
      "Authors": "S. Zhu; J. Wang; J. Sun; J. Yang; X. Lin; T. Wang; L. Zhang; P. Cheng",
      "Author Affiliations": "College of Control Science and Engineering, Zhejiang University, Zhejiang, China; College of Control Science and Engineering, Zhejiang University, Zhejiang, China; School of Computing and Information Systems, Singapore Management University, Singapore; School of Medicine, Zhejiang University, Zhejiang, China; Ant Group, Hangzhou, China; College of Control Science and Engineering, Zhejiang University, Zhejiang, China; College of Control Science and Engineering, Zhejiang University, Zhejiang, China; College of Control Science and Engineering, Zhejiang University, Zhejiang, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "12-Feb-24",
      "Publication Year": 2024,
      "Volume": 50,
      "Issue": 2,
      "Start Page": 190,
      "End Page": 208,
      "Abstract": "Fuzzing is one of the prevailing methods for vulnerability detection. However, even state-of-the-art fuzzing methods become ineffective after some period of time, i.e., the coverage hardly improves as existing methods are ineffective to focus the attention of fuzzing on covering the hard-to-trigger program paths. In other words, they cannot generate inputs that can break the bottleneck due to the fundamental difficulty in capturing the complex relations between the test inputs and program coverage. In particular, existing fuzzers suffer from the following main limitations: 1) lacking an overall analysis of the program to identify the most ‚Äúrewarding‚Äù seeds, and 2) lacking an effective mutation strategy which could continuously select and mutates the more relevant ‚Äúbytes‚Äù of the seeds. In this work, we propose an approach called ATTuzz to address these two issues systematically. First, we propose a lightweight dynamic analysis technique that estimates the ‚Äúreward‚Äù of covering each basic block and selects the most rewarding seeds accordingly. Second, we mutate the selected seeds according to a neural network model which predicts whether a certain ‚Äúrewarding‚Äù block will be covered given certain mutations on certain bytes of a seed. The model is a deep learning model equipped with an attention mechanism which is learned and updated periodically whilst fuzzing. Our evaluation shows that ATTuzz significantly outperforms 5 state-of-the-art grey-box fuzzers on 6 popular real-world programs and MAGMA data sets at achieving higher edge coverage and finding new bugs. In particular, ATTuzz achieved 1.2X edge coverage and 1.8X bugs detected than AFL++ over 24-hour runs. In addition, ATTuzz also finds 4 new bugs in the latest version of some popular software including p7zip and openUSD.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3338129",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:61833015,62293511,62102359); Academic Research Fund Tier 3, Ministry of Education, Singapore(grant numbers:MOET32020-0004); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10339688",
      "Author Keywords": "Fuzzing;deep learning;program analysis;attention model",
      "IEEE Terms": "Fuzzing;Deep learning;Computer bugs;Codes;Image edge detection;Electronic mail;Recurrent neural networks",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 72,
      "License": "IEEE",
      "Online Date": "4-Dec-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Mitigating False Positive Static Analysis Warnings: Progress, Challenges, and Opportunities",
      "Authors": "Z. Guo; T. Tan; S. Liu; X. Liu; W. Lai; Y. Yang; Y. Li; L. Chen; W. Dong; Y. Zhou",
      "Author Affiliations": "State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; Beijing Bytedance Network Technology Company Ltd., Beijing, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China; College of Computer Science, National University of Defense Technology, Changsha, Hunan, China; State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "12-Dec-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 12,
      "Start Page": 5154,
      "End Page": 5188,
      "Abstract": "Static analysis (SA) tools can generate useful static warnings to reveal the problematic code snippets in a software system without dynamically executing the corresponding source code. In the literature, static warnings are of paramount importance because they can easily indicate specific types of software defects in the early stage of a software development process, which accordingly reduces the maintenance costs by a substantial margin. Unfortunately, due to the conservative approximations of such SA tools, a large number of false positive (FP for short) warnings (i.e., they do not indicate real bugs) are generated, making these tools less effective. During the past two decades, therefore, many false positive mitigation (FPM for short) approaches have been proposed so that more accurate and critical warnings can be delivered to developers. This paper offers a detailed survey of research achievements on the topic of FPM. Given the collected 130 surveyed papers, we conduct a comprehensive investigation from five different perspectives. First, we reveal the research trends of this field. Second, we classify the existing FPM approaches into five different types and then present the concrete research progress. Third, we analyze the evaluation system applied to examine the performance of the proposed approaches in terms of studied SA tools, evaluation scenarios, performance indicators, and collected datasets, respectively. Fourth, we summarize the four types of empirical studies relating to SA warnings to exploit the insightful findings that are helpful to reduce FP warnings. Finally, we sum up 10 challenges unresolved in the literature from the aspects of systematicness, effectiveness, completeness, and practicability and outline possible research opportunities based on three emerging techniques in the future.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3329667",
      "Funding Information": "Natural Science Foundation of China(grant numbers:62172205,62072194,62172202,62272221,62032019); National Key Research and Development Program of China(grant numbers:2022YFB4501903); Natural Science Foundation of Jiangsu Province(grant numbers:SBK2023022696); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10305541",
      "Author Keywords": "Static warnings;false positives;defects;static analysis tools;software quality assurance",
      "IEEE Terms": "Surveys;Software;Static analysis;Software quality;Codes;Computer bugs;Market research",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 186,
      "License": "IEEE",
      "Online Date": "2-Nov-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "The Impact of Using Regression Models to Build Defect Classifiers",
      "Authors": "G. K. Rajbahadur; S. Wang; Y. Kamei; A. E. Hassan",
      "Author Affiliations": "Queen's University, Canada; Queen's University, Canada; Kyushu University, Japan; Queen's University, Canada",
      "Publication Title": "2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "3-Jul-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 135,
      "End Page": 145,
      "Abstract": "It is common practice to discretize continuous defect counts into defective and non-defective classes and use them as a target variable when building defect classifiers (discretized classifiers). However, this discretization of continuous defect counts leads to information loss that might affect the performance and interpretation of defect classifiers. Another possible approach to build defect classifiers is through the use of regression models then discretizing the predicted defect counts into defective and non-defective classes (regression-based classifiers). In this paper, we compare the performance and interpretation of defect classifiers that are built using both approaches (i.e., discretized classifiers and regression-based classifiers) across six commonly used machine learning classifiers (i.e., linear/logistic regression, random forest, KNN, SVM, CART, and neural networks) and 17 datasets. We find that: i) Random forest based classifiers outperform other classifiers (best AUC) for both classifier building approaches, ii) In contrast to common practice, building a defect classifier using discretized defect counts (i.e., discretized classifiers) does not always lead to better performance. Hence we suggest that future defect classification studies should consider building regression-based classifiers (in particular when the defective ratio of the modeled dataset is low). Moreover, we suggest that both approaches for building defect classifiers should be explored, so the best-performing classifier can be used when determining the most influential features.",
      "ISSN": "",
      "ISBNs": "978-1-5386-1544-7",
      "DOI": "10.1109/MSR.2017.4",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7962363",
      "Author Keywords": "Classification via regression;Random forest;Bug prediction;Discretization;Non-Discretization;Model Interpretation",
      "IEEE Terms": "Buildings;Correlation;Software;Predictive models;Redundancy;Computational modeling;Data collection",
      "Mesh_Terms": "",
      "Article Citation Count": 41,
      "Patent Citation Count": null,
      "Reference Count": 44,
      "License": "IEEE",
      "Online Date": "3-Jul-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Mining Workflows for Anomalous Data Transfers",
      "Authors": "H. Tu; G. Papadimitriou; M. Kiran; C. Wang; A. Mandal; E. Deelman; T. Menzies",
      "Author Affiliations": "Department of Computer Science, North Carolina State University, Raleigh, USA; University of Southern California, Information Sciences Institute, Marina del Rey, CA, USA; Energy Sciences Network (ESnet), Lawrence Berkeley National Labs, CA, USA; RENCI, University of North Carolina, Chapel Hill, NC, USA; RENCI, University of North Carolina, Chapel Hill, NC, USA; University of Southern California, Information Sciences Institute, Marina del Rey, CA, USA; Department of Computer Science, North Carolina State University, Raleigh, USA",
      "Publication Title": "2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "28-Jun-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 1,
      "End Page": 12,
      "Abstract": "Modern scientific workflows are data-driven and are often executed on distributed, heterogeneous, high-performance computing infrastructures. Anomalies and failures in the work-flow execution cause loss of scientific productivity and inefficient use of the infrastructure. Hence, detecting, diagnosing, and mitigating these anomalies are immensely important for reliable and performant scientific workflows. Since these workflows rely heavily on high-performance network transfers that require strict QoS constraints, accurately detecting anomalous network performance is crucial to ensure reliable and efficient workflow execution. To address this challenge, we have developed X-FLASH, a network anomaly detection tool for faulty TCP workflow transfers. X-FLASH incorporates novel hyperparameter tuning and data mining approaches for improving the performance of the machine learning algorithms to accurately classify the anomalous TCP packets. X-FLASH leverages XGBoost as an ensemble model and couples XGBoost with a sequential optimizer, FLASH, borrowed from search-based Software Engineering to learn the optimal model parameters. X-FLASH found configurations that outperformed the existing approach up to 28%, 29%, and 40% relatively for F-measure, G-score, and recall in less than 30 evaluations. From (1) large improvement and (2) simple tuning, we recommend future research to have additional tuning study as a new standard, at least in the area of scientific workflow anomaly detection.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-8710-5",
      "DOI": "10.1109/MSR52588.2021.00013",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9463120",
      "Author Keywords": "Scientific Workflow;TCP Signatures;Anomaly Detection;Hyper-Parameter Tuning;Sequential Optimization",
      "IEEE Terms": "Radio frequency;Tools;Data transfer;Data models;Software;Software reliability;Tuning",
      "Mesh_Terms": "",
      "Article Citation Count": 7,
      "Patent Citation Count": null,
      "Reference Count": 69,
      "License": "IEEE",
      "Online Date": "28-Jun-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Using Developer-Interaction Trails to Triage Change Requests",
      "Authors": "M. B. Zanjani; H. Kagdi; C. Bird",
      "Author Affiliations": "Department of Electrical Engineering and Computer Science, Wichita State University, Wichita, Kansas, USA; Department of Electrical Engineering and Computer Science, Wichita State University, Wichita, Kansas, USA; Microsoft Research, Redmond, WA, USA",
      "Publication Title": "2015 IEEE/ACM 12th Working Conference on Mining Software Repositories",
      "Date Added To Xplore": "6-Aug-15",
      "Publication Year": 2015,
      "Volume": null,
      "Issue": null,
      "Start Page": 88,
      "End Page": 98,
      "Abstract": "The paper presents an approach, namely iHDev, to recommend developers who are most likely to implement incoming change requests. The basic premise of iHDev is that the developers who interacted with the source code relevant to a given change request are most likely to best assist with its resolution. A machine-learning technique is first used to locate source code entities relevant to the textual description of a given change request. Ihdev then mines interaction trails (i.e., Mylyn sessions) associated with these source code entities to recommend a ranked list of developers. Ihdev integrates the interaction trails in a unique way to perform its task, which was not investigated previously. An empirical study on open source systems Mylyn and Eclipse Project was conducted to assess the effectiveness of iHDev. A number of change requests were used in the evaluated bench-mark. Recall for top one to five recommended developers and Mean Reciprocal Rank (MRR) values are reported. Furthermore, a comparative study with two previous approaches that use commit histories and/or the source code authorship information for developer recommendation was performed. Results show that iHDev could provide a recall gain of up to 127.27% with equivalent or improved MRR values by up to 112.5%.",
      "ISSN": "2160-1860",
      "ISBNs": "978-0-7695-5594-2",
      "DOI": "10.1109/MSR.2015.16",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7180070",
      "Author Keywords": "",
      "IEEE Terms": "History;Computer bugs;Mathematical model;Software;Data mining;XML;Context",
      "Mesh_Terms": "",
      "Article Citation Count": 6,
      "Patent Citation Count": 1,
      "Reference Count": 38,
      "License": "IEEE",
      "Online Date": "6-Aug-15",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "MANDO-HGT: Heterogeneous Graph Transformers for Smart Contract Vulnerability Detection",
      "Authors": "H. H. Nguyen; N. -M. Nguyen; C. Xie; Z. Ahmadi; D. Kudendo; T. -N. Doan; L. Jiang",
      "Author Affiliations": "L3S Research Center, Leibniz Universit√§t Hannover, Hannover, Germany; Singapore Management University, Singapore; L3S Research Center, Leibniz Universit√§t Hannover, Hannover, Germany; L3S Research Center, Leibniz Universit√§t Hannover, Hannover, Germany; L3S Research Center, Leibniz Universit√§t Hannover, Hannover, Germany; Independent Researcher, Atlanta, Georgia, USA; Singapore Management University, Singapore",
      "Publication Title": "2023 IEEE/ACM 20th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "12-Jul-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 334,
      "End Page": 346,
      "Abstract": "Smart contracts in blockchains have been increasingly used for high-value business applications. It is essential to check smart contracts' reliability before and after deployment. Although various program analysis and deep learning techniques have been proposed to detect vulnerabilities in either Ethereum smart contract source code or bytecode, their detection accuracy and scalability are still limited. This paper presents a novel framework named MANDO-HGT for detecting smart contract vulnerabilities. Given Ethereum smart contracts, either in source code or bytecode form, and vulnerable or clean, MANDO-HGT custom-builds heterogeneous contract graphs (HCGs) to represent control-flow and/or function-call information of the code. It then adapts heterogeneous graph transformers (HGTs) with customized meta relations for graph nodes and edges to learn their embeddings and train classifiers for detecting various vulnerability types in the nodes and graphs of the contracts more accurately. We have collected more than 55K Ethereum smart contracts from various data sources and verified the labels for 423 buggy and 2,742 clean contracts to evaluate MANDO-HGT. Our empirical results show that MANDO-HGT can significantly improve the detection accuracy of other state-of-the-art vulnerability detection techniques that are based on either machine learning or conventional analysis techniques. The accuracy improvements in terms of F1-score range from 0.7% to more than 76% at either the coarse-grained contract level or the fine-grained line level for various vulnerability types in either source code or bytecode. Our method is general and can be retrained easily for different vulnerability types without the need for manually defined vulnerability patterns.",
      "ISSN": "2574-3864",
      "ISBNs": "979-8-3503-1184-6",
      "DOI": "10.1109/MSR59073.2023.00052",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10174104",
      "Author Keywords": "vulnerability detection;smart contracts;source code;bytecode;heterogeneous graph learning;graph transformer",
      "IEEE Terms": "Deep learning;Codes;Source coding;Soft sensors;Scalability;Image edge detection;Smart contracts",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 79,
      "License": "IEEE",
      "Online Date": "12-Jul-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Chaff from the Wheat: Characterizing and Determining Valid Bug Reports",
      "Authors": "Y. Fan; X. Xia; D. Lo; A. E. Hassan",
      "Author Affiliations": "College of Computer Science and Technology, Zhejiang University, Hangzhou, China; Faculty of Information Technology, Monash University, Melbourne, Australia; School of Information Systems, Singapore Management University, Singapore; School of Computing, Queen's University, Kingston, Canada",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "14-May-20",
      "Publication Year": 2020,
      "Volume": 46,
      "Issue": 5,
      "Start Page": 495,
      "End Page": 525,
      "Abstract": "Developers use bug reports to triage and fix bugs. When triaging a bug report, developers must decide whether the bug report is valid (i.e., a real bug). A large amount of bug reports are submitted every day, with many of them end up being invalid reports. Manually determining valid bug report is a difficult and tedious task. Thus, an approach that can automatically analyze the validity of a bug report and determine whether a report is valid can help developers prioritize their triaging tasks and avoid wasting time and effort on invalid bug reports. In this study, motivated by the above needs, we propose an approach which can determine whether a newly submitted bug report is valid. Our approach first extracts 33 features from bug reports. The extracted features are grouped along 5 dimensions, i.e., reporter experience, collaboration network, completeness, readability and text. Based on these features, we use a random forest classifier to identify valid bug reports. To evaluate the effectiveness of our approach, we experiment on large-scale datasets containing a total of 560,697 bug reports from five open source projects (i.e., Eclipse, Netbeans, Mozilla, Firefox and Thunderbird). On average, across the five datasets, our approach achieves an F1-score for valid bug reports and F1-score for invalid ones of 0.74 and 0.67, respectively. Moreover, our approach achieves an average AUC of 0.81. In terms of AUC and F1-scores for valid and invalid bug reports, our approach statistically significantly outperforms two baselines using features that are proposed by Zanetti et al. [104] . We also study the most important features that distinguish valid bug reports from invalid ones. We find that the textual features of a bug report and reporter's experience are the most important factors to distinguish valid bug reports from invalid ones.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2018.2864217",
      "Funding Information": "National Basic Research Program of China (973 Program)(grant numbers:2018YFB1003904); National Natural Science Foundation of China(grant numbers:61602403); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8428477",
      "Author Keywords": "Bug report;feature generation;machine learning",
      "IEEE Terms": "Computer bugs;Feature extraction;Collaboration;Forestry;Support vector machines;Task analysis;Software",
      "Mesh_Terms": "",
      "Article Citation Count": 54,
      "Patent Citation Count": null,
      "Reference Count": 109,
      "License": "IEEE",
      "Online Date": "7-Aug-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Coverage Prediction for Accelerating Compiler Testing",
      "Authors": "J. Chen; G. Wang; D. Hao; Y. Xiong; H. Zhang; L. Zhang; B. Xie",
      "Author Affiliations": "Institute of Software, EECS, Peking University, Beijing, China; Institute of Software, EECS, Peking University, Beijing, China; Institute of Software, EECS, Peking University, Beijing, China; Institute of Software, EECS, Peking University, Beijing, China; University of Newcastle, Newcastle, NSW, Australia; Institute of Software, EECS, Peking University, Beijing, China; Institute of Software, EECS, Peking University, Beijing, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "11-Feb-21",
      "Publication Year": 2021,
      "Volume": 47,
      "Issue": 2,
      "Start Page": 261,
      "End Page": 278,
      "Abstract": "Compilers are one of the most fundamental software systems. Compiler testing is important for assuring the quality of compilers. Due to the crucial role of compilers, they have to be well tested. Therefore, automated compiler testing techniques (those based on randomly generated programs) tend to run a large number of test programs (which are test inputs of compilers). The cost for compilation and execution for these test programs is significant. These techniques can take a long period of testing time to detect a relatively small number of compiler bugs. That may cause many practical problems, e.g., bringing a lot of costs including time costs and financial costs, and delaying the development/release cycle. Recently, some approaches have been proposed to accelerate compiler testing by executing test programs that are more likely to trigger compiler bugs earlier according to some criteria. However, these approaches ignore an important aspect in compiler testing: different test programs may have similar test capabilities (i.e., testing similar functionalities of a compiler, even detecting the same compiler bug), which may largely discount their acceleration effectiveness if the test programs with similar test capabilities are executed all the time. Test coverage is a proper approximation to help distinguish them, but collecting coverage dynamically is infeasible in compiler testing since most test programs are generated on the fly by automatic test-generation tools like Csmith. In this paper, we propose the first method to predict test coverage statically for compilers, and then propose to prioritize test programs by clustering them according to the predicted coverage information. The novel approach to accelerating compiler testing through coverage prediction is called COP (short for COverage Prediction). Our evaluation on GCC and LLVM demonstrates that COP significantly accelerates compiler testing, achieving an average of 51.01 percent speedup in test execution time on an existing dataset including three old release versions of the compilers and achieving an average of 68.74 percent speedup on a new dataset including 12 latest release versions. Moreover, COP outperforms the state-of-the-art acceleration approach significantly by improving $17.16\\%\\sim 82.51\\%$17.16%‚àº82.51% speedups in different settings on average.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2018.2889771",
      "Funding Information": "National Key Research and Development Program of China(grant numbers:2017YFB1001803); National Natural Science Foundation of China(grant numbers:61672047,61529201,61872008,61828201,61672045,61861130363); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8588375",
      "Author Keywords": "Compiler testing;test prioritization;machine learning",
      "IEEE Terms": "Testing;Program processors;Computer bugs;Life estimation;Acceleration;Optimization;Electromagnetic interference",
      "Mesh_Terms": "",
      "Article Citation Count": 20,
      "Patent Citation Count": null,
      "Reference Count": 86,
      "License": "IEEE",
      "Online Date": "25-Dec-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "SeqTrans: Automatic Vulnerability Fix Via Sequence to Sequence Learning",
      "Authors": "J. Chi; Y. Qu; T. Liu; Q. Zheng; H. Yin",
      "Author Affiliations": "Ministry of Education Key Lab For Intelligent Networks and Network Security (MOEKLINNS), School of Computer Science and Technology, Xian Jiaotong University, Xian, China; Department of Computer Science and Engineering, UC Riverside, Riverside, CA, USA; Ministry of Education Key Lab For Intelligent Networks and Network Security (MOEKLINNS), School of Computer Science and Technology, Xian Jiaotong University, Xian, China; Ministry of Education Key Lab For Intelligent Networks and Network Security (MOEKLINNS), School of Computer Science and Technology, Xian Jiaotong University, Xian, China; Department of Computer Science and Engineering, UC Riverside, Riverside, CA, USA",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "14-Feb-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 2,
      "Start Page": 564,
      "End Page": 585,
      "Abstract": "Software vulnerabilities are now reported unprecedentedly due to the recent development of automated vulnerability hunting tools. However, fixing vulnerabilities still mainly depends on programmers‚Äô manual efforts. Developers need to deeply understand the vulnerability and affect the system‚Äôs functions as little as possible. In this paper, with the advancement of Neural Machine Translation (NMT) techniques, we provide a novel approach called SeqTrans to exploit historical vulnerability fixes to provide suggestions and automatically fix the source code. To capture the contextual information around the vulnerable code, we propose to leverage data-flow dependencies to construct code sequences and feed them into the state-of-the-art transformer model. The fine-tuning strategy has been introduced to overcome the small sample size problem. We evaluate SeqTrans on a dataset containing 1,282 commits that fix 624 CVEs in 205 Java projects. Results show that the accuracy of SeqTrans outperforms the latest techniques and achieves 23.3% in statement-level fix and 25.3% in CVE-level fix. In the meantime, we look deep inside the result and observe that the NMT model performs very well in certain kinds of vulnerabilities like CWE-287 (Improper Authentication) and CWE-863 (Incorrect Authorization).",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3156637",
      "Funding Information": "National Key Research and Development Program of China(grant numbers:2018YFB1004500); National Natural Science Foundation of China(grant numbers:62002280,61632015,61772408,U1766215,61833015,61902306); National Natural Science Foundation of China(grant numbers:61721002); Innovation Research Team of Ministry of Education(grant numbers:IRT_17R86); China Knowledge Centre for Engineering Science and Technology; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9729554",
      "Author Keywords": "Machine learning;neural machine translation;software engineering;vulnerability fix",
      "IEEE Terms": "Maintenance engineering;Codes;Computer bugs;Predictive models;Transformers;Decoding;Training",
      "Mesh_Terms": "",
      "Article Citation Count": 9,
      "Patent Citation Count": null,
      "Reference Count": 104,
      "License": "IEEE",
      "Online Date": "7-Mar-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Software Requirements Ecosystem: Linking Forum, Issue Tracker, and FAQs for Requirements Management",
      "Authors": "J. Tizard; P. Devine; H. Wang; K. Blincoe",
      "Author Affiliations": "Human Aspects of Software Engineering Lab, University of Auckland, Auckland, New Zealand; Human Aspects of Software Engineering Lab, University of Auckland, Auckland, New Zealand; Human Aspects of Software Engineering Lab, University of Auckland, Auckland, New Zealand; Human Aspects of Software Engineering Lab, University of Auckland, Auckland, New Zealand",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "18-Apr-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 4,
      "Start Page": 2381,
      "End Page": 2393,
      "Abstract": "User feedback is an important resource in modern software development, often containing requirements that help address user concerns and desires for a software product. The feedback in online channels is a recent focus for software engineering researchers, with multiple studies proposing automatic analysis tools. In this work, we investigate the product forums of two large open source software projects. Through a quantitative analysis, we show that forum feedback is often manually linked to related issue tracker entries and product documentation. By linking feedback to their existing documentation, development teams enhance their understanding of known issues, and direct their users to known solutions. We discuss how the links between forum, issue tracker, and product documentation form a requirements ecosystem that has not been identified in the previous literature. We apply state-of-the-art deep-learning to automatically match forum posts with related issue tracker entries. Our approach identifies requirement matches with a mean average precision of 58.9% and hit ratio of 82.2%. Additionally, we apply deep-learning using an innovative clustering technique, achieving promising performance when matching forum posts to related product documentation. We discuss the possible applications of these automated techniques to support the flow of requirements between forum, issue tracker, and product documentation.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3219458",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9940985",
      "Author Keywords": "Requirements engineering;machine learning;natural language processing;deep learning;open source software;user feedback;software engineering",
      "IEEE Terms": "Software;Documentation;Computer bugs;Open source software;Ecosystems;Browsers;Software engineering",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 44,
      "License": "IEEE",
      "Online Date": "7-Nov-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Multi-Granularity Detector for Vulnerability Fixes",
      "Authors": "T. G. Nguyen; T. Le-Cong; H. J. Kang; R. Widyasari; C. Yang; Z. Zhao; B. Xu; J. Zhou; X. Xia; A. E. Hassan; X. -B. D. Le; D. Lo",
      "Author Affiliations": "School of Computing and Information Systems, Singapore Management University, Singapore; School of Computing and Information Systems, Singapore Management University, Singapore; School of Computing and Information Systems, Singapore Management University, Singapore; School of Computing and Information Systems, Singapore Management University, Singapore; School of Computing and Information Systems, Singapore Management University, Singapore; School of Computing and Information Systems, Singapore Management University, Singapore; School of Computing and Information Systems, Singapore Management University, Singapore; Software Engineering Application Technology Lab, Shenzhen, Guangdong, China; Software Engineering Application Technology Lab, Shenzhen, Guangdong, China; School of Computing, Queen's University, Kingston, ON, Canada; School of Computing and Information Systems, The University of Melbourne, Parkville, VIC, Australia; School of Computing and Information Systems, Singapore Management University, Singapore",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "14-Aug-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 8,
      "Start Page": 4035,
      "End Page": 4057,
      "Abstract": "With the increasing reliance on Open Source Software, users are exposed to third-party library vulnerabilities. Software Composition Analysis (SCA) tools have been created to alert users of such vulnerabilities. SCA requires the identification of vulnerability-fixing commits. Prior works have proposed methods that can automatically identify such vulnerability-fixing commits. However, identifying such commits is highly challenging, as only a very small minority of commits are vulnerability fixing. Moreover, code changes can be noisy and difficult to analyze. We observe that noise can occur at different levels of detail, making it challenging to detect vulnerability fixes accurately. To address these challenges and boost the effectiveness of prior works, we propose MiDas (Multi-Granularity Detector for Vulnerability Fixes). Unique from prior works, MiDas constructs different neural networks for each level of code change granularity, corresponding to commit-level, file-level, hunk-level, and line-level, following their natural organization and then use an ensemble model combining all base models to output the final prediction. This design allows MiDas to better cope with the noisy and highly-imbalanced nature of vulnerability-fixing commit data. In addition, to reduce the human effort required to inspect code changes, we have designed an effort-aware adjustment for MiDas's outputs based on commit length. The evaluation result demonstrates that MiDas outperforms the current state-of-the-art baseline on both Java and Python-based datasets in terms of AUC by 4.9% and 13.7%, respectively. Furthermore, in terms of two effort-aware metrics, i.e., EffortCost@L and Popt@L, MiDas also performs better than the state-of-the-art baseline up to 28.2% and 15.9% on Java, 60% and 51.4% on Python, respectively.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3281275",
      "Funding Information": "National Research Foundation, Singapore; National University of Singapore; National Satellite of Excellence in Trustworthy Software Systems (NSOE-TSS) office; Trustworthy Computing for Secure Smart Nation Grant(grant numbers:NSOE-TSS2020-02); Australian Research Council's Discovery Early Career Researcher Award(grant numbers:DE220101057); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10138621",
      "Author Keywords": "Vulnerability-fixing commit classification;machine learning;deep learning;software security",
      "IEEE Terms": "Codes;Task analysis;Security;Java;Libraries;Testing;Predictive models",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 106,
      "License": "IEEE",
      "Online Date": "30-May-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "How Often Do Single-Statement Bugs Occur? The ManySStuBs4J Dataset",
      "Authors": "R. -M. Karampatsis; C. Sutton",
      "Author Affiliations": "University of Edinburgh, Edinburgh, United Kingdom; Google Research, University of Edinburgh and The Alan Turing Institute, Mountain View, CA, United States",
      "Publication Title": "2020 IEEE/ACM 17th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "20-Jun-23",
      "Publication Year": 2020,
      "Volume": null,
      "Issue": null,
      "Start Page": 573,
      "End Page": 577,
      "Abstract": "Program repair is an important but difficult software engineering problem. One way to achieve acceptable performance is to focus on classes of simple bugs, such as bugs with single statement fixes, or that match a small set of bug templates. However, it is very difficult to estimate the recall of repair techniques for simple bugs, as there are no datasets about how often the associated bugs occur in code. To fill this gap, we provide a dataset of 153,652 single statement bug-fix changes mined from 1,000 popular open-source Java projects, annotated by whether they match any of a set of 16 bug templates, inspired by state-of-the-art program repair techniques. In an initial analysis, we find that about 33% of the simple bug fixes match the templates, indicating that a remarkable number of single-statement bugs can be repaired with a relatively small set of templates. Further, we find that template fitting bugs appear with a frequency of about one bug per 1,600-2,500 lines of code (as measured by the size of the project's latest version). We hope that the dataset will prove a resource for both future work in program repair and studies in empirical software engineering.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-7517-7",
      "DOI": "10.1145/3379597.3387491",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10148782",
      "Author Keywords": "Program Repair;Mining Software Repositories;Datasets",
      "IEEE Terms": "Java;Codes;Computer bugs;Machine learning;Maintenance engineering;Size measurement;Software",
      "Mesh_Terms": "",
      "Article Citation Count": 21,
      "Patent Citation Count": null,
      "Reference Count": 27,
      "License": "",
      "Online Date": "20-Jun-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Practitioners‚Äô Perceptions of the Goals and Visual Explanations of Defect Prediction Models",
      "Authors": "J. Jiarpakdee; C. K. Tantithamthavorn; J. Grundy",
      "Author Affiliations": "Monash University, Melbourne, Australia; Monash University, Melbourne, Australia; Monash University, Melbourne, Australia",
      "Publication Title": "2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "28-Jun-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 432,
      "End Page": 443,
      "Abstract": "Software defect prediction models are classifiers that are constructed from historical software data. Such software defect prediction models have been proposed to help developers optimize the limited Software Quality Assurance (SQA) resources and help managers develop SQA plans. Prior studies have different goals for their defect prediction models and use different techniques for generating visual explanations of their models. Yet, it is unclear what are the practitioners' perceptions of (1) these defect prediction model goals, and (2) the model-agnostic techniques used to visualize these models. We conducted a qualitative survey to investigate practitioners' perceptions of the goals of defect prediction models and the model-agnostic techniques used to generate visual explanations of defect prediction models. We found that (1) 82%-84% of the respondents perceived that the three goals of defect prediction models are useful; (2) LIME is the most preferred technique for understanding the most important characteristics that contributed to a prediction of a file, while ANOVA/VarImp is the second most preferred technique for understanding the characteristics that are associated with software defects in the past. Our findings highlight the significance of investigating how to improve the understanding of defect prediction models and their predictions. Hence, model-agnostic techniques from explainable AI domain may help practitioners to understand defect prediction models and their predictions.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-8710-5",
      "DOI": "10.1109/MSR52588.2021.00055",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9463073",
      "Author Keywords": "Software Quality Assurance;Defect Prediction;Explainable AI;Software Analytics",
      "IEEE Terms": "Visualization;Analytical models;Privacy;Software quality;Predictive models;Data models;Data mining",
      "Mesh_Terms": "",
      "Article Citation Count": 36,
      "Patent Citation Count": null,
      "Reference Count": 54,
      "License": "IEEE",
      "Online Date": "28-Jun-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Can I Solve It? Identifying APIs Required to Complete OSS Tasks",
      "Authors": "F. Santos; I. Wiese; B. Trinkenreich; I. Steinmacher; A. Sarma; M. A. Gerosa",
      "Author Affiliations": "Northern Arizona University, USA; Universidade Tecnol√≥gica Federal do Paran√°, Brazil; Northern Arizona University, USA; Northern Arizona University, USA; Oregon State University, USA; Northern Arizona University, USA",
      "Publication Title": "2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "28-Jun-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 346,
      "End Page": 257,
      "Abstract": "Open Source Software projects add labels to open issues to help contributors choose tasks. However, manually labeling issues is time-consuming and error-prone. Current automatic approaches for creating labels are mostly limited to classifying issues as a bug/non-bug. In this paper, we investigate the feasibility and relevance of labeling issues with the domain of the APIs required to complete the tasks. We leverage the issues‚Äô description and the project history to build prediction models, which resulted in precision up to 82% and recall up to 97.8%. We also ran a user study (n=74) to assess these labels‚Äô relevancy to potential contributors. The results show that the labels were useful to participants in choosing tasks, and the API-domain labels were selected more often than the existing architecture-based labels. Our results can inspire the creation of tools to automatically label issues, helping developers to find tasks that better match their skills.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-8710-5",
      "DOI": "10.1109/MSR52588.2021.00047",
      "Funding Information": "National Science Foundation; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9463078",
      "Author Keywords": "API identification;Labelling;Tagging;Skills;Multi-Label Classification;Mining Software Repositories;Case Study",
      "IEEE Terms": "Industries;Tools;Predictive models;Prediction algorithms;Data models;Labeling;History",
      "Mesh_Terms": "",
      "Article Citation Count": 8,
      "Patent Citation Count": null,
      "Reference Count": 63,
      "License": "IEEE",
      "Online Date": "28-Jun-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Challenges in Migrating Imperative Deep Learning Programs to Graph Execution: An Empirical Study",
      "Authors": "T. C. V√©lez; R. Khatchadourian; M. Bagherzadeh; A. Raja",
      "Author Affiliations": "City University of New York (CUNY) Graduate Center, New York, NY, USA; City University of New York (CUNY) Hunter College, New York, NY, USA; Oakland University, Rochester, MI, USA; City University of New York (CUNY) Hunter College, New York, NY, USA",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 469,
      "End Page": 481,
      "Abstract": "Efficiency is essential to support responsiveness w.r.t. ever-growing datasets, especially for Deep Learning (DL) systems. DL frameworks have traditionally embraced deferred execution-style DL code that supports symbolic, graph-based Deep Neural Network (DNN) computation. While scalable, such development tends to produce DL code that is error-prone, non-intuitive, and difficult to debug. Consequently, more natural, less error-prone imperative DL frameworks encouraging eager execution have emerged at the expense of run-time performance. While hybrid approaches aim for the ‚Äúbest of both worlds,‚Äù the challenges in applying them in the real world are largely unknown. We conduct a data-driven analysis of challenges-and resultant bugs-involved in writing reliable yet performant imperative DL code by studying 250 open-source projects, consisting of 19.7 MLOC, along with 470 and 446 manually examined code patches and bug reports, respectively. The results indicate that hybridization: (i) is prone to API misuse, (ii) can result in performance degradation-the opposite of its intention, and (iii) has limited application due to execution mode incompatibility. We put forth several recommendations, best practices, and anti-patterns for effectively hybridizing imperative DL code, potentially benefiting DL practitioners, API designers, tool developers, and educators.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3528455",
      "Funding Information": "City University of New York; ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796227",
      "Author Keywords": "empirical studies;deep learning;imperative programs;hybrid programming paradigms;graph-based execution;software evolution",
      "IEEE Terms": "Deep learning;Codes;Neural networks;Computer bugs;Writing;Reliability;Data mining",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 103,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Beyond Duplicates: Towards Understanding and Predicting Link Types in Issue Tracking Systems",
      "Authors": "C. M. L√ºders; A. Bouraffa; W. Maalej",
      "Author Affiliations": "University of Hamburg, Hamburg, Germany; University of Hamburg, Hamburg, Germany; University of Hamburg, Hamburg, Germany",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 48,
      "End Page": 60,
      "Abstract": "Software projects use Issue Tracking Systems (ITS) like JIRA to track issues and organize the workflows around them. Issues are often inter-connected via different links such as the default JIRA link types Duplicate, Relate, Block, or Subtask. While previous research has mostly focused on analyzing and predicting duplication links, this work aims at understanding the various other link types, their prevalence, and characteristics towards a more reliable link type prediction. For this, we studied 607,208 links connecting 698,790 issues in 15 public JIRA repositories. Besides the default types, the custom types Depend, Incorporate, Split, and Cause were also common. We manually grouped all 75 link types used in the repositories into five general categories: General Relation, Duplication, Composition, Temporal/Causal, and Workflow. Comparing the structures of the corresponding graphs, we observed several trends. For instance, Duplication links tend to represent simpler issue graphs often with two components and Composition links present the highest amount of hierarchical tree structures (97.7%). Surprisingly, General Relation links have a significantly higher transitivity score than Duplication and Temporal/ Causal links. Motivated by the differences between the link types and by their popularity, we evaluated the robustness of two state-of-the-art duplicate detection approaches from the literature on the JIRA dataset. We found that current deep-learning approaches confuse between Duplication and other links in almost all repositories. On average, the classification accuracy dropped by 6% for one approach and 12% for the other. Extending the training sets with other link types seems to partly solve this issue. We discuss our findings and their implications for research and practice.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3528457",
      "Funding Information": "European Union(grant numbers:732463); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796252",
      "Author Keywords": "Issue Management;Issue Tracking System;Duplicate Detection;Link Type Detection;Dependency Management",
      "IEEE Terms": "Training;Analytical models;Uncertainty;Semantics;Training data;Organizations;Predictive models",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 42,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Cold-Start Software Analytics",
      "Authors": "J. Guo; M. Rahimi; J. Cleland-Huang; A. Rasin; J. H. Hayes; M. Vierhauser",
      "Author Affiliations": "School of Computing, DePaul University, Chicago, IL, USA; School of Computing, DePaul University, Chicago, IL, USA; School of Computing, DePaul University, Chicago, IL, USA; School of Computing, DePaul University, Chicago, IL, USA; Computer Science Department, University of Kentucky, USA; CDL MEVSS, Johannes Kepler University, Linz, Austria",
      "Publication Title": "2016 IEEE/ACM 13th Working Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "26-Jan-17",
      "Publication Year": 2016,
      "Volume": null,
      "Issue": null,
      "Start Page": 142,
      "End Page": 153,
      "Abstract": "Software project artifacts such as source code, requirements, and change logs represent a gold-mine of actionable information. As a result, software analytic solutions have been developed to mine repositories and answer questions such as \"who is the expert?,'' \"which classes are fault prone?,'' or even \"who are the domain experts for these fault-prone classes?'' Analytics often require training and configuring in order to maximize performance within the context of each project. A cold-start problem exists when a function is applied within a project context without first configuring the analytic functions on project-specific data. This scenario exists because of the non-trivial effort necessary to instrument a project environment with candidate tools and algorithms and to empirically evaluate alternate configurations. We address the cold-start problem by comparatively evaluating 'best-of-breed' and 'profile-driven' solutions, both of which reuse known configurations in new project contexts. We describe and evaluate our approach against 20 project datasets for the three analytic areas of artifact connectivity, fault-prediction, and finding the expert, and show that the best-of-breed approach outperformed the profile-driven approach in all three areas; however, while it delivered acceptable results for artifact connectivity and find the expert, both techniques underperformed for cold-start fault prediction.",
      "ISSN": "",
      "ISBNs": "978-1-4503-4186-8",
      "DOI": "",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7832895",
      "Author Keywords": "Cold-start;Software Analytics;Configuration",
      "IEEE Terms": "Software;Measurement;Predictive models;Analytical models;Context;Training;Software engineering",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 51,
      "License": "",
      "Online Date": "26-Jan-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "On Improving Deep Learning Trace Analysis with System Call Arguments",
      "Authors": "Q. Fournier; D. Aloise; S. V. Azhari; F. Tetreault",
      "Author Affiliations": "Polytechnique Montr√©al, Quebec; Polytechnique Montr√©al, Quebec; Ciena, Ottawa; Ciena, Ottawa",
      "Publication Title": "2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "28-Jun-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 120,
      "End Page": 130,
      "Abstract": "Kernel traces are sequences of low-level events comprising a name and multiple arguments, including a timestamp, a process id, and a return value, depending on the event. Their analysis helps uncover intrusions, identify bugs, and find latency causes. However, their effectiveness is hindered by omitting the event arguments. To remedy this limitation, we introduce a general approach to learning a representation of the event names along with their arguments using both embedding and encoding. The proposed method is readily applicable to most neural networks and is task-agnostic. The benefit is quantified by conducting an ablation study on three groups of arguments: call-related, process-related, and time-related. Experiments were conducted on a novel web request dataset and validated on a second dataset collected on pre-production servers by Ciena, our partnering company. By leveraging additional information, we were able to increase the performance of two widely-used neural networks, an LSTM and a Transformer, by up to 11.3% on two unsupervised language modelling tasks. Such tasks may be used to detect anomalies, pre-train neural networks to improve their performance, and extract a contextual representation of the events.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-8710-5",
      "DOI": "10.1109/MSR52588.2021.00025",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9463093",
      "Author Keywords": "Tracing;Machine Learning;Deep Learning",
      "IEEE Terms": "Deep learning;Neural networks;Computer bugs;Companies;Software;Encoding;Servers",
      "Mesh_Terms": "",
      "Article Citation Count": 5,
      "Patent Citation Count": null,
      "Reference Count": 31,
      "License": "IEEE",
      "Online Date": "28-Jun-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Noisy Label Learning for Security Defects",
      "Authors": "R. Croft; M. A. Babar; H. Chen",
      "Author Affiliations": "CREST - The Centre for Research on Engineering Software Technologies, The University of Adelaide Cyber Security Cooperative Research Centre, Adelaide, Australia; CREST - The Centre for Research on Engineering Software Technologies, The University of Adelaide Cyber Security Cooperative Research Centre, Adelaide, Australia; CREST - The Centre for Research on Engineering Software Technologies, The University of Adelaide Cyber Security Cooperative Research Centre, Adelaide, Australia",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 435,
      "End Page": 447,
      "Abstract": "Data-driven software engineering processes, such as vulnerability prediction heavily rely on the quality of the data used. In this paper, we observe that it is infeasible to obtain a noise-free security defect dataset in practice. Despite the vulnerable class, the non-vulnerable modules are difficult to be verified and determined as truly exploit free given the limited manual efforts available. It results in uncertainty, introduces labeling noise in the datasets and affects conclusion validity. To address this issue, we propose novel learning methods that are robust to label impurities and can leverage the most from limited label data; noisy label learning. We investigate various noisy label learning methods applied to soft-ware vulnerability prediction. Specifically, we propose a two-stage learning method based on noise cleaning to identify and remediate the noisy samples, which improves AUC and recall of baselines by up to 8.9% and 23.4%, respectively. Moreover, we discuss several hurdles in terms of achieving a performance upper bound with semi-omniscient knowledge of the label noise. Overall, the experimental results show that learning from noisy labels can be effective for data-driven software and security analytics.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3528446",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796240",
      "Author Keywords": "machine learning;noisy label learning;software vulnerabilities",
      "IEEE Terms": "Learning systems;Upper bound;Uncertainty;Manuals;Predictive models;Software;Noise measurement",
      "Mesh_Terms": "",
      "Article Citation Count": 4,
      "Patent Citation Count": null,
      "Reference Count": 76,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Analyzing Requirements and Traceability Information to Improve Bug Localization",
      "Authors": "M. Rath; D. Lo; P. M√§der",
      "Author Affiliations": "Technische Universitat Ilmenau, Ilmenau, Germany; Singapore Management University, Singapore; Technische Universitat Ilmenau, Ilmenau, Germany",
      "Publication Title": "2018 IEEE/ACM 15th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "30-Dec-18",
      "Publication Year": 2018,
      "Volume": null,
      "Issue": null,
      "Start Page": 442,
      "End Page": 453,
      "Abstract": "Locating bugs in industry-size software systems is time consuming and challenging. An automated approach for assisting the process of tracing from bug descriptions to relevant source code benefits developers. A large body of previous work aims to address this problem and demonstrates considerable achievements. Most existing approaches focus on the key challenge of improving techniques based on textual similarity to identify relevant files. However, there exists a lexical gap between the natural language used to formulate bug reports and the formal source code and its comments. To bridge this gap, state-of-the-art approaches contain a component for analyzing bug history information to increase retrieval performance. In this paper, we propose a novel approach TraceScore that also utilizes projects' requirements information and explicit dependency trace links to further close the gap in order to relate a new bug report to defective source code files. Our evaluation on more than 13,000 bug reports shows, that TraceScore significantly outperforms two state-of-the-art methods. Further, by integrating TraceScore into an existing bug localization algorithm, we found that TraceScore significantly improves retrieval performance by 49% in terms of mean average precision (MAP).",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-5716-6",
      "DOI": "",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8595228",
      "Author Keywords": "Requirements Traceability;Bug Localization;Software Maintenance;Traceability Recovery;Version History;Machine Learning",
      "IEEE Terms": "Computer bugs;History;Software systems;Data mining;Natural languages;Bridges",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 61,
      "License": "",
      "Online Date": "30-Dec-18",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Leveraging Models to Reduce Test Cases in Software Repositories",
      "Authors": "G. Gharachorlu; N. Sumner",
      "Author Affiliations": "Simon Fraser University, Canada; Simon Fraser University, Canada",
      "Publication Title": "2021 IEEE/ACM 18th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "28-Jun-21",
      "Publication Year": 2021,
      "Volume": null,
      "Issue": null,
      "Start Page": 230,
      "End Page": 241,
      "Abstract": "Given a failing test case, test case reduction yields a smaller test case that reproduces the failure. This process can be time consuming due to repeated trial and error with smaller test cases. Current techniques speed up reduction by only exploring syntactically valid candidates, but they still spend significant effort on semantically invalid candidates. In this paper, we propose a model-guided approach to speed up test case reduction. The approach trains a model of semantic properties driven by syntactic test case properties. By using this model, we can skip testing even syntactically valid test case candidates that are unlikely to succeed. We evaluate this model-guided reduction on a suite of 14 large fuzzer-generated C test cases from the bug repositories of two well-known C compilers, GCC and Clang. Our results show that with an average precision of 77%, we can decrease the number of removal trials by 14% to 61%. We observe a 30% geomean improvement in reduction time over the state of the art technique while preserving similar reduction power.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-8710-5",
      "DOI": "10.1109/MSR52588.2021.00035",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9463100",
      "Author Keywords": "test case reduction;semantic validity;machine learning;compilation errors",
      "IEEE Terms": "Computer bugs;Semantics;Syntactics;Predictive models;Feature extraction;Software;Data mining",
      "Mesh_Terms": "",
      "Article Citation Count": 2,
      "Patent Citation Count": null,
      "Reference Count": 29,
      "License": "IEEE",
      "Online Date": "28-Jun-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Evaluating the effectiveness of local explanation methods on source code-based defect prediction models",
      "Authors": "Y. Gao; Y. Zhu; Q. Yu",
      "Author Affiliations": "School of Computer Science Jiangsu Normal University, Xuzhou, Jiangsu, China; School of Computer Science Jiangsu Normal University, Xuzhou, Jiangsu, China; School of Computer Science Jiangsu Normal University, Xuzhou, Jiangsu, China",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 640,
      "End Page": 645,
      "Abstract": "Interpretation has been considered as one of key factors for applying defect prediction in practice. As one way for interpretation, local explanation methods has been widely used for certain predictions on datasets of traditional features. There are also attempts to use local explanation methods on source code-based defect prediction models, but unfortunately, it will get poor results. Since it is unclear how effective those local explanation methods are, we evaluate such methods with automatic metrics which focus on local faithfulness and explanation precision. Based on the results of experiments, we find that the effectiveness of local explanation methods depends on the adopted defect prediction models. They are effective on token frequency-based models, while they may not be effective enough to explain all predictions of deep learning-based models. Besides, we also find that the hyperparameter of local explanation methods should be carefully optimized to get more precise and meaningful explanation.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3528472",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:62077029); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796250",
      "Author Keywords": "Software Defect Prediction;Local Explanation;Explainable Machine Learning;LIME",
      "IEEE Terms": "Measurement;Codes;Predictive models;Software;Data mining",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 31,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Predicting Consistency-Maintenance Requirement of Code Clonesat Copy-and-Paste Time",
      "Authors": "X. Wang; Y. Dang; L. Zhang; D. Zhang; E. Lan; H. Mei",
      "Author Affiliations": "Key Laboratory of High Confidence Software Technologies, Peking University, Ministry of Education, and with the Department of Computer Science, University of Texas, San Antonio; Microsoft Research Asia, Beijing, China; Microsoft Research Asia, Beijing, China; Microsoft Research Asia, Beijing, China; Microsoft Corporation, One Microsoft Way, Redmond, WA; Key Laboratory of High Confidence Software Technologies, Peking University, Ministry of Education, and with the Department of Computer Science, University of Texas, San Antonio",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "8-Aug-14",
      "Publication Year": 2014,
      "Volume": 40,
      "Issue": 8,
      "Start Page": 773,
      "End Page": 794,
      "Abstract": "Code clones have always been a double edged sword in software development. On one hand, it is a very convenient way to reuse existing code, and to save coding effort. On the other hand, since developers may need to ensure consistency among cloned code segments, code clones can lead to extra maintenance effort and even bugs. Recently studies on the evolution of code clones show that only some of the code clones experience consistent changes during their evolution history. Therefore, if we can accurately predict whether a code clone will experience consistent changes, we will be able to provide useful recommendations to developers onleveraging the convenience of some code cloning operations, while avoiding other code cloning operations to reduce future consistency maintenance effort. In this paper, we define a code cloning operation as consistency-maintenance-required if its generated code clones experience consistent changes in the software evolution history, and we propose a novel approach that automatically predicts whether a code cloning operation requires consistency maintenance at the time point of performing copy-and-paste operations. Our insight is that whether a code cloning operation requires consistency maintenance may relate to the characteristics of the code to be cloned and the characteristics of its context. Based on a number of attributes extracted from the cloned code and the context of the code cloning operation, we use Bayesian Networks, a machine-learning technique, to predict whether an intended code cloning operation requires consistency maintenance. We evaluated our approach on four subjects-two large-scale Microsoft software projects, and two popular open-source software projects-under two usage scenarios: 1) recommend developers to perform only the cloning operations predicted to be very likely to be consistency-maintenance-free, and 2) recommend developers to perform all cloning operations unless they are predicted very likely to be consistency-maintenance-required. In the first scenario, our approach is able to recommend developers to perform more than 50 percent cloning operations with a precision of at least 94 percent in the four subjects. In the second scenario, our approach is able to avoid 37 to 72 percent consistency-maintenance-required code clones by warning developers on only 13 to 40 percent code clones, in the four subjects.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2014.2323972",
      "Funding Information": "National 863 Program(grant numbers:2013AA01A605); National 973 Program(grant numbers:2011CB302604); Science Fund for Creative Research Groups(grant numbers:61121063); Natural Science Foundation(grant numbers:91118004,61228203,61225007); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6815760",
      "Author Keywords": "Code cloning;consistency maintenance;programming aid",
      "IEEE Terms": "Cloning;Software;Maintenance engineering;Bayes methods;History;Training;Educational institutions",
      "Mesh_Terms": "",
      "Article Citation Count": 21,
      "Patent Citation Count": null,
      "Reference Count": 46,
      "License": "IEEE",
      "Online Date": "14-May-14",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Enhancement of Mutation Testing via Fuzzy Clustering and Multi-Population Genetic Algorithm",
      "Authors": "X. Dang; D. Gong; X. Yao; T. Tian; H. Liu",
      "Author Affiliations": "School of Information and Control Engineering, China University of Mining and Technology, Xuzhou, China; School of Information and Control Engineering, China University of Mining and Technology, Xuzhou, China; School of Mathematics, China University of Mining and Technology, Xuzhou, China; School of Computer Science and Technology, Shandong Jianzhu University, Jinan, China; Department of Computer Science and Software Engineering, Swinburne University of Technology, Hawthorn, VIC, Australia",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "14-Jun-22",
      "Publication Year": 2022,
      "Volume": 48,
      "Issue": 6,
      "Start Page": 2141,
      "End Page": 2156,
      "Abstract": "Mutation testing, a fundamental software testing technique, which is a typical way to evaluate the adequacy of a test suite. In mutation testing, a set of mutants are generated by seeding the different classes of faults into a program under test. Test data shall be generated in the way that as many mutants can be killed as possible. Thanks to numerous tools to implement mutation testing for different languages, a huge amount of mutants are normally generated even for small-sized programs. However, a large number of mutants not only leads to a high cost of mutation testing, but also make the corresponding test data generation a non-trivial task. In this paper, we make use of intelligent technologies to improve the effectiveness and efficiency of mutation testing from two perspectives. A machine learning technique, namely fuzzy clustering, is applied to categorize mutants into different clusters. Then, a multi-population genetic algorithm via individual sharing is employed to generate test data for killing the mutants in different clusters in parallel when the problem of test data generation as an optimization one. A comprehensive framework, termed as $\\mathbf {FUZGENMUT}$FUZGENMUT, is thus developed to implement the proposed techniques. The experiments based on nine programs of various sizes show that fuzzy clustering can help to reduce the cost of mutation testing effectively, and that the multi-population genetic algorithm improves the efficiency of test data generation while delivering the high mutant-killing capability. The results clearly indicate that the huge potential of using intelligent technologies to enhance the efficacy and thus the practicality of mutation testing.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2021.3052987",
      "Funding Information": "National Key Research and Development Program of China(grant numbers:2018YFB1003802-01); National Natural Science Foundation of China(grant numbers:61773384,61573362,61503220); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9328619",
      "Author Keywords": "Mutation testing;fuzzy clustering;mutation clustering;test data generation;multi-population genetic algorithm (MGA)",
      "IEEE Terms": "Testing;Genetic algorithms;Sorting;Clustering algorithms;Syntactics;Statistics;Sociology",
      "Mesh_Terms": "",
      "Article Citation Count": 9,
      "Patent Citation Count": null,
      "Reference Count": 60,
      "License": "IEEE",
      "Online Date": "19-Jan-21",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "A Procedure to Continuously Evaluate Predictive Performance of Just-In-Time Software Defect Prediction Models During Software Development",
      "Authors": "L. Song; L. L. Minku",
      "Author Affiliations": "Research Institute of Trustworthy Autonomous Systems, Southern University of Science and Technology, Shenzhen, Guangdong, China; School of Computer Science, University of Birmingham, Birmingham, U.K.",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "14-Feb-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 2,
      "Start Page": 646,
      "End Page": 666,
      "Abstract": "Just-In-Time Software Defect Prediction (JIT-SDP) uses machine learning to predict whether software changes are defect-inducing or clean. When adopting JIT-SDP, changes in the underlying defect generating process may significantly affect the predictive performance of JIT-SDP models over time. Therefore, being able to continuously track the predictive performance of JIT-SDP models during the software development process is of utmost importance for software companies to decide whether or not to trust the predictions provided by such models over time. However, there has been little discussion on how to continuously evaluate predictive performance in practice, and such evaluation is not straightforward. In particular, labeled software changes that can be used for evaluation arrive over time with a delay, which in part corresponds to the time we have to wait to label software changes as ‚Äòclean‚Äô (waiting time). A clean label assigned based on a given waiting time may not correspond to the true label of the software changes. This can potentially hinder the validity of any continuous predictive performance evaluation procedure for JIT-SDP models. This paper provides the first discussion of how to continuously evaluate predictive performance of JIT-SDP models over time during the software development process, and the first investigation of whether and to what extent waiting time affects the validity of such continuous performance evaluation procedure in JIT-SDP. Based on 13 GitHub projects, we found that waiting time had a significant impact on the validity. Though typically small, the differences in estimated predicted performance were sometimes large, and thus inappropriate choices of waiting time can lead to misleading estimations of predictive performance over time. Such impact did not normally change the ranking between JIT-SDP models, and thus conclusions in terms of which JIT-SDP model performs better are likely reliable independent of the choice of waiting time, especially when considered across projects.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2022.3158831",
      "Funding Information": "National Natural Science Foundation of China(grant numbers:62002148); Engineering and Physical Sciences Research Council(grant numbers:EP/R006660/2); Guangdong Provincial Key Laboratory(grant numbers:2020B121201001); Program for Guangdong Introducing Innovative and Enterpreneurial Teams(grant numbers:2017ZT07X386); Shenzhen Science and Technology Program(grant numbers:KQTD2016112514355531); Research Institute of Trustworthy Autonomous Systems; Southern University of Science and Technology(grant numbers:518055); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9735354",
      "Author Keywords": "Just-in-time software defect prediction;performance evaluation procedure;concept drift;data stream learning;online learning;verification latency;and label noise",
      "IEEE Terms": "Software;Performance evaluation;Predictive models;Training;Estimation;Software reliability;Delays",
      "Mesh_Terms": "",
      "Article Citation Count": 3,
      "Patent Citation Count": null,
      "Reference Count": 39,
      "License": "IEEE",
      "Online Date": "15-Mar-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "DeLag: Using Multi-Objective Optimization to Enhance the Detection of Latency Degradation Patterns in Service-Based Systems",
      "Authors": "L. Traini; V. Cortellessa",
      "Author Affiliations": "Department of Information Engineering, Computer Science and Mathematics, University of L'Aquila, L'Aquila, Italy; Department of Information Engineering, Computer Science and Mathematics, University of L'Aquila, L'Aquila, Italy",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "13-Jun-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 6,
      "Start Page": 3554,
      "End Page": 3580,
      "Abstract": "Performance debugging in production is a fundamental activity in modern service-based systems. The diagnosis of performance issues is often time-consuming, since it requires thorough inspection of large volumes of traces and performance indices. In this paper we present DeLag, a novel automated search-based approach for diagnosing performance issues in service-based systems. DeLag identifies subsets of requests that show, in the combination of their Remote Procedure Call execution times, symptoms of potentially relevant performance issues. We call such symptoms Latency Degradation Patterns. DeLag simultaneously searches for multiple latency degradation patterns while optimizing precision, recall and latency dissimilarity. Experimentation on 700 datasets of requests generated from two microservice-based systems shows that our approach provides better and more stable effectiveness than three state-of-the-art approaches and general purpose machine learning clustering algorithms. DeLag is more effective than all baseline techniques in at least one case study (with $p\\leq 0.05$p‚â§0.05 and non-negligible effect size). Moreover, DeLag outperforms in terms of efficiency the second and the third most effective baseline techniques on the largest datasets used in our evaluation (up to 22%).",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3266041",
      "Funding Information": "Fondo Territori Lavoro e Conoscenza CGIL, CSIL and UIL; European Union; Piano Nazionale di Ripresa e Resilienza(grant numbers:3264 del 28/12/2021); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10098585",
      "Author Keywords": "AIOps;anomaly correlation;automated diagnosis;microservices;Performance issues",
      "IEEE Terms": "Degradation;Software;Microservice architectures;Optimization;Testing;Search problems;Genetic algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 77,
      "License": "CCBY",
      "Online Date": "10-Apr-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "DexBERT: Effective, Task-Agnostic and Fine-Grained Representation Learning of Android Bytecode",
      "Authors": "T. Sun; K. Allix; K. Kim; X. Zhou; D. Kim; D. Lo; T. F. Bissyand√©; J. Klein",
      "Author Affiliations": "University of Luxembourg, Kirchberg, Luxembourg; University of Luxembourg, Kirchberg, Luxembourg; Singapore Management University, Singapore; Singapore Management University, Singapore; Kyungpook National University, Daegu, Republic of Korea; Singapore Management University, Singapore; University of Luxembourg, Kirchberg, Luxembourg; University of Luxembourg, Kirchberg, Luxembourg",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "18-Oct-23",
      "Publication Year": 2023,
      "Volume": 49,
      "Issue": 10,
      "Start Page": 4691,
      "End Page": 4706,
      "Abstract": "The automation of an increasingly large number of software engineering tasks is becoming possible thanks to Machine Learning (ML). One foundational building block in the application of ML to software artifacts is the representation of these artifacts (e.g., source code or executable code) into a form that is suitable for learning. Traditionally, researchers and practitioners have relied on manually selected features, based on expert knowledge, for the task at hand. Such knowledge is sometimes imprecise and generally incomplete. To overcome this limitation, many studies have leveraged representation learning, delegating to ML itself the job of automatically devising suitable representations and selections of the most relevant features. Yet, in the context of Android problems, existing models are either limited to coarse-grained whole-app level (e.g., apk2vec) or conducted for one specific downstream task (e.g., smali2vec). Thus, the produced representation may turn out to be unsuitable for fine-grained tasks or cannot generalize beyond the task that they have been trained on. Our work is part of a new line of research that investigates effective, task-agnostic, and fine-grained universal representations of bytecode to mitigate both of these two limitations. Such representations aim to capture information relevant to various low-level downstream tasks (e.g., at the class-level). We are inspired by the field of Natural Language Processing, where the problem of universal representation was addressed by building Universal Language Models, such as BERT, whose goal is to capture abstract semantic information about sentences, in a way that is reusable for a variety of tasks. We propose DexBERT, a BERT-like Language Model dedicated to representing chunks of DEX bytecode, the main binary format used in Android applications. We empirically assess whether DexBERT is able to model the DEX language and evaluate the suitability of our model in three distinct class-level software engineering tasks: Malicious Code Localization, Defect Prediction, and Component Type Classification. We also experiment with strategies to deal with the problem of catering to apps having vastly different sizes, and we demonstrate one example of using our technique to investigate what information is relevant to a given task.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3310874",
      "Funding Information": "Fonds National de la Recherche (FNR), Luxembourg(grant numbers:REPROCESS C21/IS/16344458); National Research Foundation of Korea (NRF); Korea government (MSIT)(grant numbers:2021R1A5A1021944,2021R1I1A3048013); National Cybersecurity Research and Development Programme(grant numbers:NCRP25-P03-NCR-TAU); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10237047",
      "Author Keywords": "Representation learning;Android app analysis;code representation;malicious code localization;defect prediction",
      "IEEE Terms": "Task analysis;Malware;Predictive models;Codes;Location awareness;Operating systems;Software engineering",
      "Mesh_Terms": "",
      "Article Citation Count": 1,
      "Patent Citation Count": null,
      "Reference Count": 93,
      "License": "CCBY",
      "Online Date": "1-Sep-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "Range Specification Bug Detection in Flight Control System Through Fuzzing",
      "Authors": "R. Han; S. Ma; J. Li; S. Nepal; D. Lo; Z. Ma; J. Ma",
      "Author Affiliations": "School of Cyber Engineering, Xidian University, Xi‚Äôan, China; School of Engineering and Information System, University of New South Wales, Sydney, NSW, Australia; Zhiyuan College, Shanghai Jiao Tong University, Shanghai, China; Commonwealth Scientific and Industrial Research, Sydney, NSW, Australia; School of Computing and Information Systems, Singapore Management University, Singapore; School of Cyber Engineering, Xidian University, Xi‚Äôan, China; School of Cyber Engineering, Xidian University, Xi‚Äôan, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "18-Mar-24",
      "Publication Year": 2024,
      "Volume": 50,
      "Issue": 3,
      "Start Page": 461,
      "End Page": 473,
      "Abstract": "Developers and manufacturers provide configurable control parameters for flight control programs to support various environments and missions, along with suggested ranges for these parameters to ensure flight safety. However, this flexible mechanism can also introduce a vulnerability known as range specification bugs. The vulnerability originates from the evidence that certain combinations of parameter values may affect the drone's physical stability even though its parameters are within the suggested range. The paper introduces a novel system called icsearcher, designed to identify incorrect configurations or unreasonable combinations of parameters and suggest more reasonable ranges for these parameters. icsearcher applies a metaheuristic search algorithm to find configurations with a high probability of driving the drone into unstable states. In particular, icsearcher adopts a machine learning-based predictor to assist the searcher in evaluating the fitness of configuration. Finally, leveraging searched incorrect configurations, icsearcher can summarize the feasible ranges through multi-objective optimization. icsearcher applies a predictor to guide the search, which eliminates the need for realistic/simulation executions when evaluating configurations and further promotes search efficiency. We have carried out experimental evaluations of icsearcher in different control programs. The evaluation results show that the system successfully reports potentially incorrect configurations, of which over $94\\%$94% leads to unstable states.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2024.3354739",
      "Funding Information": "National Natural Science Foundation of China (Key Program)(grant numbers:62232013); Major Research Plan of the National Natural Science Foundation of China(grant numbers:92267204,92167203); National Natural Science Foundation of China(grant numbers:62302363); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10401946",
      "Author Keywords": "Drone security;configuration test;range specification bug;deep learning approximation",
      "IEEE Terms": "Drones;Aerospace control;Trajectory;Computer bugs;Fuzzing;Actuators;Codes",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 37,
      "License": "IEEE",
      "Online Date": "17-Jan-24",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "FA-Fuzz: A Novel Scheduling Scheme Using Firefly Algorithm for Mutation-Based Fuzzing",
      "Authors": "Z. Gao; H. Xiong; W. Dong; R. Chang; R. Yang; Y. Zhou; L. Jiang",
      "Author Affiliations": "State Key Laboratory of Mathematical Engineering and Advanced Computing, Zhengzhou, China; Zhejiang University, Hangzhou, China; State Key Laboratory of Mathematical Engineering and Advanced Computing, Zhengzhou, China; Zhejiang University, Hangzhou, China; Ant Group, Hangzhou, China; Zhejiang University, Hangzhou, China; State Key Laboratory of Mathematical Engineering and Advanced Computing, Zhengzhou, China",
      "Publication Title": "IEEE Transactions on Software Engineering",
      "Date Added To Xplore": "8-Jan-24",
      "Publication Year": 2024,
      "Volume": 50,
      "Issue": 1,
      "Start Page": 1,
      "End Page": 15,
      "Abstract": "Mutation-based fuzzing has been widely used in both academia and industry. Recently, researchers observe that the mutation scheduling scheme affects the efficiency of fuzzing. Accordingly, they propose PSO algorithm or machine learning-based technique to optimize the scheduling process. However, these methods fail to consider the fact that the optimal operator distribution of different seeds is different, even for the same program. In this paper, we propose a novel general scheduling scheme, named FA-fuzz, to find the optimal selecting probability distribution of mutation operators, which is based on the observations that the effective mutation operators are different for different seeds. Specifically, our method is based on the firefly algorithm. The positions of fireflies are mapped to the selection probability distribution of different mutation operators. The brightness of fireflies is expressed as the efficiency of discovering unique testcases. We implement prototype systems on multiple state-of-art fuzzers, and perform evaluations on two datasets. Our proposed method improves both the number of unique paths and unique bugs on real-world datasets. In addition, we discover 30 zero-day vulnerabilities in eight real-world programs, which demonstrate the effectiveness of FA-fuzz.",
      "ISSN": "1939-3520",
      "ISBNs": "",
      "DOI": "10.1109/TSE.2023.3326144",
      "Funding Information": "Key R&D Program of Zhejiang Province(grant numbers:2022C01165); Key R&D Special Program of Henan Province(grant numbers:221111210300); ",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10305545",
      "Author Keywords": "Mutation-based fuzzing;firefly algorithm",
      "IEEE Terms": "Fuzzing;Probability distribution;Optimization;Software algorithms;Job shop scheduling;Computer bugs;Research and development",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 59,
      "License": "IEEE",
      "Online Date": "2-Nov-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Journals"
    },
    {
      "Document Title": "LineVD: Statement-level Vulnerability Detection using Graph Neural Networks",
      "Authors": "D. Hin; A. Kan; H. Chen; M. A. Babar",
      "Author Affiliations": "CREST - The Centre for Research on Engineering Software Technologies, University of Adelaide Cyber Security Cooperative Research Centre, Adelaide, Australia; AWS AI Labs*, Adelaide, SA, Australia; CREST - The Centre for Research on Engineering Software Technologies, University of Adelaide Cyber Security Cooperative Research Centre, Adelaide, Australia; CREST - The Centre for Research on Engineering Software Technologies, University of Adelaide Cyber Security Cooperative Research Centre, Adelaide, Australia",
      "Publication Title": "2022 IEEE/ACM 19th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "21-Jun-22",
      "Publication Year": 2022,
      "Volume": null,
      "Issue": null,
      "Start Page": 596,
      "End Page": 607,
      "Abstract": "Current machine-learning based software vulnerability detection methods are primarily conducted at the function-level. However, a key limitation of these methods is that they do not indicate the specific lines of code contributing to vulnerabilities. This limits the ability of developers to efficiently inspect and interpret the predictions from a learnt model, which is crucial for integrating machine-learning based tools into the software development work-flow. Graph-based models have shown promising performance in function-level vulnerability detection, but their capability for statement-level vulnerability detection has not been extensively explored. While interpreting function-level predictions through explainable AI is one promising direction, we herein consider the statement-level software vulnerability detection task from a fully supervised learning perspective. We propose a novel deep learning framework, LineVD, which formulates statement-level vulnerability detection as a node classification task. LineVD leverages control and data dependencies between statements using graph neural networks, and a transformer-based model to encode the raw source code tokens. In particular, by addressing the conflicting outputs between function-level and statement-level information, LineVD significantly improve the prediction performance without vulnerability status for function code. We have conducted extensive experi-ments against a large-scale collection of real-world C/C++ vulnerabilities obtained from multiple real-world projects, and demonstrate an increase of 105% in F1-score over the current state-of-the-art.",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-4503-9303-4",
      "DOI": "10.1145/3524842.3527949",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9796269",
      "Author Keywords": "Software Vulnerability Detection;Program Representation;Deep Learning",
      "IEEE Terms": "Deep learning;Training;Codes;Supervised learning;Predictive models;Transformers;Feature extraction",
      "Mesh_Terms": "",
      "Article Citation Count": 20,
      "Patent Citation Count": null,
      "Reference Count": 62,
      "License": "",
      "Online Date": "21-Jun-22",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Revisiting and Improving SZZ Implementations",
      "Authors": "E. C. Neto; D. A. d. Costa; U. Kulesza",
      "Author Affiliations": "Federal Institute of Education, Science and Technology of Rio Grande do Norte, Natal, Brazil; Department of Information Science, University of Otago, Dunedin, New Zealand; Dept. of Informatics and Applied Maths, Federal University of Rio Grande do Norte, Natal, Brazil",
      "Publication Title": "2019 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
      "Date Added To Xplore": "17-Oct-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 1,
      "End Page": 12,
      "Abstract": "Background: The SZZ algorithm was proposed to identify bug-introducing changes, i.e., changes that are likely to induce bugs. Previous studies improved its implementation and evaluated its results.Aims: To address existing limitations of SZZ to improve the maturity of the algorithm. We also aim to verify if the improvements that have been proposed to the SZZ algorithm also hold in different datasets.Method: We re-evaluate two recent SZZ implementations using an adaptation of the Defects4J dataset, which works as a preprocessed dataset that can be used by SZZ. Furthermore, we revisit the limitations of RA-SZZ (refactoring aware SZZ) to improve the precision and recall of the algorithm.Results: We observe that a median of 44% of the lines that are flagged by the improved SZZ are very likely to introduce a bug. We manually analyze the SZZ-generated data and observe that there exist refactoring operations (31.17%) and equivalent changes (13.64%) that are still misidentified by the improved SZZ.Conclusion: By preprocessing the dataset that is used as input by SZZ, the accuracy of SZZ may be considerably improved. For example, we observe that SZZ implementations are approximately 40% more accurate if only valid bug-fix lines are used as the input for SZZ.",
      "ISSN": "1949-3789",
      "ISBNs": "978-1-7281-2968-6",
      "DOI": "10.1109/ESEM.2019.8870178",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8870178",
      "Author Keywords": "SZZ algorithm;refactoring change;bug-introducing change;bug-fix change",
      "IEEE Terms": "Computer bugs;Tools;History;Bars;Machine learning algorithms;Prediction algorithms;Software algorithms",
      "Mesh_Terms": "",
      "Article Citation Count": 20,
      "Patent Citation Count": null,
      "Reference Count": 49,
      "License": "IEEE",
      "Online Date": "17-Oct-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Where Is the Road for Issue Reports Classification Based on Text Mining?",
      "Authors": "Q. Fan; Y. Yu; G. Yin; T. Wang; H. Wang",
      "Author Affiliations": "College of Computer, National University of Defence Technology, Changsha, China; College of Computer, National University of Defence Technology, Changsha, China; College of Computer, National University of Defence Technology, Changsha, China; College of Computer, National University of Defence Technology, Changsha, China; College of Computer, National University of Defence Technology, Changsha, China",
      "Publication Title": "2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
      "Date Added To Xplore": "11-Dec-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 121,
      "End Page": 130,
      "Abstract": "Currently, open source projects receive various kinds of issues daily, because of the extreme openness of Issue Tracking System (ITS) in GitHub. ITS is a labor-intensive and time-consuming task of issue categorization for project managers. However, a contributor is only required a short textual abstract to report an issue in GitHub. Thus, most traditional classification approaches based on detailed and structured data (e.g., priority, severity, software version and so on) are difficult to adopt. In this paper, issue classification approaches on a large-scale dataset, including 80 popular projects and over 252,000 issue reports collected from GitHub, were investigated. First, four traditional text-based classification methods and their performances were discussed. Semantic perplexity (i.e., an issues description confuses bug-related sentences with nonbug-related sentences) is a crucial factor that affects the classification performances based on quantitative and qualitative study. Finally, A two-stage classifier framework based on the novel metrics of semantic perplexity of issue reports was designed. Results show that our two-stage classification can significantly improve issue classification performances.",
      "ISSN": "",
      "ISBNs": "978-1-5090-4039-1",
      "DOI": "10.1109/ESEM.2017.19",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8170092",
      "Author Keywords": "issue tracking system;machine learning technique;mining software repositories",
      "IEEE Terms": "Computer bugs;Software;Data mining;Feature extraction;Semantics;Measurement",
      "Mesh_Terms": "",
      "Article Citation Count": 31,
      "Patent Citation Count": null,
      "Reference Count": 34,
      "License": "IEEE",
      "Online Date": "11-Dec-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "An Empirical Examination of the Relationship between Code Smells and Merge Conflicts",
      "Authors": "I. Ahmed; C. Brindescu; U. A. Mannan; C. Jensen; A. Sarma",
      "Author Affiliations": "School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, OR, USA; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, OR, USA; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, OR, USA; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, OR, USA; School of Electrical Engineering and Computer Science, Oregon State University, Corvallis, OR, USA",
      "Publication Title": "2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
      "Date Added To Xplore": "11-Dec-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 58,
      "End Page": 67,
      "Abstract": "Background: Merge conflicts are a common occurrence in software development. Researchers have shown the negative impact of conflicts on the resulting code quality and the development workflow. Thus far, no one has investigated the effect of bad design (code smells) on merge conflicts. Aims: We posit that entities that exhibit certain types of code smells are more likely to be involved in a merge conflict. We also postulate that code elements that are both \"smelly\" and involved in a merge conflict are associated with other undesirable effects (more likely to be buggy). Method: We mined 143 repositories from GitHub and recreated 6,979 merge conflicts to obtain metrics about code changes and conflicts. We categorized conflicts into semantic or non-semantic, based on whether changes affected the Abstract Syntax Tree. For each conflicting change, we calculate the number of code smells and the number of future bug-fixes associated with the affected lines of code. Results: We found that entities that are smelly are three times more likely to be involved in merge conflicts. Method-level code smells (Blob Operation and Internal Duplication) are highly correlated with semantic conflicts. We also found that code that is smelly and experiences merge conflicts is more likely to be buggy. Conclusion: Bad code design not only impacts maintainability, it also impacts the day to day operations of a project, such as merging contributions, and negatively impacts the quality of the resulting code. Our findings indicate that research is needed to identify better ways to support merge conflict resolution to minimize its effect on code quality.",
      "ISSN": "",
      "ISBNs": "978-1-5090-4039-1",
      "DOI": "10.1109/ESEM.2017.12",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8170085",
      "Author Keywords": "Code Smell;Merge Conflict;Empirical Analysis;Machine Learning",
      "IEEE Terms": "Software;Merging;Computer bugs;Tools;Software measurement;Semantics",
      "Mesh_Terms": "",
      "Article Citation Count": 26,
      "Patent Citation Count": null,
      "Reference Count": 68,
      "License": "IEEE",
      "Online Date": "11-Dec-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "What if I Had No Smells?",
      "Authors": "D. Falessi; B. Russo; K. Mullen",
      "Author Affiliations": "Dept. of Computer Science and Software Engineering, California Polytechnic State University, San Luis Obispo, CA, USA; Faculty of Computer Science, Free University of Bozen-Bolzano, Bolzano, Italy, USA; Keymind A Division of Axiom Resource Management, Inc. Falls Church, VA, USA",
      "Publication Title": "2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
      "Date Added To Xplore": "11-Dec-17",
      "Publication Year": 2017,
      "Volume": null,
      "Issue": null,
      "Start Page": 78,
      "End Page": 84,
      "Abstract": "What would have happened if I did not have any code smell? This is an interesting question that no previous study, to the best of our knowledge, has tried to answer. In this paper, we present a method for implementing a what-if scenario analysis estimating the number of defective files in the absence of smells. Our industrial case study shows that 20% of the total defective files were likely avoidable by avoiding smells. Such estimation needs to be used with the due care though as it is based on a hypothetical history (i.e., zero number of smells and same process and product change characteristics). Specifically, the number of defective files could even increase for some types of smells. In addition, we note that in some circumstances, accepting code with smells might still be a good option for a company.",
      "ISSN": "",
      "ISBNs": "978-1-5090-4039-1",
      "DOI": "10.1109/ESEM.2017.14",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8170087",
      "Author Keywords": "code smells;machine learning;software estimation;technical debt",
      "IEEE Terms": "Tools;Maintenance engineering;Software;Logic gates;Estimation;History;Business",
      "Mesh_Terms": "",
      "Article Citation Count": 12,
      "Patent Citation Count": null,
      "Reference Count": 36,
      "License": "IEEE",
      "Online Date": "11-Dec-17",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "DeepJIT: An End-to-End Deep Learning Framework for Just-in-Time Defect Prediction",
      "Authors": "T. Hoang; H. Khanh Dam; Y. Kamei; D. Lo; N. Ubayashi",
      "Author Affiliations": "Singapore Management University, Singapore; University of Wollongong, Australia; Kyushu University, Japan; Singapore Management University, Singapore; Kyushu University, Japan",
      "Publication Title": "2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)",
      "Date Added To Xplore": "29-Aug-19",
      "Publication Year": 2019,
      "Volume": null,
      "Issue": null,
      "Start Page": 34,
      "End Page": 45,
      "Abstract": "Software quality assurance efforts often focus on identifying defective code. To find likely defective code early, change-level defect prediction - aka. Just-In-Time (JIT) defect prediction - has been proposed. JIT defect prediction models identify likely defective changes and they are trained using machine learning techniques with the assumption that historical changes are similar to future ones. Most existing JIT defect prediction approaches make use of manually engineered features. Unlike those approaches, in this paper, we propose an end-to-end deep learning framework, named DeepJIT, that automatically extracts features from commit messages and code changes and use them to identify defects. Experiments on two popular software projects (i.e., QT and OPENSTACK) on three evaluation settings (i.e., cross-validation, short-period, and long-period) show that the best variant of DeepJIT (DeepJIT-Combined), compared with the best performing state-of-the-art approach, achieves improvements of 10.36-11.02% for the project QT and 9.51-13.69% for the project OPENSTACK in terms of the Area Under the Curve (AUC).",
      "ISSN": "2574-3864",
      "ISBNs": "978-1-7281-3412-3",
      "DOI": "10.1109/MSR.2019.00016",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816772",
      "Author Keywords": "deep learning;just-in-time defect prediction;convolutional neural network",
      "IEEE Terms": "Feature extraction;Software;Predictive models;Convolutional codes;Deep learning;Natural language processing;Testing",
      "Mesh_Terms": "",
      "Article Citation Count": 115,
      "Patent Citation Count": null,
      "Reference Count": 78,
      "License": "IEEE",
      "Online Date": "29-Aug-19",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    },
    {
      "Document Title": "Leveraging Evidence Theory to Improve Fault Localization: An Exploratory Study",
      "Authors": "Y. Zhang; K. Leach; Y. Huang",
      "Author Affiliations": "Vanderbilt University; Vanderbilt University; Vanderbilt University",
      "Publication Title": "2023 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)",
      "Date Added To Xplore": "8-Nov-23",
      "Publication Year": 2023,
      "Volume": null,
      "Issue": null,
      "Start Page": 1,
      "End Page": 12,
      "Abstract": "Background: Fault localization in software maintenance and debugging can be a costly process. Spectrum-Based Fault Localization (SBFL) is a widely-used method for fault localization. It assigns suspicion scores to code elements based on tests, indicating the likelihood of defects in specific code lines. However, the effectiveness of SBFL approaches varies depending on the subject code. Aims: In this paper, our aim is to present an approach that combines multiple SBFL formulae using evidence theory. Method: We first introduce a taxonomy of SBFL techniques. Then, we describe how we fuse suspiciousness scores obtained from a set of SBFL formulae. We also introduce a concept of fuzzy windows, and describe how they can enhance localization accuracy and how they can be tuned to further refine results. Results: We present an empirical evaluation of our approach using the Defects4J dataset. Our results demonstrate improvements in fault localization accuracy over existing statement-level SBFL techniques. Specifically, by fusing three SBFL methods, our approach reduces code inspection effort by up to 34.5 % with a size-4 window and increases the hit rate for the top 10% most suspicious lines by 27.9 % using a size-7 window. Moreover, in multi-line bug scenarios, our approach reduces code inspection effort by up to 35.6% and achieves a maximum increase of 43.2% in the hit rate of the top 10% most suspicious lines. Additionally, our approach outperforms state-of-the-art machine learning-based method-level fusion approaches in terms of top rank fault localization accuracy. Conclusions: Our study highlights the applicability of evidence theory in addressing fault localization as an uncertain and ambiguous information fusion problem involving multiple SBFL techniques. The combination of SBFL formulae using evidence theory, along with the use of fuzzy windows, shows promise in enhancing fault localization accuracy.",
      "ISSN": "",
      "ISBNs": "978-1-6654-5223-6",
      "DOI": "10.1109/ESEM56168.2023.10304791",
      "Funding Information": "",
      "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10304791",
      "Author Keywords": "evidence theory;information fusion;uncertainty;fault localization",
      "IEEE Terms": "Location awareness;Software maintenance;Codes;Fuses;Evidence theory;Taxonomy;Debugging",
      "Mesh_Terms": "",
      "Article Citation Count": null,
      "Patent Citation Count": null,
      "Reference Count": 59,
      "License": "IEEE",
      "Online Date": "8-Nov-23",
      "Issue Date": "",
      "Meeting Date": "",
      "Publisher": "IEEE",
      "Document Identifier": "IEEE Conferences"
    }
   ]