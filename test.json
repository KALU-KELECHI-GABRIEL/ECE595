[
    {
        "Document Title": "SAIL: Analyzing Structural Artifacts of Logic Locking Using Machine Learning",
        "Authors": "P. Chakraborty; J. Cruz; A. Alaql; S. Bhunia",
        "Author Affiliations": "Department of Electrical and Computer Engineering, University of Florida, Gainesville, FL, USA; Department of Electrical and Computer Engineering, University of Florida, Gainesville, FL, USA; King Abdulaziz City for Science and Technology (KACST), Communication and Information Technology Research Institute, Riyadh, Saudi Arabia; Department of Electrical and Computer Engineering, University of Florida, Gainesville, FL, USA",
        "Publication Title": "IEEE Transactions on Information Forensics and Security",
        "Date Added To Xplore": "13-Aug-21",
        "Publication Year": 2021,
        "Volume": 16,
        "Issue": null,
        "Start Page": 3828,
        "End Page": 3842,
        "Abstract": "Obfuscation or Logic locking (LL) is a technique for protecting hardware intellectual property (IP) blocks against diverse threats, including IP theft, reverse engineering, and malicious modifications. State-of-the-art locking techniques primarily focus on securing a design from unauthorized usage by disabling correct functionality \u201a\u00c4\u00ec they often do not directly address hiding design intent through structural transformations. They rely on the synthesis tool to introduce structural changes. We observe that this process is insufficient as the resulting changes in circuit topology are: (1) local and (2) predictable. In this paper, we analyze the structural transformations introduced by LL and introduce a potential attack, called SAIL, that can exploit structural artifacts introduced by LL. SAIL uses machine learning (ML) guided structural recovery that exposes a critical vulnerability in these techniques. Through this attack, we demonstrate that the gate-level structure of a locked design can be retrieved in most parts through a systematic set of steps. The proposed attack is applicable to most forms of logic locking, and significantly more powerful than existing attacks, e.g., SAT-based attacks, since it does not require the availability of golden functional responses (e.g., an unlocked IC). Evaluation on benchmark circuits shows that we can recover an average of about 92%, up to 97%, transformations (Top-10 R-Metric) introduced by logic locking. We show that this attack is scalable, flexible, and versatile. Additionally, to evaluate the SAIL attack resilience of a locked design, we present the SIVA-Metric that is fast in terms of computation speed and does not require any training. We also propose possible mitigation steps for incorporating SAIL resilience into a locked design.",
        "Introduction": "The use of pre-verified hardware intellectual property (IP) in system-on-chip (SoC) designs has become a prevalent practice in the semiconductor industry. However, the global economic trend that dictates a horizontal business model incorporates many untrusted parties in the modern chip design flow. In particular, most chip designers rely on potentially untrusted 3rd party fabrication facilities. Such a trend diminishes a chip designer’s control on the IPs and makes them vulnerable to various forms of attacks, including piracy, reverse-engineering, overproduction, and malicious modifications, i.e., Trojan attacks, leading to serious economic and security threats [1], [2]. To address these security issues, hardware obfuscation or logic locking techniques have been actively studied for the past decade [3]–[5]. Fig. 1, summarizes the two main goals for logic locking: 1) preventing black-box usage, and 2) hiding design intent. This method aims at transforming a design - both functionally and structurally based on a key, such that the locked design functions correctly only if the right key inputs are provided. Basic functional locking techniques such as XOR gate insertion locking scheme [6]–[8], can prevent black-box usage of the IP/IC. However, an attacker may still reverse engineer the netlist to extract the intent of a design or identify key-gates for a removal attack. In order to address this attack vector, judicious structural transformations need to be introduced in a design. Current locking approaches primarily rely on: 1) insertion of various modification cells (e.g., XOR, XNOR gates) controlled by key bits, and 2) re-synthesis of the design after locking, to obtain any structural changes in the design. Like any security solutions, IP protection achieved through logic locking largely depends on its robustness against possible attacks. Over the years, several attacks on logic locking have been proposed, which broadly fall into two categories: 1) functional attacks, such as SAT attack [9], and 2) structural attacks, such as ANTI-SAT block removal attack [10]. However, most reported attacks on logic locking have been functional attacks. The only structural attack [10], is actually not designed to deobfuscate an IP, but to facilitate a subsequent SAT (i.e., functional) attack [9].  Based on a thorough statistical analysis, we make two key observations regarding the technique to introduce structural changes in traditional logic locking: 1) the changes are sparse and local to the inserted gates, and 2) the changes are very deterministic (i.e., follow a set of well-known logic synthesis rules). Motivated by these observations, we introduce a new paradigm of attack on logic locking, called SAIL (Structural Analysis using Machine Learning), that exposes a critical vulnerability in logic locking approaches. This attack can retrieve the original design before re-synthesis and hence, the design intent, through structural analysis guided by machine learning. SAIL extracts each logic locking gate locality (subgraph representation of locking and surrounding gates) from a locked design and reverts them to their pre-synthesis state using the reconstruction models trained on [Pre-Synthesis, PostSynthesis] locality pairs from the training dataset. From the information on the pre-synthesized locked netlist, an attacker can more easily carry out key guessing and reverse engineering attacks by observing the structure [11]. SAIL is a more salient attack than SAT because unlike SAT, SAIL: (1) does not require golden responses from an unlocked IC, which may be difficult to obtain, (2) can be applied to both combinational and sequential designs, (3) works for all digital design types and underlying boolean function (including functions for which SAT fail such as, multiplier), and (4) scalable with respect to key and benchmark size. We propose two variants of SAIL: • SAIL-NN: Uses an ensemble of Neural Network models for reconstructing post-synthesis localities into pre-synthesis localities. It is also equipped with a change prediction model which eliminates the need to reconstruct localities that are predicted to not have been changed. • SAIL-RD: Uses an ensemble of rule dictionaries for reverting post-synthesis localities back to their pre-synthesis state. We quantitatively and qualitatively analyze the effectiveness of both variants of the SAIL attack using the systematic framework and tool that we have developed. We propose a novel metric called R-Metric which can be used to quantify the total recovery from using SAIL. From our results, we demonstrate that the SAIL attack is very effective against different logic locking techniques and key sizes. We achieve an average of 92%, and up to 97% (Top-10 R-Metric) recovery of the locking structures for a set of benchmark circuits. We also investigate different methods for providing SAIL resilience to locked designs. Exhibiting synthesis-induced changes with near-uniform probability is one of the best ways to defend against SAIL and we design SIVA (Structural SIgnature Vulnerability Analysis) to capture the degree to which this property is exhibited in a logic locked design. We also prove that the SIVA-Metric is the upper bound of SAIL accuracy for a given locked design.    In particular, we make the following key contributions: • We analyze, both quantitatively and qualitatively, the nature of structural changes in a gate-level netlist introduced due to different steps of logic locking. We note that the structural changes introduced by logic locking techniques are limited in terms of topology and predictable in nature. • Based on these observations, we formulate a novel attack paradigm that exploits the limited structural changes and predictable nature of logic locking techniques. • We propose a complete framework comprising of two different SAIL attack variants with a systematic set of steps. SAIL-NN uses (1) a Change Prediction Model that can predict whether a key gate locality had undergone changes due to logic locking; and (2) a Reconstruction Model that can locally revert the structural changes introduced due to re-synthesis. SAIL-RD learns an ensemble of rule dictionaries to revert post-synthesis localities back to their pre-synthesis state. • We present a comprehensive evaluation of both the proposed SAIL attack variants on a suite of benchmark circuits locked with several logic locking techniques and demonstrate that it is scalable in terms of both effectiveness and speed with respect to the key length, different logic locking techniques, locality size and design size. • We introduce the R-Metric, a measurement to help understand the effectiveness of SAIL. • We quantify the fundamental property that provides SAIL resilience for a locked design. This metric, SIVA-Metric, is fast to compute, requires no training and mathematically proven to be the upper bound of SAIL accuracy. • We investigate different threat models where the attacker does not have knowledge of logic locking technique, synthesis tool, and settings. • We also investigate different approaches that can potentially lead to SAIL resilience. The rest of the paper is organized as follows: Section II discusses different state-of-the-art hardware obfuscation and locking techniques and attacks. Section III motivates the work by establishing that logic locking induced changes are local and predictable. Section IV provides the methodologies of the SAIL attack variants. Section V provides quantitative analysis of the proposed attack. Section VI presents the SIVA metric, investigates SAIL efficacy on different threat models, potential SAIL defense tactics, and runtime analysis of SAIL variants. We conclude the paper in Section VII.",
        "ISSN": "1556-6021",
        "ISBNs": "",
        "DOI": "10.1109/TIFS.2021.3096028",
        "Funding Information": "",
        "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9478898",
        "Author Keywords": "Hardware obfuscation;logic locking;hardware security;cybersecurity;machine learning",
        "IEEE Terms": "Logic gates;Resilience;Machine learning;Hardware;Interference;Benchmark testing;Training",
        "Mesh_Terms": "",
        "Article Citation Count": 12,
        "Patent Citation Count": null,
        "Reference Count": 44,
        "License": "IEEE",
        "Online Date": "9-Jul-21",
        "Issue Date": "",
        "Meeting Date": "",
        "Publisher": "IEEE",
        "Document Identifier": "IEEE Journals",
        "verdict": "YES"
      },
      {
        "Document Title": "Analyzing Android Encrypted Network Traffic to Identify User Actions",
        "Authors": "M. Conti; L. V. Mancini; R. Spolaor; N. V. Verde",
        "Author Affiliations": "Dipartimento di Matematica, Universit\u221a\u2020 di Padova, Padua, Italy; Dipartimento di Informatica, Sapienza Universit\u221a\u2020 di Roma, Rome, Italy; Dipartimento di Matematica, Universit\u221a\u2020 di Padova, Padua, Italy; Dipartimento di Informatica, Sapienza Universit\u221a\u2020 di Roma, Rome, Italy",
        "Publication Title": "IEEE Transactions on Information Forensics and Security",
        "Date Added To Xplore": "19-May-17",
        "Publication Year": 2016,
        "Volume": 11,
        "Issue": 1,
        "Start Page": 114,
        "End Page": 125,
        "Abstract": "Mobile devices can be maliciously exploited to violate the privacy of people. In most attack scenarios, the adversary takes the local or remote control of the mobile device, by leveraging a vulnerability of the system, hence sending back the collected information to some remote web service. In this paper, we consider a different adversary, who does not interact actively with the mobile device, but he is able to eavesdrop the network traffic of the device from the network side (e.g., controlling a Wi-Fi access point). The fact that the network traffic is often encrypted makes the attack even more challenging. In this paper, we investigate to what extent such an external attacker can identify the specific actions that a user is performing on her mobile apps. We design a system that achieves this goal using advanced machine learning techniques. We built a complete implementation of this system, and we also run a thorough set of experiments, which show that our attack can achieve accuracy and precision higher than 95%, for most of the considered actions. We compared our solution with the three state-of-the-art algorithms, and confirming that our system outperforms all these direct competitors.",
        "Introduction": "The amount of sensitive data that users handle with their mobile devices is truly staggering. People continuously carry these devices with them and use them for daily communication activities, including not only voice calls and SMS, but also emails and social network interactions. A typical user gains access to her savings and checking account by using her smartphone. She installs and uses several apps to communicate with friends or acquaintances. Through her smartphone, she gets information about sensitive topics such as diseases, sexual or religious preferences, etc. As a consequence, several concerns have been raised about the capabilities of these portable devices to invade the privacy of users actually becoming “tracking devices”. In this context, an important aspect is related to the possibility of continuously spying and locating an individual [3], [32], [35]. Solutions to identify and isolate malicious code running on smartphones [31], [37], [42] as well as to protect against attacks coming from the network [4], [11] might significantly reduce current threats to user privacy. While people become more familiar with mobile technologies and their related privacy threats (also thanks to the attention raised by the media, e.g., see the recent attention on NSA for supposedly eavesdropping foreign governments leaders such as Angela Merkel [35]), users have started adopting good practices that better adapt to their privacy feeling and understanding. Unfortunately, we believe that even adopting such good practices would not close the door to malicious adversaries willing to trace people. Indeed, several attacks may violate the privacy of the user even when the adversary does not physically or remotely control the user device. In this paper, we consider a passive attacker that is able to sniff the network traffic of the devices from the network side. Obviously, if the network traffic is not encrypted, the task of such an attacker is simple: he can analyze the payload and read the content of each packet. However, many mobile apps use the Secure Sockets Layer (SSL) – and its successor Transport Layer Security (TLS) – as a building block for encrypted communications. Even when such solutions are in place, the adversary can still infer a significant amount of information from the analysis of the properly encrypted network traffic. For example, work leveraging analysis of encrypted traffic already highlighted the possibility of understanding the apps a user has installed on her device [36], or identify the presence of a specific user within a network [38]. This work focuses on understanding whether the user profiling made through analyzing encrypted traffic can be enhanced to understand exactly what actions the user is doing on her phone: as concrete examples, we aim at identifying actions such as the user sending an email, receiving an email, browsing someone profile on a social network, publishing a post or a tweet. The underlying issue we leverage in our work is that SSL and TLS protect the content of a packet, while they do not prevent the detection of networks packets patterns that instead may reveal some sensitive information about the user behavior. An adversary may use our approach in several practical ways to threaten the privacy of the user. In the following, we report some possible scenarios: A censorship government may try to identify a dissident who spreads anti-government propaganda using an anonymous social network account. Comparing the time of the public posts with the time of the actions (inferred with our method), the government can guess the identity of that anonymous dissident. By tracing the actions performed by two users, and taking into account the communication latency, an adversary may guess (even if with some probability of error) whether there is a communication between them. Multiple observations could reduce the probability of errors. An adversary can build a behavioral profile of a target victim based on the habits of the latter one (e.g., wake up time, work time). For example, this could be used to improve user fingerprinting methods, to infer the presence of a particular user in a network [38], even when she accesses the network with different types of devices. a) Contributions: In this paper (which is an extended version of the work in [12]), we propose a framework to infer which particular actions the user executes on some app installed on her mobile-phone. In particular, we assume that the traffic is encrypted and the adversary eavesdrops (without modifying them) the messages exchanged between the user's device and the web services that she uses. Our framework analyzes the network communications and leverages information available in TCP/IP packets (like IP addresses and ports), together with other information like the size, the direction (incoming/outgoing), and the timing. By using an approach based on machine learning, each app that is of interest is analyzed independently. To set up our system, for each app we first pre-process a dataset of network packets labeled with the user actions that originated them, we cluster them in flow typologies that represent recurrent network flows, and finally we analyze them in order to create a training set that will be used to feed a classifier. The trained classifier will then be able to classify new traffic traces that have never been seen before. We run a thorough set of experiments to evaluate our solution considering seven popular apps: Facebook, Gmail, Twitter, Tumblr, Dropbox, Google+ and Evernote. The results show that it can achieve accuracy and precision higher than 95%, for most of the considered actions. In the current version of the paper, we also add a discussion (not present in [12]) about the key idea underneath our traffic analysis approach. In particular, we examine in depth the concept of network flow and the metric to evaluate the similarity between them. We also report details of the machine learning techniques we leverage in our method. Furthermore, in addition to our previous work [12], we run a thorough comparison of our solution with three state of the art algorithms, showing that our solution outperforms them in all of the cases.",
        "ISSN": "1556-6021",
        "ISBNs": "",
        "DOI": "10.1109/TIFS.2015.2478741",
        "Funding Information": "TENACE PRIN Project through the Italian Ministry of Education, University and Research(grant numbers:20103P34XC); European Commission Directorate General Home Affairs through the GAINS Project(grant numbers:HOME/2013/CIPS/AG/4000005057); European Commission through the H2020 SUNFISH Project(grant numbers:644666); EU-India REACH Project(grant numbers:ICI+/2014/342-896); Project entitled Tackling Mobile Malware with Innovative Machine Learning Techniques through the University of Padua; Marie Curie Fellowship through the European Commission(grant numbers:PCIG11-GA-2012-321980); ",
        "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7265055",
        "Author Keywords": "Cellular phones;information security;privacy",
        "IEEE Terms": "Time series analysis;Cryptography;Privacy;IP networks;Mobile handsets;Machine learning algorithms;Mobile communication",
        "Mesh_Terms": "",
        "Article Citation Count": 191,
        "Patent Citation Count": null,
        "Reference Count": 43,
        "License": "IEEE",
        "Online Date": "14-Sep-15",
        "Issue Date": "",
        "Meeting Date": "",
        "Publisher": "IEEE",
        "Document Identifier": "IEEE Journals",
        "verdict": "YES"
      }

]