[
  {
    "Document Title": "SAIL: Analyzing Structural Artifacts of Logic Locking Using Machine Learning",
    "Authors": "P. Chakraborty; J. Cruz; A. Alaql; S. Bhunia",
    "Author Affiliations": "Department of Electrical and Computer Engineering, University of Florida, Gainesville, FL, USA; Department of Electrical and Computer Engineering, University of Florida, Gainesville, FL, USA; King Abdulaziz City for Science and Technology (KACST), Communication and Information Technology Research Institute, Riyadh, Saudi Arabia; Department of Electrical and Computer Engineering, University of Florida, Gainesville, FL, USA",
    "Publication Title": "IEEE Transactions on Information Forensics and Security",
    "Date Added To Xplore": "13-Aug-21",
    "Publication Year": 2021,
    "Volume": 16,
    "Issue": null,
    "Start Page": 3828,
    "End Page": 3842,
    "Abstract": "Obfuscation or Logic locking (LL) is a technique for protecting hardware intellectual property (IP) blocks against diverse threats, including IP theft, reverse engineering, and malicious modifications. State-of-the-art locking techniques primarily focus on securing a design from unauthorized usage by disabling correct functionality \u201a\u00c4\u00ec they often do not directly address hiding design intent through structural transformations. They rely on the synthesis tool to introduce structural changes. We observe that this process is insufficient as the resulting changes in circuit topology are: (1) local and (2) predictable. In this paper, we analyze the structural transformations introduced by LL and introduce a potential attack, called SAIL, that can exploit structural artifacts introduced by LL. SAIL uses machine learning (ML) guided structural recovery that exposes a critical vulnerability in these techniques. Through this attack, we demonstrate that the gate-level structure of a locked design can be retrieved in most parts through a systematic set of steps. The proposed attack is applicable to most forms of logic locking, and significantly more powerful than existing attacks, e.g., SAT-based attacks, since it does not require the availability of golden functional responses (e.g., an unlocked IC). Evaluation on benchmark circuits shows that we can recover an average of about 92%, up to 97%, transformations (Top-10 R-Metric) introduced by logic locking. We show that this attack is scalable, flexible, and versatile. Additionally, to evaluate the SAIL attack resilience of a locked design, we present the SIVA-Metric that is fast in terms of computation speed and does not require any training. We also propose possible mitigation steps for incorporating SAIL resilience into a locked design.",
    "Introduction": "The use of pre-verified hardware intellectual property (IP) in system-on-chip (SoC) designs has become a prevalent practice in the semiconductor industry. However, the global economic trend that dictates a horizontal business model incorporates many untrusted parties in the modern chip design flow. In particular, most chip designers rely on potentially untrusted 3rd party fabrication facilities. Such a trend diminishes a chip designer\u2019s control on the IPs and makes them vulnerable to various forms of attacks, including piracy, reverse-engineering, overproduction, and malicious modifications, i.e., Trojan attacks, leading to serious economic and security threats [1], [2]. To address these security issues, hardware obfuscation or logic locking techniques have been actively studied for the past decade [3]\u2013[5]. Fig. 1, summarizes the two main goals for logic locking: 1) preventing black-box usage, and 2) hiding design intent. This method aims at transforming a design - both functionally and structurally based on a key, such that the locked design functions correctly only if the right key inputs are provided. Basic functional locking techniques such as XOR gate insertion locking scheme [6]\u2013[8], can prevent black-box usage of the IP/IC. However, an attacker may still reverse engineer the netlist to extract the intent of a design or identify key-gates for a removal attack. In order to address this attack vector, judicious structural transformations need to be introduced in a design. Current locking approaches primarily rely on: 1) insertion of various modification cells (e.g., XOR, XNOR gates) controlled by key bits, and 2) re-synthesis of the design after locking, to obtain any structural changes in the design. Like any security solutions, IP protection achieved through logic locking largely depends on its robustness against possible attacks. Over the years, several attacks on logic locking have been proposed, which broadly fall into two categories: 1) functional attacks, such as SAT attack [9], and 2) structural attacks, such as ANTI-SAT block removal attack [10]. However, most reported attacks on logic locking have been functional attacks. The only structural attack [10], is actually not designed to deobfuscate an IP, but to facilitate a subsequent SAT (i.e., functional) attack [9].  Based on a thorough statistical analysis, we make two key observations regarding the technique to introduce structural changes in traditional logic locking: 1) the changes are sparse and local to the inserted gates, and 2) the changes are very deterministic (i.e., follow a set of well-known logic synthesis rules). Motivated by these observations, we introduce a new paradigm of attack on logic locking, called SAIL (Structural Analysis using Machine Learning), that exposes a critical vulnerability in logic locking approaches. This attack can retrieve the original design before re-synthesis and hence, the design intent, through structural analysis guided by machine learning. SAIL extracts each logic locking gate locality (subgraph representation of locking and surrounding gates) from a locked design and reverts them to their pre-synthesis state using the reconstruction models trained on [Pre-Synthesis, PostSynthesis] locality pairs from the training dataset. From the information on the pre-synthesized locked netlist, an attacker can more easily carry out key guessing and reverse engineering attacks by observing the structure [11]. SAIL is a more salient attack than SAT because unlike SAT, SAIL: (1) does not require golden responses from an unlocked IC, which may be difficult to obtain, (2) can be applied to both combinational and sequential designs, (3) works for all digital design types and underlying boolean function (including functions for which SAT fail such as, multiplier), and (4) scalable with respect to key and benchmark size. We propose two variants of SAIL: \u2022 SAIL-NN: Uses an ensemble of Neural Network models for reconstructing post-synthesis localities into pre-synthesis localities. It is also equipped with a change prediction model which eliminates the need to reconstruct localities that are predicted to not have been changed. \u2022 SAIL-RD: Uses an ensemble of rule dictionaries for reverting post-synthesis localities back to their pre-synthesis state. We quantitatively and qualitatively analyze the effectiveness of both variants of the SAIL attack using the systematic framework and tool that we have developed. We propose a novel metric called R-Metric which can be used to quantify the total recovery from using SAIL. From our results, we demonstrate that the SAIL attack is very effective against different logic locking techniques and key sizes. We achieve an average of 92%, and up to 97% (Top-10 R-Metric) recovery of the locking structures for a set of benchmark circuits. We also investigate different methods for providing SAIL resilience to locked designs. Exhibiting synthesis-induced changes with near-uniform probability is one of the best ways to defend against SAIL and we design SIVA (Structural SIgnature Vulnerability Analysis) to capture the degree to which this property is exhibited in a logic locked design. We also prove that the SIVA-Metric is the upper bound of SAIL accuracy for a given locked design.    In particular, we make the following key contributions: \u2022 We analyze, both quantitatively and qualitatively, the nature of structural changes in a gate-level netlist introduced due to different steps of logic locking. We note that the structural changes introduced by logic locking techniques are limited in terms of topology and predictable in nature. \u2022 Based on these observations, we formulate a novel attack paradigm that exploits the limited structural changes and predictable nature of logic locking techniques. \u2022 We propose a complete framework comprising of two different SAIL attack variants with a systematic set of steps. SAIL-NN uses (1) a Change Prediction Model that can predict whether a key gate locality had undergone changes due to logic locking; and (2) a Reconstruction Model that can locally revert the structural changes introduced due to re-synthesis. SAIL-RD learns an ensemble of rule dictionaries to revert post-synthesis localities back to their pre-synthesis state. \u2022 We present a comprehensive evaluation of both the proposed SAIL attack variants on a suite of benchmark circuits locked with several logic locking techniques and demonstrate that it is scalable in terms of both effectiveness and speed with respect to the key length, different logic locking techniques, locality size and design size. \u2022 We introduce the R-Metric, a measurement to help understand the effectiveness of SAIL. \u2022 We quantify the fundamental property that provides SAIL resilience for a locked design. This metric, SIVA-Metric, is fast to compute, requires no training and mathematically proven to be the upper bound of SAIL accuracy. \u2022 We investigate different threat models where the attacker does not have knowledge of logic locking technique, synthesis tool, and settings. \u2022 We also investigate different approaches that can potentially lead to SAIL resilience. The rest of the paper is organized as follows: Section II discusses different state-of-the-art hardware obfuscation and locking techniques and attacks. Section III motivates the work by establishing that logic locking induced changes are local and predictable. Section IV provides the methodologies of the SAIL attack variants. Section V provides quantitative analysis of the proposed attack. Section VI presents the SIVA metric, investigates SAIL efficacy on different threat models, potential SAIL defense tactics, and runtime analysis of SAIL variants. We conclude the paper in Section VII.",
    "ISSN": "1556-6021",
    "ISBNs": "",
    "DOI": "10.1109/TIFS.2021.3096028",
    "Funding Information": "",
    "PDF Link": "https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9478898",
    "Author Keywords": "Hardware obfuscation;logic locking;hardware security;cybersecurity;machine learning",
    "IEEE Terms": "Logic gates;Resilience;Machine learning;Hardware;Interference;Benchmark testing;Training",
    "Mesh_Terms": "",
    "Article Citation Count": 12,
    "Patent Citation Count": null,
    "Reference Count": 44,
    "License": "IEEE",
    "Online Date": "9-Jul-21",
    "Issue Date": "",
    "Meeting Date": "",
    "Publisher": "IEEE",
    "Document Identifier": "IEEE Journals",
    "verdict": "YES"
  }
]